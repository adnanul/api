// Code generated by protoc-gen-go.
// source: quota.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QuotaGetResponse struct {
	Status   *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Assigned map[string]int64        `protobuf:"bytes,2,rep,name=assigned" json:"assigned,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Used     map[string]int64        `protobuf:"bytes,3,rep,name=used" json:"used,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *QuotaGetResponse) Reset()                    { *m = QuotaGetResponse{} }
func (m *QuotaGetResponse) String() string            { return proto.CompactTextString(m) }
func (*QuotaGetResponse) ProtoMessage()               {}
func (*QuotaGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *QuotaGetResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *QuotaGetResponse) GetAssigned() map[string]int64 {
	if m != nil {
		return m.Assigned
	}
	return nil
}

func (m *QuotaGetResponse) GetUsed() map[string]int64 {
	if m != nil {
		return m.Used
	}
	return nil
}

func init() {
	proto.RegisterType((*QuotaGetResponse)(nil), "appscode.billing.v1beta1.QuotaGetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Quotas service

type QuotasClient interface {
	Get(ctx context.Context, in *appscode_dtypes.VoidRequest, opts ...grpc.CallOption) (*QuotaGetResponse, error)
}

type quotasClient struct {
	cc *grpc.ClientConn
}

func NewQuotasClient(cc *grpc.ClientConn) QuotasClient {
	return &quotasClient{cc}
}

func (c *quotasClient) Get(ctx context.Context, in *appscode_dtypes.VoidRequest, opts ...grpc.CallOption) (*QuotaGetResponse, error) {
	out := new(QuotaGetResponse)
	err := grpc.Invoke(ctx, "/appscode.billing.v1beta1.Quotas/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Quotas service

type QuotasServer interface {
	Get(context.Context, *appscode_dtypes.VoidRequest) (*QuotaGetResponse, error)
}

func RegisterQuotasServer(s *grpc.Server, srv QuotasServer) {
	s.RegisterService(&_Quotas_serviceDesc, srv)
}

func _Quotas_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(appscode_dtypes.VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotasServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.billing.v1beta1.Quotas/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotasServer).Get(ctx, req.(*appscode_dtypes.VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quotas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.billing.v1beta1.Quotas",
	HandlerType: (*QuotasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Quotas_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor3,
}

func init() { proto.RegisterFile("quota.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x69, 0xab, 0xd3, 0x65, 0x08, 0x23, 0x88, 0x96, 0xb2, 0x43, 0x19, 0x22, 0x43, 0x24,
	0x65, 0x53, 0x70, 0xea, 0xc9, 0x81, 0xcc, 0xe3, 0xac, 0x7f, 0x0e, 0xde, 0xb2, 0xf5, 0xa5, 0x14,
	0x6b, 0x92, 0xed, 0x4d, 0x07, 0x3b, 0x78, 0xf1, 0xe2, 0x07, 0xf0, 0xa3, 0x79, 0xf2, 0xee, 0x07,
	0x91, 0xa6, 0xdd, 0xc4, 0x89, 0xe0, 0x2e, 0xa5, 0x79, 0x93, 0xe7, 0xf7, 0xbc, 0x6f, 0xf2, 0x90,
	0xda, 0x38, 0x93, 0x9a, 0x33, 0x35, 0x91, 0x5a, 0x52, 0x97, 0x2b, 0x85, 0x23, 0x19, 0x01, 0x1b,
	0x26, 0x69, 0x9a, 0x88, 0x98, 0x4d, 0xdb, 0x43, 0xd0, 0xbc, 0xed, 0x35, 0x62, 0x29, 0xe3, 0x14,
	0x02, 0xae, 0x92, 0x80, 0x0b, 0x21, 0x35, 0xd7, 0x89, 0x14, 0x58, 0xe8, 0xbc, 0x9d, 0xbc, 0x1c,
	0xe9, 0x99, 0x02, 0x0c, 0xcc, 0xb7, 0xa8, 0x37, 0x3f, 0x6c, 0x52, 0xbf, 0xce, 0xf9, 0x7d, 0xd0,
	0x21, 0xa0, 0x92, 0x02, 0x81, 0x06, 0xa4, 0x82, 0x9a, 0xeb, 0x0c, 0x5d, 0xcb, 0xb7, 0x5a, 0xb5,
	0xce, 0x2e, 0x5b, 0xb8, 0x16, 0x08, 0x76, 0x63, 0xb6, 0xc3, 0xf2, 0x18, 0xbd, 0x25, 0x9b, 0x1c,
	0x31, 0x89, 0x05, 0x44, 0xae, 0xed, 0x3b, 0xad, 0x5a, 0xa7, 0xcb, 0xfe, 0x6a, 0x94, 0x2d, 0xdb,
	0xb1, 0x8b, 0x52, 0x7a, 0x29, 0xf4, 0x64, 0x16, 0x2e, 0x48, 0xf4, 0x8a, 0xac, 0x65, 0x08, 0x91,
	0xeb, 0x18, 0xe2, 0xf1, 0x0a, 0xc4, 0x3b, 0x9c, 0xd3, 0x0c, 0xc1, 0x3b, 0x27, 0x5b, 0x3f, 0x4c,
	0x68, 0x9d, 0x38, 0x8f, 0x30, 0x33, 0xe3, 0x55, 0xc3, 0xfc, 0x97, 0x6e, 0x93, 0xf5, 0x29, 0x4f,
	0x33, 0x70, 0x6d, 0xdf, 0x6a, 0x39, 0x61, 0xb1, 0x38, 0xb3, 0xbb, 0x96, 0x77, 0x42, 0xaa, 0x0b,
	0xde, 0x2a, 0xc2, 0xce, 0xab, 0x45, 0x2a, 0xa6, 0x35, 0xa4, 0xcf, 0xc4, 0xe9, 0x83, 0xa6, 0x8d,
	0x5f, 0x17, 0x79, 0x2f, 0x93, 0x28, 0x84, 0x71, 0x06, 0xa8, 0xbd, 0x83, 0xff, 0x4f, 0xd8, 0x3c,
	0x7c, 0x79, 0xff, 0x7c, 0xb3, 0xf7, 0xe9, 0x5e, 0x30, 0xd7, 0x98, 0x87, 0x2f, 0x75, 0x41, 0xa9,
	0x0b, 0x4c, 0x74, 0xb0, 0x77, 0x4a, 0xfc, 0x91, 0x7c, 0xfa, 0xc6, 0x73, 0x95, 0x2c, 0x5b, 0xf4,
	0x88, 0xf1, 0x18, 0xe4, 0xa9, 0x18, 0x58, 0x0f, 0x1b, 0x65, 0x79, 0x58, 0x31, 0x39, 0x39, 0xfa,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x14, 0xa9, 0xf8, 0x66, 0x86, 0x02, 0x00, 0x00,
}
