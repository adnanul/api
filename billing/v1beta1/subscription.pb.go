// Code generated by protoc-gen-go.
// source: subscription.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SubscriptionSubscribeRequest struct {
	ProductId  string `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	AutoExtend bool   `protobuf:"varint,2,opt,name=auto_extend,json=autoExtend" json:"auto_extend,omitempty"`
	StartTime  int64  `protobuf:"varint,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
}

func (m *SubscriptionSubscribeRequest) Reset()                    { *m = SubscriptionSubscribeRequest{} }
func (m *SubscriptionSubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionSubscribeRequest) ProtoMessage()               {}
func (*SubscriptionSubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func init() {
	proto.RegisterType((*SubscriptionSubscribeRequest)(nil), "appscode.billing.v1beta1.SubscriptionSubscribeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Subscriptions service

type SubscriptionsClient interface {
	Subscribe(ctx context.Context, in *SubscriptionSubscribeRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
}

type subscriptionsClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionsClient(cc *grpc.ClientConn) SubscriptionsClient {
	return &subscriptionsClient{cc}
}

func (c *subscriptionsClient) Subscribe(ctx context.Context, in *SubscriptionSubscribeRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.billing.v1beta1.Subscriptions/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscriptions service

type SubscriptionsServer interface {
	Subscribe(context.Context, *SubscriptionSubscribeRequest) (*appscode_dtypes.VoidResponse, error)
}

func RegisterSubscriptionsServer(s *grpc.Server, srv SubscriptionsServer) {
	s.RegisterService(&_Subscriptions_serviceDesc, srv)
}

func _Subscriptions_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriptionSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionsServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.billing.v1beta1.Subscriptions/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionsServer).Subscribe(ctx, req.(*SubscriptionSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subscriptions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.billing.v1beta1.Subscriptions",
	HandlerType: (*SubscriptionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Subscriptions_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor4,
}

func init() { proto.RegisterFile("subscription.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x49, 0x0b, 0xea, 0x44, 0x5c, 0x98, 0x85, 0x0c, 0xa5, 0xc5, 0xa1, 0xab, 0xa2, 0x90,
	0x58, 0x85, 0x2e, 0x5c, 0x49, 0xc1, 0x85, 0xbb, 0x32, 0x8a, 0x0b, 0x37, 0x25, 0x33, 0x79, 0x94,
	0x40, 0x9b, 0x17, 0x27, 0x6f, 0x44, 0x17, 0x6e, 0xbc, 0x82, 0x3b, 0xcf, 0xe0, 0x6d, 0xbc, 0x82,
	0x07, 0x91, 0x99, 0x8e, 0x76, 0x10, 0x74, 0x13, 0xc2, 0x97, 0xfc, 0xef, 0xff, 0xdf, 0xcf, 0x45,
	0x28, 0xb3, 0x90, 0x17, 0xd6, 0x93, 0x45, 0x27, 0x7d, 0x81, 0x84, 0x22, 0xd6, 0xde, 0x87, 0x1c,
	0x0d, 0xc8, 0xcc, 0x2e, 0x97, 0xd6, 0x2d, 0xe4, 0xc3, 0x38, 0x03, 0xd2, 0xe3, 0x5e, 0x7f, 0x81,
	0xb8, 0x58, 0x82, 0xd2, 0xde, 0x2a, 0xed, 0x1c, 0x92, 0xae, 0x64, 0x61, 0xad, 0xeb, 0x1d, 0x54,
	0xd8, 0xd0, 0x93, 0x87, 0xa0, 0xea, 0x73, 0xcd, 0x87, 0xcf, 0xbc, 0x7f, 0xdd, 0x72, 0x69, 0xee,
	0x19, 0xa4, 0x70, 0x5f, 0x42, 0x20, 0x31, 0xe0, 0xdc, 0x17, 0x68, 0xca, 0x9c, 0xe6, 0xd6, 0xc4,
	0x2c, 0x61, 0xa3, 0x28, 0x8d, 0x1a, 0x72, 0x65, 0xc4, 0x21, 0xdf, 0xd5, 0x25, 0xe1, 0x1c, 0x1e,
	0x09, 0x9c, 0x89, 0x3b, 0x09, 0x1b, 0xed, 0xa4, 0xbc, 0x42, 0x97, 0x35, 0xa9, 0xf4, 0x81, 0x74,
	0x41, 0x73, 0xb2, 0x2b, 0x88, 0xbb, 0x09, 0x1b, 0x75, 0xd3, 0xa8, 0x26, 0x37, 0x76, 0x05, 0xa7,
	0xef, 0x8c, 0xef, 0xb5, 0xfd, 0x83, 0x78, 0x63, 0x3c, 0xfa, 0x49, 0x21, 0x26, 0xf2, 0xaf, 0x7d,
	0xe5, 0x7f, 0xb1, 0x7b, 0x83, 0x8d, 0x6e, 0xbd, 0xb4, 0xbc, 0x45, 0x6b, 0x52, 0x08, 0x1e, 0x5d,
	0x80, 0xe1, 0xe4, 0xe5, 0xe3, 0xf3, 0xb5, 0x73, 0x32, 0x3c, 0x56, 0xdf, 0xdf, 0xea, 0xda, 0x1a,
	0x0b, 0xd5, 0x58, 0xa8, 0x76, 0xff, 0xe1, 0x9c, 0x1d, 0x4d, 0x2f, 0x78, 0x92, 0xe3, 0x6a, 0x33,
	0x5b, 0x7b, 0xfb, 0x3b, 0xd7, 0x74, 0xbf, 0x1d, 0x6c, 0x56, 0x95, 0x3c, 0x63, 0x77, 0xdb, 0xcd,
	0x6b, 0xb6, 0x55, 0xd7, 0x7e, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0x40, 0xcc, 0x08, 0x28, 0xdc,
	0x01, 0x00, 0x00,
}
