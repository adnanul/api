// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd1\xc1\x6e\xdb\x30\x0c\x06\xe0\xbb\x9e\x82\x70\xce\xb3\x91\x1d\x73\xcb\x82\x62\x33\xd0\x01\x05\xd2\xed\x4e\x4b\x6c\x4c\x54\xa1\x04\x91\xf2\xd0\xb7\x1f\xdc\xa2\x46\x8b\x65\x45\x9d\x93\x61\xeb\xff\x48\x5a\xdc\xc0\x21\xc9\x03\x9f\x6a\x41\xe3\x24\x0a\x0f\xa9\xc0\xfe\xae\xbf\x91\x90\x13\x8b\x69\x3b\xbf\x1d\xa9\x4c\x54\xe0\x0f\xc7\xe8\x36\x80\xde\x20\x09\xb0\x04\x9e\x38\x54\x8c\x70\x26\x1b\x53\x50\xa8\x39\x09\xd8\x48\xe0\xdf\x15\x75\x1b\xc8\x25\x4d\x1c\x28\xb4\xce\xd9\x53\xa6\x1d\x34\xbd\x18\x15\x4f\xd9\x52\x79\x19\xa1\x71\x13\x46\x0e\xcf\xe4\xcd\xe1\xce\x01\xa4\x12\xa8\xec\x60\xeb\x00\x24\xfd\x5e\x52\xf3\x11\xc0\x17\x68\x3a\xcc\x59\x7d\x0a\xd4\x8e\x84\xd1\xc6\xf6\xc7\xf3\xa3\x3b\x1a\x5a\xd5\xc6\x61\xb5\x91\xc4\xd8\x7f\x50\xfc\xab\x03\xa8\xf2\x26\x49\xe1\xf5\x12\x3e\xdd\xe7\x9f\xd8\x5c\xae\x9d\xb6\x03\x19\x6e\xdb\xfd\xbb\x29\xba\xdb\x74\x62\x59\x6f\x52\xb5\x95\xe8\x3e\x3d\xd2\xa5\x46\x8f\x75\xa0\x22\x64\xa4\x8b\x3c\xc4\xaa\x46\x45\xe7\x3f\x2a\x56\xf3\xeb\x66\x56\xd9\x5e\xd4\x50\x3c\x7d\x7b\xea\xef\x2e\xd0\x33\x72\x64\x39\x45\x56\x5b\xec\xcf\x97\x6f\xb7\xac\xd6\x1d\x49\xc2\xcd\x1c\xba\xc6\xd6\x41\x7d\xe1\x81\xae\xb0\xbf\x44\x3f\xd0\x82\x67\xd2\x8c\x9e\x16\x7b\x4f\x78\xd6\xee\x50\x08\x6d\x0d\xf8\x4e\x97\xf6\xf7\xbf\x74\xaf\xfb\x09\x39\xe2\x10\xa9\x71\x7f\x03\x00\x00\xff\xff\x4e\x9f\x85\x9b\xad\x03\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 941, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

