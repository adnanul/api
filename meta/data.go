// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x41\x8f\xd3\x30\x10\x85\xef\xfd\x15\xa3\xf6\x0a\x89\xe0\xd8\x5b\x09\x05\x2a\x2d\x68\x45\x81\xbb\xeb\xcc\x36\xa3\x3a\x1e\xcb\x1e\x67\xb5\xff\x9e\x49\x4b\xba\x0d\x41\x29\xa7\x4e\xf3\xbe\x79\x1e\xdb\xcf\x2b\xa8\xd8\x3f\xd1\x31\x47\x23\xc4\x3e\xc1\x13\x47\xd8\x3c\xee\xb6\xbe\x0e\x4c\x5e\x52\xd1\xff\xdb\x63\xec\x30\xc2\x33\x39\xb7\x58\x81\xb1\x02\xec\x81\x7c\x4d\x1d\xd5\xd9\x38\x68\x51\x1a\xae\x13\xe4\xa0\xdf\xa5\x41\xb0\x23\x53\xed\x09\x91\x95\xc5\xba\x58\x2c\xe4\x25\xe0\x1a\x96\x3b\x2f\x18\x2d\x06\xe1\x78\x19\x61\xb9\x30\x59\x7b\xbd\x90\x3d\xb7\xdd\x00\xeb\x05\x00\xc7\x1a\xe3\x1a\xde\x69\x99\xfd\x0d\x89\xf5\x30\x6b\x4f\x01\xbc\x85\x65\xd9\xa0\x71\xd2\x14\x5f\xce\x3f\xe5\x5e\x8c\xe4\xb4\xbc\xaa\x7d\x73\xb1\x19\xad\x55\x3e\xf0\x91\xfc\x5d\x84\xb3\xcc\x33\x3f\xf8\x84\x37\x36\xa7\x7c\xc0\xe8\x51\x30\x15\x95\xcb\x49\xf7\x93\xfa\x69\xa2\xe4\xb0\xb7\x91\xc2\x8d\x5b\x6b\xc8\x91\x3f\x3a\x4a\x52\x7c\xbd\xd4\x0f\x5a\x97\x7b\xf4\xf5\xb6\x17\xff\x03\xcd\x87\xa4\xae\x07\xbc\x8f\xfe\xf4\x69\x0a\x7b\xd3\x62\x0a\xc6\x62\xf1\x6d\xa8\xca\x2a\xa2\x1e\xf1\x3c\xf3\x19\x65\x1e\xd8\xa5\x4d\xa7\x8b\x9b\x83\x53\xa7\x33\xb9\x82\x4f\xec\x1c\x3f\xeb\x3c\x70\x8d\x1a\x98\x88\x1a\x14\xea\x74\xc5\x37\xe0\x59\x34\x69\x16\x53\xea\xfb\x40\x58\x03\x27\xe7\xd3\x2c\xae\x8b\x1d\x34\x90\x6a\x51\x54\x8d\x89\x47\x2c\xb7\x49\xa8\x1d\x8d\x3b\x00\x3b\xdf\x31\xfd\x63\x3b\x83\xfe\x98\xa3\x6d\x4c\xc2\xf2\x03\x8e\x72\x30\xd1\x2b\x6e\x83\xc3\x59\x8b\xca\x71\x7a\xd5\x07\xf9\xcf\xe5\x84\x73\x4c\x46\x37\x95\x5e\x34\x18\xed\x66\x3e\xd1\x96\xf4\xfe\xfa\x00\x4d\xb6\xf0\xaa\x7c\xc4\xbf\x26\x33\xf6\x94\x83\x26\x8f\xd4\xb8\xfc\x8e\xc3\x4b\x9f\x22\x97\xf7\x3d\x3d\x9d\x91\x3a\xd8\x77\xc6\x51\x3d\xf3\x42\xdf\x6b\xe9\xf9\xd7\x95\xba\xf3\x2c\x7f\x07\x00\x00\xff\xff\x7b\x7d\x71\x6a\x82\x04\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1154, mode: os.FileMode(436), modTime: time.Unix(1471426605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
