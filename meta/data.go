// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x92\x41\x8b\xdb\x4c\x0c\x86\xef\xfe\x15\xc2\x39\x7f\x36\xf9\x8e\xb9\xb9\xe9\xd2\x1a\x52\x58\x36\x69\xef\xe3\x19\xad\x2d\x76\xac\x19\x46\x1a\x97\xfd\xf7\xc5\x09\xeb\xee\x92\x34\x34\x81\x9e\x8c\xac\xe7\xb1\x5e\x64\xad\x60\x1b\xf8\x99\xfa\x9c\x8c\x52\x60\x81\xe7\x90\xa0\x79\x6c\x1f\xd8\xc5\x40\xac\x52\xcd\xd5\x1e\xd3\x84\x09\x7e\x92\xf7\xc5\x0a\x8c\x55\x08\x0c\xc4\x8e\x26\x72\xd9\x78\x18\x51\x87\xe0\x04\x72\x0c\x0c\x3a\x20\xd8\x0f\x1f\x2d\x56\x10\x53\x98\xc8\xa1\xab\x8a\x42\x5f\x23\x6e\xa0\x6c\x59\x31\x59\x8c\x1a\xd2\x29\x42\x59\x4c\xc6\x93\x3b\x2a\xef\x9a\x9b\x02\x20\x24\x87\x69\x03\xeb\x02\x80\xc3\x8f\x85\x9a\x5b\x00\xff\x41\x59\x9b\x18\xc5\x06\x87\xd5\x80\xc6\xeb\x50\x7d\x3d\x3e\xea\xbd\x1a\xcd\x52\x9e\x63\x8a\xa2\x3e\x70\x9f\x32\x33\x71\x5f\x1d\x50\x74\x17\xb8\x7f\x3a\xd5\xf5\x53\xe6\xb2\x30\x59\x07\x64\x25\x7b\x25\xd2\xff\x05\x40\xe6\x77\x24\xba\xb7\xd5\xfd\xe3\x74\x67\xd6\x1c\xa2\x9a\xd6\x1d\xaa\x59\x57\xcd\x87\xec\xf5\x2e\xf4\x74\x87\x13\xb2\xde\x28\x1d\xc2\x0b\x5e\x1a\xf4\x92\x3b\x4c\x8c\x8a\xb2\x98\x5b\x9f\x45\x31\xc9\xbc\x87\xa4\x39\xbe\x5d\xc1\x4d\x6e\xcb\xa2\x86\x2d\x7e\x7a\x6d\x1f\x2f\xa8\xa3\x21\x4f\xdc\x7b\x12\x5d\xdc\x6f\xa7\x77\x3b\x12\xad\xf7\xc8\xee\x61\x86\xee\x71\x73\x27\x36\x51\x87\x77\xb8\xdf\x59\xae\xd8\x6c\x46\x94\x68\x2c\x2e\xee\x01\xcd\x28\xf5\x36\xa1\xd1\x5b\x84\x2f\x78\xe9\xff\xfd\x89\x6e\xa5\x99\x0c\x79\xd3\xf9\xe3\x8c\x05\x6b\xdc\x48\xdc\xfc\xe5\x89\x5b\xfa\x7d\x1a\x3d\xb2\x5e\x49\x7d\x8e\x7e\x46\x8f\x33\xfa\x2b\x00\x00\xff\xff\xc0\xea\xec\x11\x96\x04\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1174, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

