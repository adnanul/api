// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\xc1\x8e\xda\x30\x10\x86\xef\x7e\x8a\x11\x9c\x9b\x88\x1e\xb9\x51\xba\x6a\x23\x6d\xa5\x55\xd9\xf6\xee\xd8\xb3\x64\x84\x33\xb6\x3c\xe3\x54\xbc\x7d\x15\x10\x88\xd5\x06\x04\x7b\x8a\x12\x7f\xdf\xcc\xef\x71\x92\x39\xac\x23\xbf\xd1\xb6\x64\xab\x14\x59\xe0\x2d\x66\x58\xbd\x34\x4f\xec\x53\x24\x56\xa9\xc6\xbb\x0d\xe6\x01\x33\xfc\xa3\x10\xcc\x1c\xac\x53\x88\x0c\xc4\x9e\x06\xf2\xc5\x06\xe8\x51\xbb\xe8\x05\x4a\x8a\x0c\xda\x21\xb8\x77\x45\xcd\x1c\x52\x8e\x03\x79\xf4\x95\x31\xba\x4f\xb8\x84\x59\xc3\x8a\xd9\x61\xd2\x98\x8f\x11\x66\x66\xb0\x81\xfc\x41\xb9\x58\x5c\x1a\x80\x98\x3d\xe6\x25\x2c\x0c\x00\xc7\xbf\x67\x6a\x5c\x02\xf8\x02\xb3\xda\xa6\x24\x2e\x7a\xac\x3a\xb4\x41\xbb\xea\xe7\xe1\x52\x6f\xd4\x6a\x91\x99\xb1\x45\x3b\x64\x25\x77\xa3\xf8\x57\x03\x50\xf8\x82\x44\x7f\x1a\xc2\xdd\x7d\x3e\x60\x63\xb9\x6a\x58\xb4\xa8\x76\x51\xad\xde\xa5\xa8\x9f\xe3\x96\xf8\x71\x27\x16\x7d\x50\x7a\x8d\x3b\x9c\x6a\xb4\x2b\x2d\x66\x46\x45\x39\x9b\xeb\x50\x44\x31\xcb\xb8\xa3\xac\x25\x6d\x5c\xa6\x34\xd5\xef\x96\xdb\xb0\xa8\x65\x87\xdf\xf6\xcd\xcb\x84\xda\x5b\x0a\xc4\xdb\x40\xa2\x67\xf7\xd7\xf1\xd9\x33\x89\xd6\x1b\x64\xff\x34\x42\x9f\x71\x4b\x2b\x2e\x53\x8b\x9f\x70\xff\xb0\xdc\xb0\xd9\xf6\x28\xc9\x3a\x3c\xbb\xaf\x68\x7b\xa9\xd7\x19\xad\x3e\x22\xfc\xc0\xa9\x79\x5e\xa3\x1b\x59\x0d\x96\x82\x6d\xc3\xa1\x87\xec\x45\xb1\x5f\xdd\xf9\x92\x3a\xba\xd8\xe8\x78\x36\xd7\xd3\x7e\x44\xbf\x63\xc0\x49\xb4\xb5\x6e\x57\xd2\xc5\xb1\x13\xb2\x4a\xfd\x1b\x4f\x1f\xfd\x1d\xd2\xf1\x87\x72\x63\x7a\x57\xf8\x53\xa8\xff\x01\x00\x00\xff\xff\xc8\x4a\x01\xc3\xb7\x04\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1207, mode: os.FileMode(436), modTime: time.Unix(1478503624, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

