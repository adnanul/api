// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\xcf\x6e\xdb\x30\x0c\xc6\xef\x7a\x0a\x22\x39\xcf\x46\x76\xcc\xcd\xcd\x8a\xcd\x40\x07\x14\x48\xb7\x3b\x2d\xb1\x31\x51\x99\x12\x24\xca\x43\xdf\x7e\x70\x8b\x78\x29\x9a\x05\x71\x4e\x86\xc5\xef\xc7\x7f\x1f\xd7\xb0\x0b\xf2\xcc\x87\x92\x50\x39\x48\x86\xe7\x90\xa0\x79\x6c\xef\xc5\xc5\xc0\xa2\xb9\x9a\xfe\xf6\x94\x46\x4a\xf0\x87\xbd\x37\x6b\x40\xab\x10\x04\x58\x1c\x8f\xec\x0a\x7a\x18\x48\xfb\xe0\x32\x94\x18\x04\xb4\x27\xb0\x1f\x92\x9a\x35\xc4\x14\x46\x76\xe4\x2a\x63\xf4\x35\xd2\x16\x56\xad\x28\x25\x4b\x51\x43\x7a\x6f\x61\x65\x46\xf4\xec\xde\x90\x93\xe0\xd6\x00\x84\xe4\x28\x6d\x61\x63\x00\x24\xfc\x9e\x55\x53\x08\xe0\x0b\xac\x6a\x8c\x31\xdb\xe0\xa8\xea\x09\xbd\xf6\xd5\x8f\xb7\x4f\xbd\x57\xd4\x92\x57\x06\x8b\xf6\x24\xca\xf6\x42\xf2\xaf\x06\xa0\xc8\x89\x92\xdc\x71\x09\x57\xd7\xf9\x24\x9b\xd2\x55\xe3\xa6\x23\xc5\x4d\xd5\x7c\xe8\xa2\x7e\x08\x07\x96\xe5\x4c\x28\xba\x10\x7a\x0a\x2f\x74\xae\xd0\x4b\xe9\x28\x09\x29\xe5\x99\xdc\xf9\x92\x95\x52\x9e\x26\x4a\x5a\xe2\xd1\x99\x45\x6c\x2b\x59\x51\x2c\xdd\xbd\xb6\x8f\x67\xd0\x01\xd9\xb3\x1c\x3c\x67\x9d\xd9\x9f\xef\x6f\x0f\x9c\xb5\xde\x93\xb8\xfb\x49\x74\x0b\x5b\xba\x6c\x13\x77\x74\x03\xfb\x4b\xf2\x05\x5a\x70\xa0\x1c\xd1\xd2\xcc\x3e\x11\x0e\xb9\xde\x25\x42\x5d\x02\x7c\xa7\x73\xfe\xfd\x4f\xdd\xe6\x66\x44\xf6\xd8\xf9\xeb\x6a\xdc\xb1\x9f\x06\xaa\x77\x9e\x49\x74\x76\x7e\x16\x36\x6e\x60\x69\xae\x3c\x72\xcb\xff\x4e\xea\x40\xa2\x17\xa6\xfd\x2c\xfd\x46\x9e\xae\x5c\xcc\xb1\xe9\x13\xf7\xfe\x06\x00\x00\xff\xff\xc2\xd8\x55\xd9\x98\x04\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1176, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

