// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\x41\x93\x12\x31\x10\x85\xef\xfc\x8a\x2e\xf6\xaa\x33\xa5\x47\x6e\x38\xa2\x52\xb5\x5a\x5b\xa2\xde\x43\xa6\x61\xba\xc8\xa4\x53\x49\x67\x56\xfe\xbd\x3d\xb0\xc3\x32\x62\x0d\x9e\x68\x78\x5f\x5e\x3a\xe9\x17\x1e\xa0\x62\xbf\xa3\x7d\x8e\x46\x88\x7d\x82\x1d\x47\x58\x3e\xad\x57\xbe\x0e\x4c\x5e\x52\xd1\x7f\xdb\x60\xec\x30\xc2\x33\x39\x37\x7b\x00\x63\x05\xd8\x03\xf9\x9a\x3a\xaa\xb3\x71\xd0\xa2\x34\x5c\x27\xc8\x41\x7f\x97\x06\xc1\x8e\x4c\x75\x4d\x88\xac\x2c\xd6\xc5\x6c\x26\xc7\x80\x0b\x98\xaf\xbd\x60\xb4\x18\x84\xe3\xb9\x85\xf9\xcc\x64\x5d\xeb\x85\xec\x69\xd9\x15\xb0\x98\x01\x70\xac\x31\x2e\xe0\x9d\x96\xd9\x5f\x91\x58\x0f\xbd\xf6\x14\xc0\x5b\x98\x97\x0d\x1a\x27\x4d\xf1\xe5\xf4\x51\x6e\xc4\x48\x4e\xf3\x8b\xda\x2f\x2e\x96\xa3\xbd\xca\x47\xde\x93\xbf\x8b\x70\x96\x69\xe6\x07\x1f\xf0\xca\xe6\x90\xb7\x18\x3d\x0a\xa6\xa2\x72\x39\xe9\x79\x52\xdf\x4d\x94\x1c\x36\x36\x52\xb8\x72\x6b\x0d\x39\xf2\x7b\x47\x49\x8a\xaf\xe7\xfa\x51\xeb\x72\x83\xbe\x5e\xf5\xe2\x7f\xa0\x79\x9b\xd4\x75\x8b\xf7\xd1\x9f\x3e\xdd\xc2\xde\xb4\x98\x82\xb1\x58\x7c\x1b\xaa\xb2\x8a\xa8\x57\x3c\xcd\x7c\x46\x99\x06\xd6\x69\xd9\xe9\xe6\x66\xeb\xd4\xe9\x44\x3e\xc0\x27\x76\x8e\x9f\xb5\x1f\xb8\x44\x0d\x4c\x44\xc0\xdf\x56\x6f\x8a\x3a\x77\xd4\xcc\x50\xa7\x9b\xbf\x01\x6b\x3c\x78\x16\xe8\x0d\x40\x58\x03\x68\x31\xa5\x17\xa3\x5d\xe4\x16\x74\x30\x49\xe3\x55\x5c\xda\xd8\x6a\x54\xd5\xbc\xa8\x1a\x13\xf7\x58\xae\x92\x50\x3b\x3a\xc8\x00\xac\x7d\xc7\xf4\x8f\x83\x0e\xfa\x53\x8e\xb6\x31\x09\xcb\x0f\x38\x4a\xc8\x8d\x5e\x71\x1b\x1c\x4e\x5a\x54\x8e\xd3\xab\x3e\xc8\x2f\x63\x0b\xa7\x00\x8d\x66\x98\x8e\x1a\x99\x76\x39\x9d\x75\x4b\x3a\xd9\x3e\x5a\x37\x47\x78\x55\x3e\xe2\x5f\x9d\x19\x7b\xc8\x41\x33\x49\x6a\x5c\x7e\xc7\xe1\x3f\xe0\x16\x39\xbf\xfc\xdb\xdb\x19\xa9\x83\x7d\x67\x1c\xd5\x13\x6f\xf7\xbd\x96\x9e\x7f\x5d\xa8\x3b\x0f\xf6\x4f\x00\x00\x00\xff\xff\x74\xdd\x0d\x74\x9c\x04\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1180, mode: os.FileMode(436), modTime: time.Unix(1471425686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
