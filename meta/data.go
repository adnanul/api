// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xc1\xee\x9b\x30\x0c\x87\xef\x3c\x85\xc5\xff\x3c\xd0\x76\xec\x0d\x75\xd5\x56\xa9\x9b\xa6\xb1\xed\x1e\x12\xb7\x58\x0d\x4e\x94\x38\x4c\x7d\xfb\x85\x56\x6c\x54\x48\x74\x27\x0c\xbf\x2f\x5f\x1c\xa3\xbc\xc1\xde\xf1\x99\x2e\x29\x28\x21\xc7\x11\xce\x2e\x40\xf3\xed\x78\x60\xe3\x1d\xb1\xc4\x6a\x7a\x6b\x31\x8c\x18\xe0\x37\x59\x5b\xbc\x81\xd2\x02\x8e\x81\xd8\xd0\x48\x26\x29\x0b\x03\x4a\xef\x4c\x84\xe4\xf3\x77\xe9\x11\xf4\x93\x34\xaf\xf1\xc1\x65\x16\x4d\x55\x14\x72\xf3\xb8\x83\xf2\xc8\x82\x41\xa3\x17\x17\x1e\x2d\x94\xc5\xa8\x2c\x99\xfb\x92\x45\xb8\x2b\x00\x5c\x30\x18\x76\xf0\x3e\x97\xec\x7e\xfd\xa5\xa6\x08\xe0\x1d\x94\x75\x8f\xca\x4a\x5f\x7d\xbe\x3f\xea\x56\x94\xa4\x58\x16\x2a\xe5\x5e\x58\x48\x6f\x38\x3f\xe4\x32\xf1\x82\x44\x33\x9f\xfd\x95\x7e\x4e\xa7\xc5\x55\xf3\xb4\x57\x7d\x72\x17\xe2\x97\x88\x4b\xb2\xcd\xfc\x70\x57\x5c\x68\xae\xa9\xc3\xc0\x28\x18\xab\xbd\x4d\x31\x9f\x27\x4e\xdd\x04\x49\xbe\xd5\x81\xfc\xc2\x36\x28\xb2\xc4\x17\x4b\x51\xaa\x2f\x8f\xfa\x94\xeb\xba\x45\x36\x87\x29\xfc\x0f\x34\x75\x31\x5b\x3b\x7c\x8d\xfe\xe4\xb8\x86\x59\x0d\x18\xbd\xd2\x58\x7d\x9d\xab\x7a\x1f\x30\x8f\x78\x9b\xf9\x84\xb2\x0d\x1c\x63\x33\xe6\xcd\x55\x67\xef\xa6\x78\xcb\x93\x18\x9a\xed\x5f\xa8\x29\x37\x3c\x4d\x6c\xd5\xc2\xbf\xe4\x23\x5a\x5c\x26\x9d\xd2\xd7\xe4\xf3\xa8\x29\x8b\xeb\xef\x38\x5f\x95\x35\xf2\xb8\x20\x2b\xf5\x73\x3a\xeb\xff\x04\x00\x00\xff\xff\xc3\x0d\x15\x2b\x74\x03\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 884, mode: os.FileMode(436), modTime: time.Unix(1472419019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

