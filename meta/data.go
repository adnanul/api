// Code generated by go-bindata.
// sources:
// meta/config.yaml
// DO NOT EDIT!

package meta

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metaConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\xcf\x6e\x9b\x40\x10\xc6\xef\x3c\xc5\x08\x9f\x0b\x72\x8f\xbe\x11\x37\x6a\x91\x5c\x29\x8a\xdd\xde\x17\x76\x02\xa3\x2c\xb3\xab\x9d\x59\xaa\xbc\x7d\x45\x2c\x53\x47\x76\x2d\xdb\x52\x4e\x68\x98\xef\xc7\x7c\xf3\x87\x05\xac\x3d\xbf\x50\x97\xa2\x51\xf2\x2c\xf0\xe2\x23\x54\x4f\xf5\x23\xdb\xe0\x89\x55\x8a\x29\xda\x62\x1c\x31\xc2\x1f\x72\x2e\x5b\x80\x69\x15\x3c\x03\xb1\xa5\x91\x6c\x32\x0e\x06\xd4\xde\x5b\x81\x14\x3c\x83\xf6\x08\xed\x87\x8f\x66\x0b\x08\xd1\x8f\x64\xd1\x16\x59\xa6\x6f\x01\x57\x90\xd7\xac\x18\x5b\x0c\xea\xe3\xde\x42\x9e\x8d\xc6\x91\x7d\x47\x8e\x92\xab\x0c\xc0\x47\x8b\x71\x05\xcb\x0c\x80\xfd\xef\x59\x35\xa5\x00\xbe\x40\x5e\x9a\x10\xa4\xf5\x16\x8b\x1e\x8d\xd3\xbe\xf8\xf1\xfe\x28\xb7\x6a\x34\x49\x7e\x2a\x53\x14\x75\x9e\xbb\x98\x98\x89\xbb\x62\x87\xa2\x1b\xcf\xdd\xf3\x3e\x2e\x9f\x13\xe7\x99\x49\xda\x23\x2b\xb5\x17\x2c\x7d\xcd\x00\x12\x1f\x29\xd1\x1e\x46\xf7\xc9\xee\x4e\xa8\xc9\x44\x31\x2e\x1b\x54\xb3\x2c\xaa\x0f\xde\xcb\x8d\xef\xe8\x0e\xc6\x27\xbd\x11\xda\xf9\x57\x3c\x57\xe8\x35\x35\x18\x19\x15\x65\x26\xd7\x2e\x89\x62\x94\x69\x0e\x51\x53\x38\x5c\xc1\x4d\x6c\xcd\xa2\x86\x5b\x7c\x78\xab\x9f\xce\xa0\x83\x21\x47\xdc\x39\x12\x9d\xd9\x9f\xfb\x77\x1b\x12\x2d\xb7\xc8\xf6\x71\x12\xdd\xc3\xa6\x46\xda\x48\x0d\xde\xc1\xfe\x62\xb9\x40\xb3\x19\x50\x82\x69\x71\x66\x77\x68\x06\x29\xd7\x11\x8d\xde\x02\x7c\xc7\x73\xfb\xfb\x9f\xba\x96\x6a\x34\xe4\x4c\xe3\xae\xab\xf1\x40\x6e\x6a\xa8\x5c\x3b\x42\xd6\x79\xf3\xb3\xb0\xb2\x03\x71\x75\xe5\xaf\xd1\xd2\xbf\x93\xea\x90\xf5\x42\xb7\xa7\xd2\x6f\xe8\xf0\xca\xc1\x1c\x4c\x1f\x6d\xef\x6f\x00\x00\x00\xff\xff\x45\x6d\x2d\x18\x04\x05\x00\x00")

func metaConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_metaConfigYaml,
		"meta/config.yaml",
	)
}

func metaConfigYaml() (*asset, error) {
	bytes, err := metaConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta/config.yaml", size: 1284, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"meta/config.yaml": metaConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"meta": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{metaConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

