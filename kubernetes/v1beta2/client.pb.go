// Code generated by protoc-gen-go.
// source: client.proto
// DO NOT EDIT!

/*
Package v1beta2 is a generated protocol buffer package.

It is generated from these files:
	client.proto
	disk.proto

It has these top-level messages:
	ListResourceRequest
	ListResourceResponse
	DescribeResourceRequest
	DescribeResourceResponse
	UpdateResourceRequest
	ConfigMapEditRequest
	SecretEditRequest
	CopyResourceRequest
	CreateResourceRequest
	DeleteResourceRequest
	KubeResourceList
	KubeResource
	Meta
	KubeObject
	App
	PodSpec
	Raw
	ConfigMap
	Job
	Namespace
	Node
	Pod
	PersistentVolume
	PersistentVolumeClaim
	ObjectReference
	Service
	Secret
	ReplicationController
	ReplicaSet
	DaemonSet
	Deployment
	PetSet
	StorageClass
	LabelSelector
	Event
	EventSource
	Metrics
	PersistentVolumeRegisterRequest
	PersistentVolumeUnRegisterRequest
	PersistentVolumeClaimRegisterRequest
	PersistentVolumeClaimUnRegisterRequest
	PersistentVolumeSource
	AWSElasticBlockStoreVolumeSource
	HostPathVolumeSource
	NFSVolumeSource
	FCVolumeSource
	FlexVolumeSource
	FlockerVolumeSource
	GCEPersistentDiskVolumeSource
	GitRepoVolumeSource
	GlusterfsVolumeSource
	RBDVolumeSource
	ISCSIVolumeSource
	AzureFileVolumeSource
	VsphereVirtualDiskVolumeSource
	QuobyteVolumeSource
	AzureDiskVolumeSource
	CinderVolumeSource
	CephFSVolumeSource
	DiskListRequest
	DiskListResponse
	DiskDescribeRequest
	DiskDescribeResponse
	DiskCreateRequest
	DiskDeleteRequest
	Disk
*/
package v1beta2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"
import appscode_alert_v1beta1 "github.com/appscode/api/alert/v1beta1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListResourceRequest struct {
	Cluster        string                           `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type           string                           `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace      string                           `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	IncludeMetrics bool                             `protobuf:"varint,4,opt,name=include_metrics,json=includeMetrics" json:"include_metrics,omitempty"`
	PodAncestor    *ListResourceRequest_PodAncestor `protobuf:"bytes,5,opt,name=pod_ancestor,json=podAncestor" json:"pod_ancestor,omitempty"`
}

func (m *ListResourceRequest) Reset()                    { *m = ListResourceRequest{} }
func (m *ListResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListResourceRequest) ProtoMessage()               {}
func (*ListResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ListResourceRequest) GetPodAncestor() *ListResourceRequest_PodAncestor {
	if m != nil {
		return m.PodAncestor
	}
	return nil
}

type ListResourceRequest_PodAncestor struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ListResourceRequest_PodAncestor) Reset()         { *m = ListResourceRequest_PodAncestor{} }
func (m *ListResourceRequest_PodAncestor) String() string { return proto.CompactTextString(m) }
func (*ListResourceRequest_PodAncestor) ProtoMessage()    {}
func (*ListResourceRequest_PodAncestor) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type ListResourceResponse struct {
	Status    *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Resources *KubeResourceList       `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
}

func (m *ListResourceResponse) Reset()                    { *m = ListResourceResponse{} }
func (m *ListResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResourceResponse) ProtoMessage()               {}
func (*ListResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListResourceResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListResourceResponse) GetResources() *KubeResourceList {
	if m != nil {
		return m.Resources
	}
	return nil
}

type DescribeResourceRequest struct {
	Cluster        string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type           string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace      string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Raw            string `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
	IncludeMetrics bool   `protobuf:"varint,6,opt,name=include_metrics,json=includeMetrics" json:"include_metrics,omitempty"`
}

func (m *DescribeResourceRequest) Reset()                    { *m = DescribeResourceRequest{} }
func (m *DescribeResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeResourceRequest) ProtoMessage()               {}
func (*DescribeResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DescribeResourceResponse struct {
	Status   *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Resource *KubeResource           `protobuf:"bytes,2,opt,name=resource" json:"resource,omitempty"`
}

func (m *DescribeResourceResponse) Reset()                    { *m = DescribeResourceResponse{} }
func (m *DescribeResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResourceResponse) ProtoMessage()               {}
func (*DescribeResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DescribeResourceResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DescribeResourceResponse) GetResource() *KubeResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

type UpdateResourceRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Raw       *Raw   `protobuf:"bytes,5,opt,name=raw" json:"raw,omitempty"`
}

func (m *UpdateResourceRequest) Reset()                    { *m = UpdateResourceRequest{} }
func (m *UpdateResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateResourceRequest) ProtoMessage()               {}
func (*UpdateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateResourceRequest) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

type ConfigMapEditRequest struct {
	Cluster   string            `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Add       map[string]string `protobuf:"bytes,4,rep,name=add" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Update    map[string]string `protobuf:"bytes,5,rep,name=update" json:"update,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Deleted   []string          `protobuf:"bytes,6,rep,name=deleted" json:"deleted,omitempty"`
}

func (m *ConfigMapEditRequest) Reset()                    { *m = ConfigMapEditRequest{} }
func (m *ConfigMapEditRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigMapEditRequest) ProtoMessage()               {}
func (*ConfigMapEditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigMapEditRequest) GetAdd() map[string]string {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ConfigMapEditRequest) GetUpdate() map[string]string {
	if m != nil {
		return m.Update
	}
	return nil
}

type SecretEditRequest struct {
	Cluster   string            `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Namespace string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Add       map[string]string `protobuf:"bytes,4,rep,name=add" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Update    map[string]string `protobuf:"bytes,5,rep,name=update" json:"update,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Deleted   []string          `protobuf:"bytes,6,rep,name=deleted" json:"deleted,omitempty"`
}

func (m *SecretEditRequest) Reset()                    { *m = SecretEditRequest{} }
func (m *SecretEditRequest) String() string            { return proto.CompactTextString(m) }
func (*SecretEditRequest) ProtoMessage()               {}
func (*SecretEditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SecretEditRequest) GetAdd() map[string]string {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *SecretEditRequest) GetUpdate() map[string]string {
	if m != nil {
		return m.Update
	}
	return nil
}

type CopyResourceRequest struct {
	Source      *KubeObject `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Destination *KubeObject `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
}

func (m *CopyResourceRequest) Reset()                    { *m = CopyResourceRequest{} }
func (m *CopyResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyResourceRequest) ProtoMessage()               {}
func (*CopyResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CopyResourceRequest) GetSource() *KubeObject {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *CopyResourceRequest) GetDestination() *KubeObject {
	if m != nil {
		return m.Destination
	}
	return nil
}

type CreateResourceRequest struct {
	Cluster  string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Resource *Raw   `protobuf:"bytes,5,opt,name=resource" json:"resource,omitempty"`
}

func (m *CreateResourceRequest) Reset()                    { *m = CreateResourceRequest{} }
func (m *CreateResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateResourceRequest) ProtoMessage()               {}
func (*CreateResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateResourceRequest) GetResource() *Raw {
	if m != nil {
		return m.Resource
	}
	return nil
}

type DeleteResourceRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteResourceRequest) Reset()                    { *m = DeleteResourceRequest{} }
func (m *DeleteResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteResourceRequest) ProtoMessage()               {}
func (*DeleteResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type KubeResourceList struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Types that are valid to be assigned to Resource:
	//	*KubeResourceList_Apps_
	//	*KubeResourceList_ConfigMaps_
	//	*KubeResourceList_DaemonSets_
	//	*KubeResourceList_Deployments_
	//	*KubeResourceList_Jobs_
	//	*KubeResourceList_Namespaces_
	//	*KubeResourceList_Nodes_
	//	*KubeResourceList_PetSets_
	//	*KubeResourceList_Pods_
	//	*KubeResourceList_ReplicaSets_
	//	*KubeResourceList_Services_
	//	*KubeResourceList_Secrets_
	//	*KubeResourceList_ReplicationControllers_
	//	*KubeResourceList_StorageClasses_
	//	*KubeResourceList_PersistentVolumes_
	//	*KubeResourceList_PersistentVolumeClaims_
	Resource isKubeResourceList_Resource `protobuf_oneof:"resource"`
}

func (m *KubeResourceList) Reset()                    { *m = KubeResourceList{} }
func (m *KubeResourceList) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList) ProtoMessage()               {}
func (*KubeResourceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isKubeResourceList_Resource interface {
	isKubeResourceList_Resource()
}

type KubeResourceList_Apps_ struct {
	Apps *KubeResourceList_Apps `protobuf:"bytes,2,opt,name=apps,oneof"`
}
type KubeResourceList_ConfigMaps_ struct {
	ConfigMaps *KubeResourceList_ConfigMaps `protobuf:"bytes,3,opt,name=config_maps,json=configMaps,oneof"`
}
type KubeResourceList_DaemonSets_ struct {
	DaemonSets *KubeResourceList_DaemonSets `protobuf:"bytes,4,opt,name=daemon_sets,json=daemonSets,oneof"`
}
type KubeResourceList_Deployments_ struct {
	Deployments *KubeResourceList_Deployments `protobuf:"bytes,5,opt,name=deployments,oneof"`
}
type KubeResourceList_Jobs_ struct {
	Jobs *KubeResourceList_Jobs `protobuf:"bytes,6,opt,name=jobs,oneof"`
}
type KubeResourceList_Namespaces_ struct {
	Namespaces *KubeResourceList_Namespaces `protobuf:"bytes,7,opt,name=namespaces,oneof"`
}
type KubeResourceList_Nodes_ struct {
	Nodes *KubeResourceList_Nodes `protobuf:"bytes,8,opt,name=nodes,oneof"`
}
type KubeResourceList_PetSets_ struct {
	PetSets *KubeResourceList_PetSets `protobuf:"bytes,9,opt,name=pet_sets,json=petSets,oneof"`
}
type KubeResourceList_Pods_ struct {
	Pods *KubeResourceList_Pods `protobuf:"bytes,10,opt,name=pods,oneof"`
}
type KubeResourceList_ReplicaSets_ struct {
	ReplicaSets *KubeResourceList_ReplicaSets `protobuf:"bytes,11,opt,name=replica_sets,json=replicaSets,oneof"`
}
type KubeResourceList_Services_ struct {
	Services *KubeResourceList_Services `protobuf:"bytes,12,opt,name=services,oneof"`
}
type KubeResourceList_Secrets_ struct {
	Secrets *KubeResourceList_Secrets `protobuf:"bytes,13,opt,name=secrets,oneof"`
}
type KubeResourceList_ReplicationControllers_ struct {
	ReplicationControllers *KubeResourceList_ReplicationControllers `protobuf:"bytes,14,opt,name=replication_controllers,json=replicationControllers,oneof"`
}
type KubeResourceList_StorageClasses_ struct {
	StorageClasses *KubeResourceList_StorageClasses `protobuf:"bytes,15,opt,name=storage_classes,json=storageClasses,oneof"`
}
type KubeResourceList_PersistentVolumes_ struct {
	PersistentVolumes *KubeResourceList_PersistentVolumes `protobuf:"bytes,16,opt,name=persistent_volumes,json=persistentVolumes,oneof"`
}
type KubeResourceList_PersistentVolumeClaims_ struct {
	PersistentVolumeClaims *KubeResourceList_PersistentVolumeClaims `protobuf:"bytes,17,opt,name=persistent_volume_claims,json=persistentVolumeClaims,oneof"`
}

func (*KubeResourceList_Apps_) isKubeResourceList_Resource()                   {}
func (*KubeResourceList_ConfigMaps_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_DaemonSets_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_Deployments_) isKubeResourceList_Resource()            {}
func (*KubeResourceList_Jobs_) isKubeResourceList_Resource()                   {}
func (*KubeResourceList_Namespaces_) isKubeResourceList_Resource()             {}
func (*KubeResourceList_Nodes_) isKubeResourceList_Resource()                  {}
func (*KubeResourceList_PetSets_) isKubeResourceList_Resource()                {}
func (*KubeResourceList_Pods_) isKubeResourceList_Resource()                   {}
func (*KubeResourceList_ReplicaSets_) isKubeResourceList_Resource()            {}
func (*KubeResourceList_Services_) isKubeResourceList_Resource()               {}
func (*KubeResourceList_Secrets_) isKubeResourceList_Resource()                {}
func (*KubeResourceList_ReplicationControllers_) isKubeResourceList_Resource() {}
func (*KubeResourceList_StorageClasses_) isKubeResourceList_Resource()         {}
func (*KubeResourceList_PersistentVolumes_) isKubeResourceList_Resource()      {}
func (*KubeResourceList_PersistentVolumeClaims_) isKubeResourceList_Resource() {}

func (m *KubeResourceList) GetResource() isKubeResourceList_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *KubeResourceList) GetApps() *KubeResourceList_Apps {
	if x, ok := m.GetResource().(*KubeResourceList_Apps_); ok {
		return x.Apps
	}
	return nil
}

func (m *KubeResourceList) GetConfigMaps() *KubeResourceList_ConfigMaps {
	if x, ok := m.GetResource().(*KubeResourceList_ConfigMaps_); ok {
		return x.ConfigMaps
	}
	return nil
}

func (m *KubeResourceList) GetDaemonSets() *KubeResourceList_DaemonSets {
	if x, ok := m.GetResource().(*KubeResourceList_DaemonSets_); ok {
		return x.DaemonSets
	}
	return nil
}

func (m *KubeResourceList) GetDeployments() *KubeResourceList_Deployments {
	if x, ok := m.GetResource().(*KubeResourceList_Deployments_); ok {
		return x.Deployments
	}
	return nil
}

func (m *KubeResourceList) GetJobs() *KubeResourceList_Jobs {
	if x, ok := m.GetResource().(*KubeResourceList_Jobs_); ok {
		return x.Jobs
	}
	return nil
}

func (m *KubeResourceList) GetNamespaces() *KubeResourceList_Namespaces {
	if x, ok := m.GetResource().(*KubeResourceList_Namespaces_); ok {
		return x.Namespaces
	}
	return nil
}

func (m *KubeResourceList) GetNodes() *KubeResourceList_Nodes {
	if x, ok := m.GetResource().(*KubeResourceList_Nodes_); ok {
		return x.Nodes
	}
	return nil
}

func (m *KubeResourceList) GetPetSets() *KubeResourceList_PetSets {
	if x, ok := m.GetResource().(*KubeResourceList_PetSets_); ok {
		return x.PetSets
	}
	return nil
}

func (m *KubeResourceList) GetPods() *KubeResourceList_Pods {
	if x, ok := m.GetResource().(*KubeResourceList_Pods_); ok {
		return x.Pods
	}
	return nil
}

func (m *KubeResourceList) GetReplicaSets() *KubeResourceList_ReplicaSets {
	if x, ok := m.GetResource().(*KubeResourceList_ReplicaSets_); ok {
		return x.ReplicaSets
	}
	return nil
}

func (m *KubeResourceList) GetServices() *KubeResourceList_Services {
	if x, ok := m.GetResource().(*KubeResourceList_Services_); ok {
		return x.Services
	}
	return nil
}

func (m *KubeResourceList) GetSecrets() *KubeResourceList_Secrets {
	if x, ok := m.GetResource().(*KubeResourceList_Secrets_); ok {
		return x.Secrets
	}
	return nil
}

func (m *KubeResourceList) GetReplicationControllers() *KubeResourceList_ReplicationControllers {
	if x, ok := m.GetResource().(*KubeResourceList_ReplicationControllers_); ok {
		return x.ReplicationControllers
	}
	return nil
}

func (m *KubeResourceList) GetStorageClasses() *KubeResourceList_StorageClasses {
	if x, ok := m.GetResource().(*KubeResourceList_StorageClasses_); ok {
		return x.StorageClasses
	}
	return nil
}

func (m *KubeResourceList) GetPersistentVolumes() *KubeResourceList_PersistentVolumes {
	if x, ok := m.GetResource().(*KubeResourceList_PersistentVolumes_); ok {
		return x.PersistentVolumes
	}
	return nil
}

func (m *KubeResourceList) GetPersistentVolumeClaims() *KubeResourceList_PersistentVolumeClaims {
	if x, ok := m.GetResource().(*KubeResourceList_PersistentVolumeClaims_); ok {
		return x.PersistentVolumeClaims
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KubeResourceList) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KubeResourceList_OneofMarshaler, _KubeResourceList_OneofUnmarshaler, _KubeResourceList_OneofSizer, []interface{}{
		(*KubeResourceList_Apps_)(nil),
		(*KubeResourceList_ConfigMaps_)(nil),
		(*KubeResourceList_DaemonSets_)(nil),
		(*KubeResourceList_Deployments_)(nil),
		(*KubeResourceList_Jobs_)(nil),
		(*KubeResourceList_Namespaces_)(nil),
		(*KubeResourceList_Nodes_)(nil),
		(*KubeResourceList_PetSets_)(nil),
		(*KubeResourceList_Pods_)(nil),
		(*KubeResourceList_ReplicaSets_)(nil),
		(*KubeResourceList_Services_)(nil),
		(*KubeResourceList_Secrets_)(nil),
		(*KubeResourceList_ReplicationControllers_)(nil),
		(*KubeResourceList_StorageClasses_)(nil),
		(*KubeResourceList_PersistentVolumes_)(nil),
		(*KubeResourceList_PersistentVolumeClaims_)(nil),
	}
}

func _KubeResourceList_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KubeResourceList)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResourceList_Apps_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Apps); err != nil {
			return err
		}
	case *KubeResourceList_ConfigMaps_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigMaps); err != nil {
			return err
		}
	case *KubeResourceList_DaemonSets_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DaemonSets); err != nil {
			return err
		}
	case *KubeResourceList_Deployments_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deployments); err != nil {
			return err
		}
	case *KubeResourceList_Jobs_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jobs); err != nil {
			return err
		}
	case *KubeResourceList_Namespaces_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Namespaces); err != nil {
			return err
		}
	case *KubeResourceList_Nodes_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nodes); err != nil {
			return err
		}
	case *KubeResourceList_PetSets_:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PetSets); err != nil {
			return err
		}
	case *KubeResourceList_Pods_:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pods); err != nil {
			return err
		}
	case *KubeResourceList_ReplicaSets_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicaSets); err != nil {
			return err
		}
	case *KubeResourceList_Services_:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Services); err != nil {
			return err
		}
	case *KubeResourceList_Secrets_:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Secrets); err != nil {
			return err
		}
	case *KubeResourceList_ReplicationControllers_:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicationControllers); err != nil {
			return err
		}
	case *KubeResourceList_StorageClasses_:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageClasses); err != nil {
			return err
		}
	case *KubeResourceList_PersistentVolumes_:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolumes); err != nil {
			return err
		}
	case *KubeResourceList_PersistentVolumeClaims_:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolumeClaims); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KubeResourceList.Resource has unexpected type %T", x)
	}
	return nil
}

func _KubeResourceList_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KubeResourceList)
	switch tag {
	case 2: // resource.apps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Apps)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Apps_{msg}
		return true, err
	case 3: // resource.config_maps
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ConfigMaps)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ConfigMaps_{msg}
		return true, err
	case 4: // resource.daemon_sets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_DaemonSets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_DaemonSets_{msg}
		return true, err
	case 5: // resource.deployments
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Deployments)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Deployments_{msg}
		return true, err
	case 6: // resource.jobs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Jobs)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Jobs_{msg}
		return true, err
	case 7: // resource.namespaces
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Namespaces)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Namespaces_{msg}
		return true, err
	case 8: // resource.nodes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Nodes)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Nodes_{msg}
		return true, err
	case 9: // resource.pet_sets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_PetSets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_PetSets_{msg}
		return true, err
	case 10: // resource.pods
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Pods)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Pods_{msg}
		return true, err
	case 11: // resource.replica_sets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ReplicaSets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ReplicaSets_{msg}
		return true, err
	case 12: // resource.services
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Services)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Services_{msg}
		return true, err
	case 13: // resource.secrets
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_Secrets)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_Secrets_{msg}
		return true, err
	case 14: // resource.replication_controllers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_ReplicationControllers)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_ReplicationControllers_{msg}
		return true, err
	case 15: // resource.storage_classes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_StorageClasses)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_StorageClasses_{msg}
		return true, err
	case 16: // resource.persistent_volumes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_PersistentVolumes)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_PersistentVolumes_{msg}
		return true, err
	case 17: // resource.persistent_volume_claims
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KubeResourceList_PersistentVolumeClaims)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResourceList_PersistentVolumeClaims_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KubeResourceList_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KubeResourceList)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResourceList_Apps_:
		s := proto.Size(x.Apps)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ConfigMaps_:
		s := proto.Size(x.ConfigMaps)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_DaemonSets_:
		s := proto.Size(x.DaemonSets)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Deployments_:
		s := proto.Size(x.Deployments)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Jobs_:
		s := proto.Size(x.Jobs)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Namespaces_:
		s := proto.Size(x.Namespaces)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Nodes_:
		s := proto.Size(x.Nodes)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_PetSets_:
		s := proto.Size(x.PetSets)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Pods_:
		s := proto.Size(x.Pods)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ReplicaSets_:
		s := proto.Size(x.ReplicaSets)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Services_:
		s := proto.Size(x.Services)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_Secrets_:
		s := proto.Size(x.Secrets)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_ReplicationControllers_:
		s := proto.Size(x.ReplicationControllers)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_StorageClasses_:
		s := proto.Size(x.StorageClasses)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_PersistentVolumes_:
		s := proto.Size(x.PersistentVolumes)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResourceList_PersistentVolumeClaims_:
		s := proto.Size(x.PersistentVolumeClaims)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type KubeResourceList_Apps struct {
	Items []*App `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Apps) Reset()                    { *m = KubeResourceList_Apps{} }
func (m *KubeResourceList_Apps) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Apps) ProtoMessage()               {}
func (*KubeResourceList_Apps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *KubeResourceList_Apps) GetItems() []*App {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ConfigMaps struct {
	Items []*ConfigMap `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ConfigMaps) Reset()                    { *m = KubeResourceList_ConfigMaps{} }
func (m *KubeResourceList_ConfigMaps) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_ConfigMaps) ProtoMessage()               {}
func (*KubeResourceList_ConfigMaps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 1} }

func (m *KubeResourceList_ConfigMaps) GetItems() []*ConfigMap {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_DaemonSets struct {
	Items []*DaemonSet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_DaemonSets) Reset()                    { *m = KubeResourceList_DaemonSets{} }
func (m *KubeResourceList_DaemonSets) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_DaemonSets) ProtoMessage()               {}
func (*KubeResourceList_DaemonSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 2} }

func (m *KubeResourceList_DaemonSets) GetItems() []*DaemonSet {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Deployments struct {
	Items []*Deployment `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Deployments) Reset()         { *m = KubeResourceList_Deployments{} }
func (m *KubeResourceList_Deployments) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_Deployments) ProtoMessage()    {}
func (*KubeResourceList_Deployments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 3}
}

func (m *KubeResourceList_Deployments) GetItems() []*Deployment {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Jobs struct {
	Items []*Job `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Jobs) Reset()                    { *m = KubeResourceList_Jobs{} }
func (m *KubeResourceList_Jobs) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Jobs) ProtoMessage()               {}
func (*KubeResourceList_Jobs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 4} }

func (m *KubeResourceList_Jobs) GetItems() []*Job {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Namespaces struct {
	Items []*Namespace `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Namespaces) Reset()                    { *m = KubeResourceList_Namespaces{} }
func (m *KubeResourceList_Namespaces) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Namespaces) ProtoMessage()               {}
func (*KubeResourceList_Namespaces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 5} }

func (m *KubeResourceList_Namespaces) GetItems() []*Namespace {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Nodes struct {
	Items []*Node `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Nodes) Reset()                    { *m = KubeResourceList_Nodes{} }
func (m *KubeResourceList_Nodes) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Nodes) ProtoMessage()               {}
func (*KubeResourceList_Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 6} }

func (m *KubeResourceList_Nodes) GetItems() []*Node {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_PetSets struct {
	Items []*PetSet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_PetSets) Reset()                    { *m = KubeResourceList_PetSets{} }
func (m *KubeResourceList_PetSets) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_PetSets) ProtoMessage()               {}
func (*KubeResourceList_PetSets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 7} }

func (m *KubeResourceList_PetSets) GetItems() []*PetSet {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Pods struct {
	Items []*Pod `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Pods) Reset()                    { *m = KubeResourceList_Pods{} }
func (m *KubeResourceList_Pods) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Pods) ProtoMessage()               {}
func (*KubeResourceList_Pods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 8} }

func (m *KubeResourceList_Pods) GetItems() []*Pod {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ReplicaSets struct {
	Items []*ReplicaSet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ReplicaSets) Reset()         { *m = KubeResourceList_ReplicaSets{} }
func (m *KubeResourceList_ReplicaSets) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ReplicaSets) ProtoMessage()    {}
func (*KubeResourceList_ReplicaSets) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 9}
}

func (m *KubeResourceList_ReplicaSets) GetItems() []*ReplicaSet {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Services struct {
	Items []*Service `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Services) Reset()                    { *m = KubeResourceList_Services{} }
func (m *KubeResourceList_Services) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Services) ProtoMessage()               {}
func (*KubeResourceList_Services) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 10} }

func (m *KubeResourceList_Services) GetItems() []*Service {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_Secrets struct {
	Items []*Secret `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_Secrets) Reset()                    { *m = KubeResourceList_Secrets{} }
func (m *KubeResourceList_Secrets) String() string            { return proto.CompactTextString(m) }
func (*KubeResourceList_Secrets) ProtoMessage()               {}
func (*KubeResourceList_Secrets) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 11} }

func (m *KubeResourceList_Secrets) GetItems() []*Secret {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_ReplicationControllers struct {
	Items []*ReplicationController `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_ReplicationControllers) Reset() {
	*m = KubeResourceList_ReplicationControllers{}
}
func (m *KubeResourceList_ReplicationControllers) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_ReplicationControllers) ProtoMessage()    {}
func (*KubeResourceList_ReplicationControllers) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 12}
}

func (m *KubeResourceList_ReplicationControllers) GetItems() []*ReplicationController {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_StorageClasses struct {
	Items []*StorageClass `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_StorageClasses) Reset()         { *m = KubeResourceList_StorageClasses{} }
func (m *KubeResourceList_StorageClasses) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_StorageClasses) ProtoMessage()    {}
func (*KubeResourceList_StorageClasses) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 13}
}

func (m *KubeResourceList_StorageClasses) GetItems() []*StorageClass {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_PersistentVolumes struct {
	Items []*PersistentVolume `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_PersistentVolumes) Reset()         { *m = KubeResourceList_PersistentVolumes{} }
func (m *KubeResourceList_PersistentVolumes) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_PersistentVolumes) ProtoMessage()    {}
func (*KubeResourceList_PersistentVolumes) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 14}
}

func (m *KubeResourceList_PersistentVolumes) GetItems() []*PersistentVolume {
	if m != nil {
		return m.Items
	}
	return nil
}

type KubeResourceList_PersistentVolumeClaims struct {
	Items []*PersistentVolumeClaim `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *KubeResourceList_PersistentVolumeClaims) Reset() {
	*m = KubeResourceList_PersistentVolumeClaims{}
}
func (m *KubeResourceList_PersistentVolumeClaims) String() string { return proto.CompactTextString(m) }
func (*KubeResourceList_PersistentVolumeClaims) ProtoMessage()    {}
func (*KubeResourceList_PersistentVolumeClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 15}
}

func (m *KubeResourceList_PersistentVolumeClaims) GetItems() []*PersistentVolumeClaim {
	if m != nil {
		return m.Items
	}
	return nil
}

// TODO: (@sadlil): when kubernetes moves to protobuf completely import fileds from there.
type KubeResource struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Types that are valid to be assigned to Resource:
	//	*KubeResource_App
	//	*KubeResource_ConfigMap
	//	*KubeResource_DaemonSet
	//	*KubeResource_Deployment
	//	*KubeResource_Job
	//	*KubeResource_Namespace
	//	*KubeResource_Node
	//	*KubeResource_PetSet
	//	*KubeResource_Pod
	//	*KubeResource_ReplicaSet
	//	*KubeResource_Service
	//	*KubeResource_Secret
	//	*KubeResource_ReplicationController
	//	*KubeResource_StorageClass
	//	*KubeResource_PersistentVolume
	//	*KubeResource_PersistentVolumeClaim
	Resource isKubeResource_Resource `protobuf_oneof:"resource"`
	Events   []*Event                `protobuf:"bytes,18,rep,name=events" json:"events,omitempty"`
	Raw      *Raw                    `protobuf:"bytes,19,opt,name=raw" json:"raw,omitempty"`
}

func (m *KubeResource) Reset()                    { *m = KubeResource{} }
func (m *KubeResource) String() string            { return proto.CompactTextString(m) }
func (*KubeResource) ProtoMessage()               {}
func (*KubeResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isKubeResource_Resource interface {
	isKubeResource_Resource()
}

type KubeResource_App struct {
	App *App `protobuf:"bytes,2,opt,name=app,oneof"`
}
type KubeResource_ConfigMap struct {
	ConfigMap *ConfigMap `protobuf:"bytes,3,opt,name=config_map,json=configMap,oneof"`
}
type KubeResource_DaemonSet struct {
	DaemonSet *DaemonSet `protobuf:"bytes,4,opt,name=daemon_set,json=daemonSet,oneof"`
}
type KubeResource_Deployment struct {
	Deployment *Deployment `protobuf:"bytes,5,opt,name=deployment,oneof"`
}
type KubeResource_Job struct {
	Job *Job `protobuf:"bytes,6,opt,name=job,oneof"`
}
type KubeResource_Namespace struct {
	Namespace *Namespace `protobuf:"bytes,7,opt,name=namespace,oneof"`
}
type KubeResource_Node struct {
	Node *Node `protobuf:"bytes,8,opt,name=node,oneof"`
}
type KubeResource_PetSet struct {
	PetSet *PetSet `protobuf:"bytes,9,opt,name=pet_set,json=petSet,oneof"`
}
type KubeResource_Pod struct {
	Pod *Pod `protobuf:"bytes,10,opt,name=pod,oneof"`
}
type KubeResource_ReplicaSet struct {
	ReplicaSet *ReplicaSet `protobuf:"bytes,11,opt,name=replica_set,json=replicaSet,oneof"`
}
type KubeResource_Service struct {
	Service *Service `protobuf:"bytes,12,opt,name=service,oneof"`
}
type KubeResource_Secret struct {
	Secret *Secret `protobuf:"bytes,13,opt,name=secret,oneof"`
}
type KubeResource_ReplicationController struct {
	ReplicationController *ReplicationController `protobuf:"bytes,14,opt,name=replication_controller,json=replicationController,oneof"`
}
type KubeResource_StorageClass struct {
	StorageClass *StorageClass `protobuf:"bytes,15,opt,name=storage_class,json=storageClass,oneof"`
}
type KubeResource_PersistentVolume struct {
	PersistentVolume *PersistentVolume `protobuf:"bytes,16,opt,name=persistent_volume,json=persistentVolume,oneof"`
}
type KubeResource_PersistentVolumeClaim struct {
	PersistentVolumeClaim *PersistentVolumeClaim `protobuf:"bytes,17,opt,name=persistent_volume_claim,json=persistentVolumeClaim,oneof"`
}

func (*KubeResource_App) isKubeResource_Resource()                   {}
func (*KubeResource_ConfigMap) isKubeResource_Resource()             {}
func (*KubeResource_DaemonSet) isKubeResource_Resource()             {}
func (*KubeResource_Deployment) isKubeResource_Resource()            {}
func (*KubeResource_Job) isKubeResource_Resource()                   {}
func (*KubeResource_Namespace) isKubeResource_Resource()             {}
func (*KubeResource_Node) isKubeResource_Resource()                  {}
func (*KubeResource_PetSet) isKubeResource_Resource()                {}
func (*KubeResource_Pod) isKubeResource_Resource()                   {}
func (*KubeResource_ReplicaSet) isKubeResource_Resource()            {}
func (*KubeResource_Service) isKubeResource_Resource()               {}
func (*KubeResource_Secret) isKubeResource_Resource()                {}
func (*KubeResource_ReplicationController) isKubeResource_Resource() {}
func (*KubeResource_StorageClass) isKubeResource_Resource()          {}
func (*KubeResource_PersistentVolume) isKubeResource_Resource()      {}
func (*KubeResource_PersistentVolumeClaim) isKubeResource_Resource() {}

func (m *KubeResource) GetResource() isKubeResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *KubeResource) GetApp() *App {
	if x, ok := m.GetResource().(*KubeResource_App); ok {
		return x.App
	}
	return nil
}

func (m *KubeResource) GetConfigMap() *ConfigMap {
	if x, ok := m.GetResource().(*KubeResource_ConfigMap); ok {
		return x.ConfigMap
	}
	return nil
}

func (m *KubeResource) GetDaemonSet() *DaemonSet {
	if x, ok := m.GetResource().(*KubeResource_DaemonSet); ok {
		return x.DaemonSet
	}
	return nil
}

func (m *KubeResource) GetDeployment() *Deployment {
	if x, ok := m.GetResource().(*KubeResource_Deployment); ok {
		return x.Deployment
	}
	return nil
}

func (m *KubeResource) GetJob() *Job {
	if x, ok := m.GetResource().(*KubeResource_Job); ok {
		return x.Job
	}
	return nil
}

func (m *KubeResource) GetNamespace() *Namespace {
	if x, ok := m.GetResource().(*KubeResource_Namespace); ok {
		return x.Namespace
	}
	return nil
}

func (m *KubeResource) GetNode() *Node {
	if x, ok := m.GetResource().(*KubeResource_Node); ok {
		return x.Node
	}
	return nil
}

func (m *KubeResource) GetPetSet() *PetSet {
	if x, ok := m.GetResource().(*KubeResource_PetSet); ok {
		return x.PetSet
	}
	return nil
}

func (m *KubeResource) GetPod() *Pod {
	if x, ok := m.GetResource().(*KubeResource_Pod); ok {
		return x.Pod
	}
	return nil
}

func (m *KubeResource) GetReplicaSet() *ReplicaSet {
	if x, ok := m.GetResource().(*KubeResource_ReplicaSet); ok {
		return x.ReplicaSet
	}
	return nil
}

func (m *KubeResource) GetService() *Service {
	if x, ok := m.GetResource().(*KubeResource_Service); ok {
		return x.Service
	}
	return nil
}

func (m *KubeResource) GetSecret() *Secret {
	if x, ok := m.GetResource().(*KubeResource_Secret); ok {
		return x.Secret
	}
	return nil
}

func (m *KubeResource) GetReplicationController() *ReplicationController {
	if x, ok := m.GetResource().(*KubeResource_ReplicationController); ok {
		return x.ReplicationController
	}
	return nil
}

func (m *KubeResource) GetStorageClass() *StorageClass {
	if x, ok := m.GetResource().(*KubeResource_StorageClass); ok {
		return x.StorageClass
	}
	return nil
}

func (m *KubeResource) GetPersistentVolume() *PersistentVolume {
	if x, ok := m.GetResource().(*KubeResource_PersistentVolume); ok {
		return x.PersistentVolume
	}
	return nil
}

func (m *KubeResource) GetPersistentVolumeClaim() *PersistentVolumeClaim {
	if x, ok := m.GetResource().(*KubeResource_PersistentVolumeClaim); ok {
		return x.PersistentVolumeClaim
	}
	return nil
}

func (m *KubeResource) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *KubeResource) GetRaw() *Raw {
	if m != nil {
		return m.Raw
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*KubeResource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _KubeResource_OneofMarshaler, _KubeResource_OneofUnmarshaler, _KubeResource_OneofSizer, []interface{}{
		(*KubeResource_App)(nil),
		(*KubeResource_ConfigMap)(nil),
		(*KubeResource_DaemonSet)(nil),
		(*KubeResource_Deployment)(nil),
		(*KubeResource_Job)(nil),
		(*KubeResource_Namespace)(nil),
		(*KubeResource_Node)(nil),
		(*KubeResource_PetSet)(nil),
		(*KubeResource_Pod)(nil),
		(*KubeResource_ReplicaSet)(nil),
		(*KubeResource_Service)(nil),
		(*KubeResource_Secret)(nil),
		(*KubeResource_ReplicationController)(nil),
		(*KubeResource_StorageClass)(nil),
		(*KubeResource_PersistentVolume)(nil),
		(*KubeResource_PersistentVolumeClaim)(nil),
	}
}

func _KubeResource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*KubeResource)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResource_App:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.App); err != nil {
			return err
		}
	case *KubeResource_ConfigMap:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConfigMap); err != nil {
			return err
		}
	case *KubeResource_DaemonSet:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DaemonSet); err != nil {
			return err
		}
	case *KubeResource_Deployment:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Deployment); err != nil {
			return err
		}
	case *KubeResource_Job:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Job); err != nil {
			return err
		}
	case *KubeResource_Namespace:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Namespace); err != nil {
			return err
		}
	case *KubeResource_Node:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Node); err != nil {
			return err
		}
	case *KubeResource_PetSet:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PetSet); err != nil {
			return err
		}
	case *KubeResource_Pod:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pod); err != nil {
			return err
		}
	case *KubeResource_ReplicaSet:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicaSet); err != nil {
			return err
		}
	case *KubeResource_Service:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Service); err != nil {
			return err
		}
	case *KubeResource_Secret:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Secret); err != nil {
			return err
		}
	case *KubeResource_ReplicationController:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReplicationController); err != nil {
			return err
		}
	case *KubeResource_StorageClass:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StorageClass); err != nil {
			return err
		}
	case *KubeResource_PersistentVolume:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolume); err != nil {
			return err
		}
	case *KubeResource_PersistentVolumeClaim:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PersistentVolumeClaim); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("KubeResource.Resource has unexpected type %T", x)
	}
	return nil
}

func _KubeResource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*KubeResource)
	switch tag {
	case 2: // resource.app
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(App)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_App{msg}
		return true, err
	case 3: // resource.config_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConfigMap)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ConfigMap{msg}
		return true, err
	case 4: // resource.daemon_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DaemonSet)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_DaemonSet{msg}
		return true, err
	case 5: // resource.deployment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Deployment)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Deployment{msg}
		return true, err
	case 6: // resource.job
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Job)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Job{msg}
		return true, err
	case 7: // resource.namespace
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Namespace)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Namespace{msg}
		return true, err
	case 8: // resource.node
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Node)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Node{msg}
		return true, err
	case 9: // resource.pet_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PetSet)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_PetSet{msg}
		return true, err
	case 10: // resource.pod
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pod)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Pod{msg}
		return true, err
	case 11: // resource.replica_set
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplicaSet)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ReplicaSet{msg}
		return true, err
	case 12: // resource.service
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Service)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Service{msg}
		return true, err
	case 13: // resource.secret
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Secret)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_Secret{msg}
		return true, err
	case 14: // resource.replication_controller
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplicationController)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_ReplicationController{msg}
		return true, err
	case 15: // resource.storage_class
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StorageClass)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_StorageClass{msg}
		return true, err
	case 16: // resource.persistent_volume
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PersistentVolume)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_PersistentVolume{msg}
		return true, err
	case 17: // resource.persistent_volume_claim
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PersistentVolumeClaim)
		err := b.DecodeMessage(msg)
		m.Resource = &KubeResource_PersistentVolumeClaim{msg}
		return true, err
	default:
		return false, nil
	}
}

func _KubeResource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*KubeResource)
	// resource
	switch x := m.Resource.(type) {
	case *KubeResource_App:
		s := proto.Size(x.App)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ConfigMap:
		s := proto.Size(x.ConfigMap)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_DaemonSet:
		s := proto.Size(x.DaemonSet)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Deployment:
		s := proto.Size(x.Deployment)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Job:
		s := proto.Size(x.Job)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Namespace:
		s := proto.Size(x.Namespace)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Node:
		s := proto.Size(x.Node)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_PetSet:
		s := proto.Size(x.PetSet)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Pod:
		s := proto.Size(x.Pod)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ReplicaSet:
		s := proto.Size(x.ReplicaSet)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Service:
		s := proto.Size(x.Service)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_Secret:
		s := proto.Size(x.Secret)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_ReplicationController:
		s := proto.Size(x.ReplicationController)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_StorageClass:
		s := proto.Size(x.StorageClass)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_PersistentVolume:
		s := proto.Size(x.PersistentVolume)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *KubeResource_PersistentVolumeClaim:
		s := proto.Size(x.PersistentVolumeClaim)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Meta struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace       string            `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	SelfLinks       string            `protobuf:"bytes,3,opt,name=self_links,json=selfLinks" json:"self_links,omitempty"`
	ResourceVersion string            `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
	CreatedAt       int64             `protobuf:"varint,5,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Generation      int64             `protobuf:"varint,6,opt,name=generation" json:"generation,omitempty"`
	Labels          map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Annotations     map[string]string `protobuf:"bytes,8,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Meta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Meta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type KubeObject struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *KubeObject) Reset()                    { *m = KubeObject{} }
func (m *KubeObject) String() string            { return proto.CompactTextString(m) }
func (*KubeObject) ProtoMessage()               {}
func (*KubeObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type App struct {
	Cluster     string                              `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Type        string                              `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Namespace   string                              `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Name        string                              `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	App         *Service                            `protobuf:"bytes,5,opt,name=app" json:"app,omitempty"`
	Links       map[string]string                   `protobuf:"bytes,6,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt   int64                               `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ClusterIp   string                              `protobuf:"bytes,8,opt,name=cluster_ip,json=clusterIp" json:"cluster_ip,omitempty"`
	IcingaState *appscode_alert_v1beta1.IcingaState `protobuf:"bytes,9,opt,name=icinga_state,json=icingaState" json:"icinga_state,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *App) GetApp() *Service {
	if m != nil {
		return m.App
	}
	return nil
}

func (m *App) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *App) GetIcingaState() *appscode_alert_v1beta1.IcingaState {
	if m != nil {
		return m.IcingaState
	}
	return nil
}

type PodSpec struct {
	Volumes            []*PodSpec_Volume    `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	Containers         []*PodSpec_Container `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	NodeSelectors      map[string]string    `protobuf:"bytes,3,rep,name=node_selectors,json=nodeSelectors" json:"node_selectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ServiceAccountName string               `protobuf:"bytes,4,opt,name=service_account_name,json=serviceAccountName" json:"service_account_name,omitempty"`
	NodeName           string               `protobuf:"bytes,5,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	ImagePullSecrets   []string             `protobuf:"bytes,6,rep,name=image_pull_secrets,json=imagePullSecrets" json:"image_pull_secrets,omitempty"`
}

func (m *PodSpec) Reset()                    { *m = PodSpec{} }
func (m *PodSpec) String() string            { return proto.CompactTextString(m) }
func (*PodSpec) ProtoMessage()               {}
func (*PodSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PodSpec) GetVolumes() []*PodSpec_Volume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetContainers() []*PodSpec_Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetNodeSelectors() map[string]string {
	if m != nil {
		return m.NodeSelectors
	}
	return nil
}

type PodSpec_Container struct {
	Name         string                           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Image        string                           `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	Commands     []string                         `protobuf:"bytes,3,rep,name=commands" json:"commands,omitempty"`
	VolumeMounts []*PodSpec_Container_VolumeMount `protobuf:"bytes,4,rep,name=volume_mounts,json=volumeMounts" json:"volume_mounts,omitempty"`
}

func (m *PodSpec_Container) Reset()                    { *m = PodSpec_Container{} }
func (m *PodSpec_Container) String() string            { return proto.CompactTextString(m) }
func (*PodSpec_Container) ProtoMessage()               {}
func (*PodSpec_Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 1} }

func (m *PodSpec_Container) GetVolumeMounts() []*PodSpec_Container_VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

type PodSpec_Container_VolumeMount struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReadOnly  bool   `protobuf:"varint,2,opt,name=read_only,json=readOnly" json:"read_only,omitempty"`
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath" json:"mount_path,omitempty"`
}

func (m *PodSpec_Container_VolumeMount) Reset()         { *m = PodSpec_Container_VolumeMount{} }
func (m *PodSpec_Container_VolumeMount) String() string { return proto.CompactTextString(m) }
func (*PodSpec_Container_VolumeMount) ProtoMessage()    {}
func (*PodSpec_Container_VolumeMount) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 1, 0}
}

type PodSpec_Volume struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HostPath string `protobuf:"bytes,2,opt,name=host_path,json=hostPath" json:"host_path,omitempty"`
}

func (m *PodSpec_Volume) Reset()                    { *m = PodSpec_Volume{} }
func (m *PodSpec_Volume) String() string            { return proto.CompactTextString(m) }
func (*PodSpec_Volume) ProtoMessage()               {}
func (*PodSpec_Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15, 2} }

type Raw struct {
	Format string `protobuf:"bytes,1,opt,name=format" json:"format,omitempty"`
	Data   string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *Raw) Reset()                    { *m = Raw{} }
func (m *Raw) String() string            { return proto.CompactTextString(m) }
func (*Raw) ProtoMessage()               {}
func (*Raw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type ConfigMap struct {
	Meta *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ConfigMap) Reset()                    { *m = ConfigMap{} }
func (m *ConfigMap) String() string            { return proto.CompactTextString(m) }
func (*ConfigMap) ProtoMessage()               {}
func (*ConfigMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ConfigMap) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ConfigMap) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Job struct {
	Meta   *Meta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string      `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Space  *Job_Spec   `protobuf:"bytes,3,opt,name=space" json:"space,omitempty"`
	Status *Job_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Job) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Job) GetSpace() *Job_Spec {
	if m != nil {
		return m.Space
	}
	return nil
}

func (m *Job) GetStatus() *Job_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Job_Spec struct {
	Parallelism int32    `protobuf:"varint,1,opt,name=parallelism" json:"parallelism,omitempty"`
	Completions int32    `protobuf:"varint,2,opt,name=completions" json:"completions,omitempty"`
	Template    *PodSpec `protobuf:"bytes,3,opt,name=template" json:"template,omitempty"`
}

func (m *Job_Spec) Reset()                    { *m = Job_Spec{} }
func (m *Job_Spec) String() string            { return proto.CompactTextString(m) }
func (*Job_Spec) ProtoMessage()               {}
func (*Job_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 0} }

func (m *Job_Spec) GetTemplate() *PodSpec {
	if m != nil {
		return m.Template
	}
	return nil
}

type Job_Status struct {
	StartTime      int64 `protobuf:"varint,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime int64 `protobuf:"varint,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Active         int32 `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Succeeded      int32 `protobuf:"varint,4,opt,name=succeeded" json:"succeeded,omitempty"`
	Failed         int32 `protobuf:"varint,5,opt,name=failed" json:"failed,omitempty"`
}

func (m *Job_Status) Reset()                    { *m = Job_Status{} }
func (m *Job_Status) String() string            { return proto.CompactTextString(m) }
func (*Job_Status) ProtoMessage()               {}
func (*Job_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18, 1} }

type Namespace struct {
	Meta   *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Status *Namespace_Status `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *Namespace) Reset()                    { *m = Namespace{} }
func (m *Namespace) String() string            { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()               {}
func (*Namespace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Namespace) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Namespace) GetStatus() *Namespace_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Namespace_Status struct {
	Phase string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
}

func (m *Namespace_Status) Reset()                    { *m = Namespace_Status{} }
func (m *Namespace_Status) String() string            { return proto.CompactTextString(m) }
func (*Namespace_Status) ProtoMessage()               {}
func (*Namespace_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type Node struct {
	Meta     *Meta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec     *Node_Spec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	IsMaster bool         `protobuf:"varint,3,opt,name=is_master,json=isMaster" json:"is_master,omitempty"`
	Status   *Node_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Metrics  *Metrics     `protobuf:"bytes,5,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Node) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Node) GetSpec() *Node_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Node) GetStatus() *Node_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Node) GetMetrics() *Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Node_Spec struct {
	ExternalId    string `protobuf:"bytes,1,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	ProviderId    string `protobuf:"bytes,2,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	Unschedulable bool   `protobuf:"varint,3,opt,name=unschedulable" json:"unschedulable,omitempty"`
}

func (m *Node_Spec) Reset()                    { *m = Node_Spec{} }
func (m *Node_Spec) String() string            { return proto.CompactTextString(m) }
func (*Node_Spec) ProtoMessage()               {}
func (*Node_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 0} }

type Node_Status struct {
	Capacity *Node_Status_Capacity `protobuf:"bytes,1,opt,name=capacity" json:"capacity,omitempty"`
	Phase    string                `protobuf:"bytes,2,opt,name=phase" json:"phase,omitempty"`
	NodeInfo *Node_Status_NodeInfo `protobuf:"bytes,3,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
}

func (m *Node_Status) Reset()                    { *m = Node_Status{} }
func (m *Node_Status) String() string            { return proto.CompactTextString(m) }
func (*Node_Status) ProtoMessage()               {}
func (*Node_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 1} }

func (m *Node_Status) GetCapacity() *Node_Status_Capacity {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *Node_Status) GetNodeInfo() *Node_Status_NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type Node_Status_Capacity struct {
	Cpu    int64 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory int64 `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
	Pods   int64 `protobuf:"varint,3,opt,name=pods" json:"pods,omitempty"`
}

func (m *Node_Status_Capacity) Reset()                    { *m = Node_Status_Capacity{} }
func (m *Node_Status_Capacity) String() string            { return proto.CompactTextString(m) }
func (*Node_Status_Capacity) ProtoMessage()               {}
func (*Node_Status_Capacity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 1, 0} }

type Node_Status_NodeInfo struct {
	KernelVersion           string `protobuf:"bytes,1,opt,name=kernel_version,json=kernelVersion" json:"kernel_version,omitempty"`
	OsImage                 string `protobuf:"bytes,2,opt,name=os_image,json=osImage" json:"os_image,omitempty"`
	ContainerRuntimeVersion string `protobuf:"bytes,3,opt,name=container_runtime_version,json=containerRuntimeVersion" json:"container_runtime_version,omitempty"`
	KubeletVersion          string `protobuf:"bytes,4,opt,name=kubelet_version,json=kubeletVersion" json:"kubelet_version,omitempty"`
	KubeProxyVersion        string `protobuf:"bytes,5,opt,name=kube_proxy_version,json=kubeProxyVersion" json:"kube_proxy_version,omitempty"`
}

func (m *Node_Status_NodeInfo) Reset()                    { *m = Node_Status_NodeInfo{} }
func (m *Node_Status_NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*Node_Status_NodeInfo) ProtoMessage()               {}
func (*Node_Status_NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20, 1, 1} }

type Pod struct {
	Meta    *Meta       `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App     string      `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec    *PodSpec    `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status  *Pod_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Metrics *Metrics    `protobuf:"bytes,5,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Pod) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Pod) GetSpec() *PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Pod) GetStatus() *Pod_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Pod) GetMetrics() *Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Pod_Status struct {
	Phase   string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	HostIP  string `protobuf:"bytes,4,opt,name=hostIP" json:"hostIP,omitempty"`
	PodIP   string `protobuf:"bytes,5,opt,name=podIP" json:"podIP,omitempty"`
}

func (m *Pod_Status) Reset()                    { *m = Pod_Status{} }
func (m *Pod_Status) String() string            { return proto.CompactTextString(m) }
func (*Pod_Status) ProtoMessage()               {}
func (*Pod_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

type PersistentVolume struct {
	Meta   *Meta                                    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *PersistentVolume_PersistentVolumeSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *PersistentVolume_PersistentVolumeStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *PersistentVolume) Reset()                    { *m = PersistentVolume{} }
func (m *PersistentVolume) String() string            { return proto.CompactTextString(m) }
func (*PersistentVolume) ProtoMessage()               {}
func (*PersistentVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PersistentVolume) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PersistentVolume) GetSpec() *PersistentVolume_PersistentVolumeSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PersistentVolume) GetStatus() *PersistentVolume_PersistentVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type PersistentVolume_PersistentVolumeSpec struct {
	Capacity                      map[string]string       `protobuf:"bytes,1,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AccessModes                   []string                `protobuf:"bytes,2,rep,name=access_modes,json=accessModes" json:"access_modes,omitempty"`
	PersistentVolumeReclaimPolicy string                  `protobuf:"bytes,3,opt,name=persistent_volume_reclaim_policy,json=persistentVolumeReclaimPolicy" json:"persistent_volume_reclaim_policy,omitempty"`
	ClaimRef                      *ObjectReference        `protobuf:"bytes,4,opt,name=claim_ref,json=claimRef" json:"claim_ref,omitempty"`
	PersistentVolumeSource        *PersistentVolumeSource `protobuf:"bytes,5,opt,name=persistent_volume_source,json=persistentVolumeSource" json:"persistent_volume_source,omitempty"`
}

func (m *PersistentVolume_PersistentVolumeSpec) Reset()         { *m = PersistentVolume_PersistentVolumeSpec{} }
func (m *PersistentVolume_PersistentVolumeSpec) String() string { return proto.CompactTextString(m) }
func (*PersistentVolume_PersistentVolumeSpec) ProtoMessage()    {}
func (*PersistentVolume_PersistentVolumeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

func (m *PersistentVolume_PersistentVolumeSpec) GetCapacity() map[string]string {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *PersistentVolume_PersistentVolumeSpec) GetClaimRef() *ObjectReference {
	if m != nil {
		return m.ClaimRef
	}
	return nil
}

func (m *PersistentVolume_PersistentVolumeSpec) GetPersistentVolumeSource() *PersistentVolumeSource {
	if m != nil {
		return m.PersistentVolumeSource
	}
	return nil
}

type PersistentVolume_PersistentVolumeStatus struct {
	Phase   string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
}

func (m *PersistentVolume_PersistentVolumeStatus) Reset() {
	*m = PersistentVolume_PersistentVolumeStatus{}
}
func (m *PersistentVolume_PersistentVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*PersistentVolume_PersistentVolumeStatus) ProtoMessage()    {}
func (*PersistentVolume_PersistentVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 1}
}

type PersistentVolumeClaim struct {
	Meta   *Meta                                              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Spec   *PersistentVolumeClaim_PersistentVolumeClaimSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *PersistentVolumeClaim_PersistentVolumeClaimStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *PersistentVolumeClaim) Reset()                    { *m = PersistentVolumeClaim{} }
func (m *PersistentVolumeClaim) String() string            { return proto.CompactTextString(m) }
func (*PersistentVolumeClaim) ProtoMessage()               {}
func (*PersistentVolumeClaim) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PersistentVolumeClaim) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PersistentVolumeClaim) GetSpec() *PersistentVolumeClaim_PersistentVolumeClaimSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PersistentVolumeClaim) GetStatus() *PersistentVolumeClaim_PersistentVolumeClaimStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type PersistentVolumeClaim_PersistentVolumeClaimSpec struct {
	AccessModes []string                                                              `protobuf:"bytes,1,rep,name=access_modes,json=accessModes" json:"access_modes,omitempty"`
	Resources   *PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
	VolumeName  string                                                                `protobuf:"bytes,3,opt,name=volume_name,json=volumeName" json:"volume_name,omitempty"`
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec) Reset() {
	*m = PersistentVolumeClaim_PersistentVolumeClaimSpec{}
}
func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec) String() string {
	return proto.CompactTextString(m)
}
func (*PersistentVolumeClaim_PersistentVolumeClaimSpec) ProtoMessage() {}
func (*PersistentVolumeClaim_PersistentVolumeClaimSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23, 0}
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec) GetResources() *PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

type PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements struct {
	Limits   map[string]string `protobuf:"bytes,1,rep,name=limits" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Requests map[string]string `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements) Reset() {
	*m = PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements{}
}
func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements) String() string {
	return proto.CompactTextString(m)
}
func (*PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements) ProtoMessage() {}
func (*PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23, 0, 0}
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements) GetLimits() map[string]string {
	if m != nil {
		return m.Limits
	}
	return nil
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements) GetRequests() map[string]string {
	if m != nil {
		return m.Requests
	}
	return nil
}

type PersistentVolumeClaim_PersistentVolumeClaimStatus struct {
	Phase       string            `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	AccessModes []string          `protobuf:"bytes,2,rep,name=access_modes,json=accessModes" json:"access_modes,omitempty"`
	Capacity    map[string]string `protobuf:"bytes,3,rep,name=capacity" json:"capacity,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) Reset() {
	*m = PersistentVolumeClaim_PersistentVolumeClaimStatus{}
}
func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) String() string {
	return proto.CompactTextString(m)
}
func (*PersistentVolumeClaim_PersistentVolumeClaimStatus) ProtoMessage() {}
func (*PersistentVolumeClaim_PersistentVolumeClaimStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23, 1}
}

func (m *PersistentVolumeClaim_PersistentVolumeClaimStatus) GetCapacity() map[string]string {
	if m != nil {
		return m.Capacity
	}
	return nil
}

type ObjectReference struct {
	Kind            string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	Namespace       string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Uid             string `protobuf:"bytes,4,opt,name=uid" json:"uid,omitempty"`
	APIVersion      string `protobuf:"bytes,5,opt,name=API_version,json=APIVersion" json:"API_version,omitempty"`
	ResourceVersion string `protobuf:"bytes,6,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
}

func (m *ObjectReference) Reset()                    { *m = ObjectReference{} }
func (m *ObjectReference) String() string            { return proto.CompactTextString(m) }
func (*ObjectReference) ProtoMessage()               {}
func (*ObjectReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type Service struct {
	Meta   *Meta           `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string          `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *Service_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *Service_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Service) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Service) GetSpec() *Service_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Service) GetStatus() *Service_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Service_Spec struct {
	Type           string               `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Ports          []*Service_Spec_Port `protobuf:"bytes,2,rep,name=ports" json:"ports,omitempty"`
	Seletors       map[string]string    `protobuf:"bytes,3,rep,name=seletors" json:"seletors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ClusterIP      string               `protobuf:"bytes,4,opt,name=clusterIP" json:"clusterIP,omitempty"`
	ExternalIPs    []string             `protobuf:"bytes,5,rep,name=externalIPs" json:"externalIPs,omitempty"`
	LoadbalancerIP string               `protobuf:"bytes,6,opt,name=loadbalancerIP" json:"loadbalancerIP,omitempty"`
}

func (m *Service_Spec) Reset()                    { *m = Service_Spec{} }
func (m *Service_Spec) String() string            { return proto.CompactTextString(m) }
func (*Service_Spec) ProtoMessage()               {}
func (*Service_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0} }

func (m *Service_Spec) GetPorts() []*Service_Spec_Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Service_Spec) GetSeletors() map[string]string {
	if m != nil {
		return m.Seletors
	}
	return nil
}

type Service_Spec_Port struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Protocol   string `protobuf:"bytes,2,opt,name=protocol" json:"protocol,omitempty"`
	Port       int32  `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	TargetPort string `protobuf:"bytes,4,opt,name=target_port,json=targetPort" json:"target_port,omitempty"`
	NodePort   int32  `protobuf:"varint,5,opt,name=node_port,json=nodePort" json:"node_port,omitempty"`
}

func (m *Service_Spec_Port) Reset()                    { *m = Service_Spec_Port{} }
func (m *Service_Spec_Port) String() string            { return proto.CompactTextString(m) }
func (*Service_Spec_Port) ProtoMessage()               {}
func (*Service_Spec_Port) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 0, 1} }

type Service_Status struct {
	LoadbalancerIngresses []*Service_Status_LoadBalancerIngress `protobuf:"bytes,1,rep,name=loadbalancer_ingresses,json=loadbalancerIngresses" json:"loadbalancer_ingresses,omitempty"`
}

func (m *Service_Status) Reset()                    { *m = Service_Status{} }
func (m *Service_Status) String() string            { return proto.CompactTextString(m) }
func (*Service_Status) ProtoMessage()               {}
func (*Service_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25, 1} }

func (m *Service_Status) GetLoadbalancerIngresses() []*Service_Status_LoadBalancerIngress {
	if m != nil {
		return m.LoadbalancerIngresses
	}
	return nil
}

type Service_Status_LoadBalancerIngress struct {
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	IP       string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
}

func (m *Service_Status_LoadBalancerIngress) Reset()         { *m = Service_Status_LoadBalancerIngress{} }
func (m *Service_Status_LoadBalancerIngress) String() string { return proto.CompactTextString(m) }
func (*Service_Status_LoadBalancerIngress) ProtoMessage()    {}
func (*Service_Status_LoadBalancerIngress) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25, 1, 0}
}

type Secret struct {
	Meta *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data map[string]string `protobuf:"bytes,2,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type string            `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Secret) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Secret) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReplicationController struct {
	Meta   *Meta                         `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string                        `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *ReplicationController_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *ReplicationController_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *ReplicationController) Reset()                    { *m = ReplicationController{} }
func (m *ReplicationController) String() string            { return proto.CompactTextString(m) }
func (*ReplicationController) ProtoMessage()               {}
func (*ReplicationController) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReplicationController) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReplicationController) GetSpec() *ReplicationController_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplicationController) GetStatus() *ReplicationController_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReplicationController_Spec struct {
	DesiredReplicas int32             `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selectors       map[string]string `protobuf:"bytes,2,rep,name=selectors" json:"selectors,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PodTemplate     *PodSpec          `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *ReplicationController_Spec) Reset()                    { *m = ReplicationController_Spec{} }
func (m *ReplicationController_Spec) String() string            { return proto.CompactTextString(m) }
func (*ReplicationController_Spec) ProtoMessage()               {}
func (*ReplicationController_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

func (m *ReplicationController_Spec) GetSelectors() map[string]string {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func (m *ReplicationController_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type ReplicationController_Status struct {
	CurrentReplicas    int32 `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
}

func (m *ReplicationController_Status) Reset()         { *m = ReplicationController_Status{} }
func (m *ReplicationController_Status) String() string { return proto.CompactTextString(m) }
func (*ReplicationController_Status) ProtoMessage()    {}
func (*ReplicationController_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27, 1}
}

type ReplicaSet struct {
	Meta   *Meta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string             `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *ReplicaSet_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *ReplicaSet_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *ReplicaSet) Reset()                    { *m = ReplicaSet{} }
func (m *ReplicaSet) String() string            { return proto.CompactTextString(m) }
func (*ReplicaSet) ProtoMessage()               {}
func (*ReplicaSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReplicaSet) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *ReplicaSet) GetSpec() *ReplicaSet_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ReplicaSet) GetStatus() *ReplicaSet_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReplicaSet_Spec struct {
	DesiredReplicas int32          `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector        *LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate     *PodSpec       `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *ReplicaSet_Spec) Reset()                    { *m = ReplicaSet_Spec{} }
func (m *ReplicaSet_Spec) String() string            { return proto.CompactTextString(m) }
func (*ReplicaSet_Spec) ProtoMessage()               {}
func (*ReplicaSet_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28, 0} }

func (m *ReplicaSet_Spec) GetSelector() *LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *ReplicaSet_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type ReplicaSet_Status struct {
	CurrentReplicas    int32 `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
}

func (m *ReplicaSet_Status) Reset()                    { *m = ReplicaSet_Status{} }
func (m *ReplicaSet_Status) String() string            { return proto.CompactTextString(m) }
func (*ReplicaSet_Status) ProtoMessage()               {}
func (*ReplicaSet_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28, 1} }

type DaemonSet struct {
	Meta   *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string            `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *DaemonSet_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *DaemonSet_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *DaemonSet) Reset()                    { *m = DaemonSet{} }
func (m *DaemonSet) String() string            { return proto.CompactTextString(m) }
func (*DaemonSet) ProtoMessage()               {}
func (*DaemonSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DaemonSet) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DaemonSet) GetSpec() *DaemonSet_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *DaemonSet) GetStatus() *DaemonSet_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type DaemonSet_Spec struct {
	Selector    *LabelSelector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	PodTemplate *PodSpec       `protobuf:"bytes,2,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *DaemonSet_Spec) Reset()                    { *m = DaemonSet_Spec{} }
func (m *DaemonSet_Spec) String() string            { return proto.CompactTextString(m) }
func (*DaemonSet_Spec) ProtoMessage()               {}
func (*DaemonSet_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

func (m *DaemonSet_Spec) GetSelector() *LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *DaemonSet_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type DaemonSet_Status struct {
	CurrentNumberScheduled int32 `protobuf:"varint,1,opt,name=current_number_scheduled,json=currentNumberScheduled" json:"current_number_scheduled,omitempty"`
	NumberMisscheduled     int32 `protobuf:"varint,2,opt,name=number_misscheduled,json=numberMisscheduled" json:"number_misscheduled,omitempty"`
	DesiredNumberScheduled int32 `protobuf:"varint,3,opt,name=desired_number_scheduled,json=desiredNumberScheduled" json:"desired_number_scheduled,omitempty"`
}

func (m *DaemonSet_Status) Reset()                    { *m = DaemonSet_Status{} }
func (m *DaemonSet_Status) String() string            { return proto.CompactTextString(m) }
func (*DaemonSet_Status) ProtoMessage()               {}
func (*DaemonSet_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 1} }

type Deployment struct {
	Meta   *Meta              `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string             `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *Deployment_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *Deployment_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Deployment) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Deployment) GetSpec() *Deployment_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Deployment) GetStatus() *Deployment_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Deployment_Spec struct {
	DesiredReplicas int32          `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector        *LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate     *PodSpec       `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
}

func (m *Deployment_Spec) Reset()                    { *m = Deployment_Spec{} }
func (m *Deployment_Spec) String() string            { return proto.CompactTextString(m) }
func (*Deployment_Spec) ProtoMessage()               {}
func (*Deployment_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 0} }

func (m *Deployment_Spec) GetSelector() *LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *Deployment_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type Deployment_Status struct {
	ObservedGeneration  int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
	Replicas            int32 `protobuf:"varint,2,opt,name=replicas" json:"replicas,omitempty"`
	UpdatedReplicas     int32 `protobuf:"varint,3,opt,name=updated_replicas,json=updatedReplicas" json:"updated_replicas,omitempty"`
	AvailableReplicas   int32 `protobuf:"varint,4,opt,name=available_replicas,json=availableReplicas" json:"available_replicas,omitempty"`
	UnavailableReplicas int32 `protobuf:"varint,5,opt,name=unavailable_replicas,json=unavailableReplicas" json:"unavailable_replicas,omitempty"`
}

func (m *Deployment_Status) Reset()                    { *m = Deployment_Status{} }
func (m *Deployment_Status) String() string            { return proto.CompactTextString(m) }
func (*Deployment_Status) ProtoMessage()               {}
func (*Deployment_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30, 1} }

type PetSet struct {
	Meta   *Meta          `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	App    string         `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Spec   *PetSet_Spec   `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
	Status *PetSet_Status `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *PetSet) Reset()                    { *m = PetSet{} }
func (m *PetSet) String() string            { return proto.CompactTextString(m) }
func (*PetSet) ProtoMessage()               {}
func (*PetSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PetSet) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *PetSet) GetSpec() *PetSet_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PetSet) GetStatus() *PetSet_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type PetSet_Spec struct {
	DesiredReplicas int32          `protobuf:"varint,1,opt,name=desired_replicas,json=desiredReplicas" json:"desired_replicas,omitempty"`
	Selector        *LabelSelector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	PodTemplate     *PodSpec       `protobuf:"bytes,3,opt,name=pod_template,json=podTemplate" json:"pod_template,omitempty"`
	ServiceName     string         `protobuf:"bytes,4,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *PetSet_Spec) Reset()                    { *m = PetSet_Spec{} }
func (m *PetSet_Spec) String() string            { return proto.CompactTextString(m) }
func (*PetSet_Spec) ProtoMessage()               {}
func (*PetSet_Spec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31, 0} }

func (m *PetSet_Spec) GetSelector() *LabelSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *PetSet_Spec) GetPodTemplate() *PodSpec {
	if m != nil {
		return m.PodTemplate
	}
	return nil
}

type PetSet_Status struct {
	CurrentReplicas    int32 `protobuf:"varint,1,opt,name=current_replicas,json=currentReplicas" json:"current_replicas,omitempty"`
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observed_generation,json=observedGeneration" json:"observed_generation,omitempty"`
}

func (m *PetSet_Status) Reset()                    { *m = PetSet_Status{} }
func (m *PetSet_Status) String() string            { return proto.CompactTextString(m) }
func (*PetSet_Status) ProtoMessage()               {}
func (*PetSet_Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31, 1} }

type StorageClass struct {
	Meta        *Meta             `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Provisioner string            `protobuf:"bytes,2,opt,name=provisioner" json:"provisioner,omitempty"`
	Parameters  map[string]string `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StorageClass) Reset()                    { *m = StorageClass{} }
func (m *StorageClass) String() string            { return proto.CompactTextString(m) }
func (*StorageClass) ProtoMessage()               {}
func (*StorageClass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *StorageClass) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *StorageClass) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type LabelSelector struct {
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LabelSelector) Reset()                    { *m = LabelSelector{} }
func (m *LabelSelector) String() string            { return proto.CompactTextString(m) }
func (*LabelSelector) ProtoMessage()               {}
func (*LabelSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *LabelSelector) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

type Event struct {
	Meta           *Meta        `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Reason         string       `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Message        string       `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Source         *EventSource `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	FirstTimestamp int64        `protobuf:"varint,5,opt,name=first_timestamp,json=firstTimestamp" json:"first_timestamp,omitempty"`
	LastTimestamp  int64        `protobuf:"varint,6,opt,name=last_timestamp,json=lastTimestamp" json:"last_timestamp,omitempty"`
	Count          int32        `protobuf:"varint,7,opt,name=count" json:"count,omitempty"`
	Type           string       `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Event) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Event) GetSource() *EventSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type EventSource struct {
	Componenet string `protobuf:"bytes,1,opt,name=componenet" json:"componenet,omitempty"`
	Host       string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *EventSource) Reset()                    { *m = EventSource{} }
func (m *EventSource) String() string            { return proto.CompactTextString(m) }
func (*EventSource) ProtoMessage()               {}
func (*EventSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type Metrics struct {
	CpuUsage    []*Metrics_DataPoint `protobuf:"bytes,1,rep,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	MemoryUsage []*Metrics_DataPoint `protobuf:"bytes,2,rep,name=memory_usage,json=memoryUsage" json:"memory_usage,omitempty"`
}

func (m *Metrics) Reset()                    { *m = Metrics{} }
func (m *Metrics) String() string            { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()               {}
func (*Metrics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Metrics) GetCpuUsage() []*Metrics_DataPoint {
	if m != nil {
		return m.CpuUsage
	}
	return nil
}

func (m *Metrics) GetMemoryUsage() []*Metrics_DataPoint {
	if m != nil {
		return m.MemoryUsage
	}
	return nil
}

type Metrics_DataPoint struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Value     int64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metrics_DataPoint) Reset()                    { *m = Metrics_DataPoint{} }
func (m *Metrics_DataPoint) String() string            { return proto.CompactTextString(m) }
func (*Metrics_DataPoint) ProtoMessage()               {}
func (*Metrics_DataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36, 0} }

type PersistentVolumeRegisterRequest struct {
	Cluster    string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Identifier string `protobuf:"bytes,3,opt,name=identifier" json:"identifier,omitempty"`
	Plugin     string `protobuf:"bytes,4,opt,name=plugin" json:"plugin,omitempty"`
	SizeGb     int64  `protobuf:"varint,5,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Endpoint   string `protobuf:"bytes,6,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *PersistentVolumeRegisterRequest) Reset()         { *m = PersistentVolumeRegisterRequest{} }
func (m *PersistentVolumeRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

type PersistentVolumeUnRegisterRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PersistentVolumeUnRegisterRequest) Reset()         { *m = PersistentVolumeUnRegisterRequest{} }
func (m *PersistentVolumeUnRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeUnRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeUnRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38}
}

type PersistentVolumeClaimRegisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	SizeGb    int64  `protobuf:"varint,3,opt,name=size_gb,json=sizeGb" json:"size_gb,omitempty"`
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PersistentVolumeClaimRegisterRequest) Reset()         { *m = PersistentVolumeClaimRegisterRequest{} }
func (m *PersistentVolumeClaimRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeClaimRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39}
}

type PersistentVolumeClaimUnRegisterRequest struct {
	Cluster   string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PersistentVolumeClaimUnRegisterRequest) Reset() {
	*m = PersistentVolumeClaimUnRegisterRequest{}
}
func (m *PersistentVolumeClaimUnRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentVolumeClaimUnRegisterRequest) ProtoMessage()    {}
func (*PersistentVolumeClaimUnRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40}
}

// PersistentVolumeSource is similar to VolumeSource but meant for the
// administrator who creates PVs. Exactly one of its members must be set.
type PersistentVolumeSource struct {
	// GCEPersistentDisk represents a GCE Disk resource that is attached to a
	// kubelet's host machine and then exposed to the pod. Provisioned by an admin.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	GcePersistentDisk *GCEPersistentDiskVolumeSource `protobuf:"bytes,1,opt,name=gcePersistentDisk" json:"gcePersistentDisk,omitempty"`
	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a
	// kubelet's host machine and then exposed to the pod.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	AwsElasticBlockStore *AWSElasticBlockStoreVolumeSource `protobuf:"bytes,2,opt,name=awsElasticBlockStore" json:"awsElasticBlockStore,omitempty"`
	// HostPath represents a directory on the host.
	// Provisioned by a developer or tester.
	// This is useful for single-node development and testing only!
	// On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
	HostPath *HostPathVolumeSource `protobuf:"bytes,3,opt,name=hostPath" json:"hostPath,omitempty"`
	// Glusterfs represents a Glusterfs volume that is attached to a host and
	// exposed to the pod. Provisioned by an admin.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md
	Glusterfs *GlusterfsVolumeSource `protobuf:"bytes,4,opt,name=glusterfs" json:"glusterfs,omitempty"`
	// NFS represents an NFS mount on the host. Provisioned by an admin.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	Nfs *NFSVolumeSource `protobuf:"bytes,5,opt,name=nfs" json:"nfs,omitempty"`
	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md
	Rbd *RBDVolumeSource `protobuf:"bytes,6,opt,name=rbd" json:"rbd,omitempty"`
	// ISCSI represents an ISCSI Disk resource that is attached to a
	// kubelet's host machine and then exposed to the pod. Provisioned by an admin.
	Iscsi *ISCSIVolumeSource `protobuf:"bytes,7,opt,name=iscsi" json:"iscsi,omitempty"`
	// Cinder represents a cinder volume attached and mounted on kubelets host machine
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	Cinder *CinderVolumeSource `protobuf:"bytes,8,opt,name=cinder" json:"cinder,omitempty"`
	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
	Cephfs *CephFSVolumeSource `protobuf:"bytes,9,opt,name=cephfs" json:"cephfs,omitempty"`
	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
	Fc *FCVolumeSource `protobuf:"bytes,10,opt,name=fc" json:"fc,omitempty"`
	// Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
	Flocker *FlockerVolumeSource `protobuf:"bytes,11,opt,name=flocker" json:"flocker,omitempty"`
	// FlexVolume represents a generic volume resource that is
	// provisioned/attached using an exec based plugin. This is an
	// alpha feature and may change in future.
	FlexVolume *FlexVolumeSource `protobuf:"bytes,12,opt,name=flexVolume" json:"flexVolume,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
	AzureFile *AzureFileVolumeSource `protobuf:"bytes,13,opt,name=azureFile" json:"azureFile,omitempty"`
	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
	VsphereVolume *VsphereVirtualDiskVolumeSource `protobuf:"bytes,14,opt,name=vsphereVolume" json:"vsphereVolume,omitempty"`
	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
	Quobyte *QuobyteVolumeSource `protobuf:"bytes,15,opt,name=quobyte" json:"quobyte,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
	AzureDisk *AzureDiskVolumeSource `protobuf:"bytes,16,opt,name=azureDisk" json:"azureDisk,omitempty"`
}

func (m *PersistentVolumeSource) Reset()                    { *m = PersistentVolumeSource{} }
func (m *PersistentVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*PersistentVolumeSource) ProtoMessage()               {}
func (*PersistentVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *PersistentVolumeSource) GetGcePersistentDisk() *GCEPersistentDiskVolumeSource {
	if m != nil {
		return m.GcePersistentDisk
	}
	return nil
}

func (m *PersistentVolumeSource) GetAwsElasticBlockStore() *AWSElasticBlockStoreVolumeSource {
	if m != nil {
		return m.AwsElasticBlockStore
	}
	return nil
}

func (m *PersistentVolumeSource) GetHostPath() *HostPathVolumeSource {
	if m != nil {
		return m.HostPath
	}
	return nil
}

func (m *PersistentVolumeSource) GetGlusterfs() *GlusterfsVolumeSource {
	if m != nil {
		return m.Glusterfs
	}
	return nil
}

func (m *PersistentVolumeSource) GetNfs() *NFSVolumeSource {
	if m != nil {
		return m.Nfs
	}
	return nil
}

func (m *PersistentVolumeSource) GetRbd() *RBDVolumeSource {
	if m != nil {
		return m.Rbd
	}
	return nil
}

func (m *PersistentVolumeSource) GetIscsi() *ISCSIVolumeSource {
	if m != nil {
		return m.Iscsi
	}
	return nil
}

func (m *PersistentVolumeSource) GetCinder() *CinderVolumeSource {
	if m != nil {
		return m.Cinder
	}
	return nil
}

func (m *PersistentVolumeSource) GetCephfs() *CephFSVolumeSource {
	if m != nil {
		return m.Cephfs
	}
	return nil
}

func (m *PersistentVolumeSource) GetFc() *FCVolumeSource {
	if m != nil {
		return m.Fc
	}
	return nil
}

func (m *PersistentVolumeSource) GetFlocker() *FlockerVolumeSource {
	if m != nil {
		return m.Flocker
	}
	return nil
}

func (m *PersistentVolumeSource) GetFlexVolume() *FlexVolumeSource {
	if m != nil {
		return m.FlexVolume
	}
	return nil
}

func (m *PersistentVolumeSource) GetAzureFile() *AzureFileVolumeSource {
	if m != nil {
		return m.AzureFile
	}
	return nil
}

func (m *PersistentVolumeSource) GetVsphereVolume() *VsphereVirtualDiskVolumeSource {
	if m != nil {
		return m.VsphereVolume
	}
	return nil
}

func (m *PersistentVolumeSource) GetQuobyte() *QuobyteVolumeSource {
	if m != nil {
		return m.Quobyte
	}
	return nil
}

func (m *PersistentVolumeSource) GetAzureDisk() *AzureDiskVolumeSource {
	if m != nil {
		return m.AzureDisk
	}
	return nil
}

// Represents a Persistent Disk resource in AWS.
//
// An AWS EBS disk must exist before mounting to a container. The disk
// must also be in the same AWS zone as the kubelet. An AWS EBS disk
// can only be mounted as read/write once. AWS EBS volumes support
// ownership management and SELinux relabeling.
type AWSElasticBlockStoreVolumeSource struct {
	// Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// The partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition int32 `protobuf:"varint,3,opt,name=partition" json:"partition,omitempty"`
	// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
	// If omitted, the default is "false".
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#awselasticblockstore
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *AWSElasticBlockStoreVolumeSource) Reset()         { *m = AWSElasticBlockStoreVolumeSource{} }
func (m *AWSElasticBlockStoreVolumeSource) String() string { return proto.CompactTextString(m) }
func (*AWSElasticBlockStoreVolumeSource) ProtoMessage()    {}
func (*AWSElasticBlockStoreVolumeSource) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42}
}

// Represents a host path mapped into a pod.
// Host path volumes do not support ownership management or SELinux relabeling.
type HostPathVolumeSource struct {
	// Path of the directory on the host.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#hostpath
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *HostPathVolumeSource) Reset()                    { *m = HostPathVolumeSource{} }
func (m *HostPathVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*HostPathVolumeSource) ProtoMessage()               {}
func (*HostPathVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

// Represents an NFS mount that lasts the lifetime of a pod.
// NFS volumes do not support ownership management or SELinux relabeling.
type NFSVolumeSource struct {
	// Server is the hostname or IP address of the NFS server.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// Path that is exported by the NFS server.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// ReadOnly here will force
	// the NFS export to be mounted with read-only permissions.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#nfs
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *NFSVolumeSource) Reset()                    { *m = NFSVolumeSource{} }
func (m *NFSVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*NFSVolumeSource) ProtoMessage()               {}
func (*NFSVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

// Represents a Fibre Channel volume.
// Fibre Channel volumes can only be mounted as read/write once.
// Fibre Channel volumes support ownership management and SELinux relabeling.
type FCVolumeSource struct {
	// Required: FC target worldwide names (WWNs)
	TargetWWNs []string `protobuf:"bytes,1,rep,name=targetWWNs" json:"targetWWNs,omitempty"`
	// Required: FC target lun number
	Lun int32 `protobuf:"varint,2,opt,name=lun" json:"lun,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,3,opt,name=fsType" json:"fsType,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *FCVolumeSource) Reset()                    { *m = FCVolumeSource{} }
func (m *FCVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*FCVolumeSource) ProtoMessage()               {}
func (*FCVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

// FlexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
type FlexVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// Optional: SecretRef is reference to the secret object containing
	// sensitive information to pass to the plugin scripts. This may be
	// empty if no secret object is specified. If the secret object
	// contains more than one secret, all secrets are passed to the plugin
	// scripts.
	SecretRef *ObjectReference `protobuf:"bytes,3,opt,name=secretRef" json:"secretRef,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
	// Optional: Extra command options if any.
	Options map[string]string `protobuf:"bytes,5,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FlexVolumeSource) Reset()                    { *m = FlexVolumeSource{} }
func (m *FlexVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*FlexVolumeSource) ProtoMessage()               {}
func (*FlexVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *FlexVolumeSource) GetSecretRef() *ObjectReference {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

func (m *FlexVolumeSource) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

// Represents a Flocker volume mounted by the Flocker agent.
// Flocker volumes do not support ownership management or SELinux relabeling.
type FlockerVolumeSource struct {
	// Required: the volume name. This is going to be store on metadata -> name on the payload for Flocker
	DatasetName string `protobuf:"bytes,1,opt,name=datasetName" json:"datasetName,omitempty"`
}

func (m *FlockerVolumeSource) Reset()                    { *m = FlockerVolumeSource{} }
func (m *FlockerVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*FlockerVolumeSource) ProtoMessage()               {}
func (*FlockerVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

// Represents a Persistent Disk resource in Google Compute Engine.
//
// A GCE PD must exist before mounting to a container. The disk must
// also be in the same GCE project and zone as the kubelet. A GCE PD
// can only be mounted as read/write once or read-only many times. GCE
// PDs support ownership management and SELinux relabeling.
type GCEPersistentDiskVolumeSource struct {
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	PdName string `protobuf:"bytes,1,opt,name=pdName" json:"pdName,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// The partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	Partition int32 `protobuf:"varint,3,opt,name=partition" json:"partition,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#gcepersistentdisk
	ReadOnly bool `protobuf:"varint,4,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *GCEPersistentDiskVolumeSource) Reset()                    { *m = GCEPersistentDiskVolumeSource{} }
func (m *GCEPersistentDiskVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*GCEPersistentDiskVolumeSource) ProtoMessage()               {}
func (*GCEPersistentDiskVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

// Represents a volume that is populated with the contents of a git repository.
// Git repo volumes do not support ownership management.
// Git repo volumes support SELinux relabeling.
type GitRepoVolumeSource struct {
	// Repository URL
	Repository string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	// Commit hash for the specified revision.
	Revision string `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	// Target directory name.
	// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
	// git repository.  Otherwise, if specified, the volume will contain the git repository in
	// the subdirectory with the given name.
	Directory string `protobuf:"bytes,3,opt,name=directory" json:"directory,omitempty"`
}

func (m *GitRepoVolumeSource) Reset()                    { *m = GitRepoVolumeSource{} }
func (m *GitRepoVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*GitRepoVolumeSource) ProtoMessage()               {}
func (*GitRepoVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

// Represents a Glusterfs mount that lasts the lifetime of a pod.
// Glusterfs volumes do not support ownership management or SELinux relabeling.
type GlusterfsVolumeSource struct {
	// EndpointsName is the endpoint name that details Glusterfs topology.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `protobuf:"bytes,1,opt,name=endpoints" json:"endpoints,omitempty"`
	// Path is the Glusterfs volume path.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md#create-a-pod
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/glusterfs/README.md#create-a-pod
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *GlusterfsVolumeSource) Reset()                    { *m = GlusterfsVolumeSource{} }
func (m *GlusterfsVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*GlusterfsVolumeSource) ProtoMessage()               {}
func (*GlusterfsVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

// Represents a Rados Block Device mount that lasts the lifetime of a pod.
// RBD volumes support ownership management and SELinux relabeling.
type RBDVolumeSource struct {
	// A collection of Ceph monitors.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	// The rados image name.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	Image string `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#rbd
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,3,opt,name=fsType" json:"fsType,omitempty"`
	// The rados pool name.
	// Default is rbd.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it.
	Pool string `protobuf:"bytes,4,opt,name=pool" json:"pool,omitempty"`
	// The rados user name.
	// Default is admin.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	User string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	// Keyring is the path to key ring for RBDUser.
	// Default is /etc/ceph/keyring.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	Keyring string `protobuf:"bytes,6,opt,name=keyring" json:"keyring,omitempty"`
	// SecretRef is name of the authentication secret for RBDUser. If provided
	// overrides keyring.
	// Default is nil.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	SecretRef *ObjectReference `protobuf:"bytes,7,opt,name=secretRef" json:"secretRef,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/rbd/README.md#how-to-use-it
	ReadOnly bool `protobuf:"varint,8,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *RBDVolumeSource) Reset()                    { *m = RBDVolumeSource{} }
func (m *RBDVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*RBDVolumeSource) ProtoMessage()               {}
func (*RBDVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *RBDVolumeSource) GetSecretRef() *ObjectReference {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

// Represents an ISCSI disk.
// ISCSI volumes can only be mounted as read/write once.
// ISCSI volumes support ownership management and SELinux relabeling.
type ISCSIVolumeSource struct {
	// iSCSI target portal. The portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	TargetPortal string `protobuf:"bytes,1,opt,name=targetPortal" json:"targetPortal,omitempty"`
	// Target iSCSI Qualified Name.
	Iqn string `protobuf:"bytes,2,opt,name=iqn" json:"iqn,omitempty"`
	// iSCSI target lun number.
	Lun int32 `protobuf:"varint,3,opt,name=lun" json:"lun,omitempty"`
	// Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport.
	IscsiInterface string `protobuf:"bytes,4,opt,name=iscsiInterface" json:"iscsiInterface,omitempty"`
	// Filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/docs/user-guide/volumes.md#iscsi
	// TODO: how do we prevent errors in the filesystem from compromising the machine
	FsType string `protobuf:"bytes,5,opt,name=fsType" json:"fsType,omitempty"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	ReadOnly bool `protobuf:"varint,6,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *ISCSIVolumeSource) Reset()                    { *m = ISCSIVolumeSource{} }
func (m *ISCSIVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*ISCSIVolumeSource) ProtoMessage()               {}
func (*ISCSIVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type AzureFileVolumeSource struct {
	// the name of secret that contains Azure Storage Account Name and Key
	SecretName string `protobuf:"bytes,1,opt,name=secretName" json:"secretName,omitempty"`
	// Share Name
	ShareName string `protobuf:"bytes,2,opt,name=shareName" json:"shareName,omitempty"`
	// Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *AzureFileVolumeSource) Reset()                    { *m = AzureFileVolumeSource{} }
func (m *AzureFileVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*AzureFileVolumeSource) ProtoMessage()               {}
func (*AzureFileVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

// Represents a vSphere volume resource.
type VsphereVirtualDiskVolumeSource struct {
	// Path that identifies vSphere volume vmdk
	VolumePath string `protobuf:"bytes,1,opt,name=volumePath" json:"volumePath,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
}

func (m *VsphereVirtualDiskVolumeSource) Reset()                    { *m = VsphereVirtualDiskVolumeSource{} }
func (m *VsphereVirtualDiskVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*VsphereVirtualDiskVolumeSource) ProtoMessage()               {}
func (*VsphereVirtualDiskVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

// Represents a Quobyte mount that lasts the lifetime of a pod.
// Quobyte volumes do not support ownership management or SELinux relabeling.
type QuobyteVolumeSource struct {
	// Registry represents a single or multiple Quobyte Registry services
	// specified as a string as host:port pair (multiple entries are separated with commas)
	// which acts as the central registry for volumes
	Registry string `protobuf:"bytes,1,opt,name=registry" json:"registry,omitempty"`
	// Volume is a string that references an already created Quobyte volume by name.
	Volume string `protobuf:"bytes,2,opt,name=volume" json:"volume,omitempty"`
	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
	// Defaults to false.
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
	// User to map volume access to
	// Defaults to serivceaccount user
	User string `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	// Group to map volume access to
	// Default is no group
	Group string `protobuf:"bytes,5,opt,name=group" json:"group,omitempty"`
}

func (m *QuobyteVolumeSource) Reset()                    { *m = QuobyteVolumeSource{} }
func (m *QuobyteVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*QuobyteVolumeSource) ProtoMessage()               {}
func (*QuobyteVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
type AzureDiskVolumeSource struct {
	// The Name of the data disk in the blob storage
	DiskName string `protobuf:"bytes,1,opt,name=diskName" json:"diskName,omitempty"`
	// The URI the data disk in the blob storage
	DiskURI string `protobuf:"bytes,2,opt,name=diskURI" json:"diskURI,omitempty"`
	// Host Caching mode: None, Read Only, Read Write.
	CachingMode string `protobuf:"bytes,3,opt,name=cachingMode" json:"cachingMode,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType string `protobuf:"bytes,4,opt,name=fsType" json:"fsType,omitempty"`
	// Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly bool `protobuf:"varint,5,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *AzureDiskVolumeSource) Reset()                    { *m = AzureDiskVolumeSource{} }
func (m *AzureDiskVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*AzureDiskVolumeSource) ProtoMessage()               {}
func (*AzureDiskVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

// Represents a cinder volume resource in Openstack.
// A Cinder volume must exist before mounting to a container.
// The volume must also be in the same region as the kubelet.
// Cinder volumes support ownership management and SELinux relabeling.
type CinderVolumeSource struct {
	// volume id used to identify the volume in cinder
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	FsType string `protobuf:"bytes,2,opt,name=fsType" json:"fsType,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: http://releases.k8s.io/release-1.4/examples/mysql-cinder-pd/README.md
	ReadOnly bool `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *CinderVolumeSource) Reset()                    { *m = CinderVolumeSource{} }
func (m *CinderVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*CinderVolumeSource) ProtoMessage()               {}
func (*CinderVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

// Represents a Ceph Filesystem mount that lasts the lifetime of a pod
// Cephfs volumes do not support ownership management or SELinux relabeling.
type CephFSVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// Optional: User is the rados user name, default is admin
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	User string `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	SecretFile string `protobuf:"bytes,4,opt,name=secretFile" json:"secretFile,omitempty"`
	// Optional: SecretRef is reference to the authentication secret for User, default is empty.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	SecretRef *ObjectReference `protobuf:"bytes,5,opt,name=secretRef" json:"secretRef,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: http://releases.k8s.io/release-1.4/examples/volumes/cephfs/README.md#how-to-use-it
	ReadOnly bool `protobuf:"varint,6,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *CephFSVolumeSource) Reset()                    { *m = CephFSVolumeSource{} }
func (m *CephFSVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*CephFSVolumeSource) ProtoMessage()               {}
func (*CephFSVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CephFSVolumeSource) GetSecretRef() *ObjectReference {
	if m != nil {
		return m.SecretRef
	}
	return nil
}

func init() {
	proto.RegisterType((*ListResourceRequest)(nil), "appscode.kubernetes.v1beta2.ListResourceRequest")
	proto.RegisterType((*ListResourceRequest_PodAncestor)(nil), "appscode.kubernetes.v1beta2.ListResourceRequest.PodAncestor")
	proto.RegisterType((*ListResourceResponse)(nil), "appscode.kubernetes.v1beta2.ListResourceResponse")
	proto.RegisterType((*DescribeResourceRequest)(nil), "appscode.kubernetes.v1beta2.DescribeResourceRequest")
	proto.RegisterType((*DescribeResourceResponse)(nil), "appscode.kubernetes.v1beta2.DescribeResourceResponse")
	proto.RegisterType((*UpdateResourceRequest)(nil), "appscode.kubernetes.v1beta2.UpdateResourceRequest")
	proto.RegisterType((*ConfigMapEditRequest)(nil), "appscode.kubernetes.v1beta2.ConfigMapEditRequest")
	proto.RegisterType((*SecretEditRequest)(nil), "appscode.kubernetes.v1beta2.SecretEditRequest")
	proto.RegisterType((*CopyResourceRequest)(nil), "appscode.kubernetes.v1beta2.CopyResourceRequest")
	proto.RegisterType((*CreateResourceRequest)(nil), "appscode.kubernetes.v1beta2.CreateResourceRequest")
	proto.RegisterType((*DeleteResourceRequest)(nil), "appscode.kubernetes.v1beta2.DeleteResourceRequest")
	proto.RegisterType((*KubeResourceList)(nil), "appscode.kubernetes.v1beta2.KubeResourceList")
	proto.RegisterType((*KubeResourceList_Apps)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Apps")
	proto.RegisterType((*KubeResourceList_ConfigMaps)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.ConfigMaps")
	proto.RegisterType((*KubeResourceList_DaemonSets)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.DaemonSets")
	proto.RegisterType((*KubeResourceList_Deployments)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Deployments")
	proto.RegisterType((*KubeResourceList_Jobs)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Jobs")
	proto.RegisterType((*KubeResourceList_Namespaces)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Namespaces")
	proto.RegisterType((*KubeResourceList_Nodes)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Nodes")
	proto.RegisterType((*KubeResourceList_PetSets)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.PetSets")
	proto.RegisterType((*KubeResourceList_Pods)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Pods")
	proto.RegisterType((*KubeResourceList_ReplicaSets)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.ReplicaSets")
	proto.RegisterType((*KubeResourceList_Services)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Services")
	proto.RegisterType((*KubeResourceList_Secrets)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.Secrets")
	proto.RegisterType((*KubeResourceList_ReplicationControllers)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.ReplicationControllers")
	proto.RegisterType((*KubeResourceList_StorageClasses)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.StorageClasses")
	proto.RegisterType((*KubeResourceList_PersistentVolumes)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.PersistentVolumes")
	proto.RegisterType((*KubeResourceList_PersistentVolumeClaims)(nil), "appscode.kubernetes.v1beta2.KubeResourceList.PersistentVolumeClaims")
	proto.RegisterType((*KubeResource)(nil), "appscode.kubernetes.v1beta2.KubeResource")
	proto.RegisterType((*Meta)(nil), "appscode.kubernetes.v1beta2.Meta")
	proto.RegisterType((*KubeObject)(nil), "appscode.kubernetes.v1beta2.KubeObject")
	proto.RegisterType((*App)(nil), "appscode.kubernetes.v1beta2.App")
	proto.RegisterType((*PodSpec)(nil), "appscode.kubernetes.v1beta2.PodSpec")
	proto.RegisterType((*PodSpec_Container)(nil), "appscode.kubernetes.v1beta2.PodSpec.Container")
	proto.RegisterType((*PodSpec_Container_VolumeMount)(nil), "appscode.kubernetes.v1beta2.PodSpec.Container.VolumeMount")
	proto.RegisterType((*PodSpec_Volume)(nil), "appscode.kubernetes.v1beta2.PodSpec.Volume")
	proto.RegisterType((*Raw)(nil), "appscode.kubernetes.v1beta2.Raw")
	proto.RegisterType((*ConfigMap)(nil), "appscode.kubernetes.v1beta2.ConfigMap")
	proto.RegisterType((*Job)(nil), "appscode.kubernetes.v1beta2.Job")
	proto.RegisterType((*Job_Spec)(nil), "appscode.kubernetes.v1beta2.Job.Spec")
	proto.RegisterType((*Job_Status)(nil), "appscode.kubernetes.v1beta2.Job.Status")
	proto.RegisterType((*Namespace)(nil), "appscode.kubernetes.v1beta2.Namespace")
	proto.RegisterType((*Namespace_Status)(nil), "appscode.kubernetes.v1beta2.Namespace.Status")
	proto.RegisterType((*Node)(nil), "appscode.kubernetes.v1beta2.Node")
	proto.RegisterType((*Node_Spec)(nil), "appscode.kubernetes.v1beta2.Node.Spec")
	proto.RegisterType((*Node_Status)(nil), "appscode.kubernetes.v1beta2.Node.Status")
	proto.RegisterType((*Node_Status_Capacity)(nil), "appscode.kubernetes.v1beta2.Node.Status.Capacity")
	proto.RegisterType((*Node_Status_NodeInfo)(nil), "appscode.kubernetes.v1beta2.Node.Status.NodeInfo")
	proto.RegisterType((*Pod)(nil), "appscode.kubernetes.v1beta2.Pod")
	proto.RegisterType((*Pod_Status)(nil), "appscode.kubernetes.v1beta2.Pod.Status")
	proto.RegisterType((*PersistentVolume)(nil), "appscode.kubernetes.v1beta2.PersistentVolume")
	proto.RegisterType((*PersistentVolume_PersistentVolumeSpec)(nil), "appscode.kubernetes.v1beta2.PersistentVolume.PersistentVolumeSpec")
	proto.RegisterType((*PersistentVolume_PersistentVolumeStatus)(nil), "appscode.kubernetes.v1beta2.PersistentVolume.PersistentVolumeStatus")
	proto.RegisterType((*PersistentVolumeClaim)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeClaim")
	proto.RegisterType((*PersistentVolumeClaim_PersistentVolumeClaimSpec)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeClaim.PersistentVolumeClaimSpec")
	proto.RegisterType((*PersistentVolumeClaim_PersistentVolumeClaimSpec_ResourceRequirements)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeClaim.PersistentVolumeClaimSpec.ResourceRequirements")
	proto.RegisterType((*PersistentVolumeClaim_PersistentVolumeClaimStatus)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeClaim.PersistentVolumeClaimStatus")
	proto.RegisterType((*ObjectReference)(nil), "appscode.kubernetes.v1beta2.ObjectReference")
	proto.RegisterType((*Service)(nil), "appscode.kubernetes.v1beta2.Service")
	proto.RegisterType((*Service_Spec)(nil), "appscode.kubernetes.v1beta2.Service.Spec")
	proto.RegisterType((*Service_Spec_Port)(nil), "appscode.kubernetes.v1beta2.Service.Spec.Port")
	proto.RegisterType((*Service_Status)(nil), "appscode.kubernetes.v1beta2.Service.Status")
	proto.RegisterType((*Service_Status_LoadBalancerIngress)(nil), "appscode.kubernetes.v1beta2.Service.Status.LoadBalancerIngress")
	proto.RegisterType((*Secret)(nil), "appscode.kubernetes.v1beta2.Secret")
	proto.RegisterType((*ReplicationController)(nil), "appscode.kubernetes.v1beta2.ReplicationController")
	proto.RegisterType((*ReplicationController_Spec)(nil), "appscode.kubernetes.v1beta2.ReplicationController.Spec")
	proto.RegisterType((*ReplicationController_Status)(nil), "appscode.kubernetes.v1beta2.ReplicationController.Status")
	proto.RegisterType((*ReplicaSet)(nil), "appscode.kubernetes.v1beta2.ReplicaSet")
	proto.RegisterType((*ReplicaSet_Spec)(nil), "appscode.kubernetes.v1beta2.ReplicaSet.Spec")
	proto.RegisterType((*ReplicaSet_Status)(nil), "appscode.kubernetes.v1beta2.ReplicaSet.Status")
	proto.RegisterType((*DaemonSet)(nil), "appscode.kubernetes.v1beta2.DaemonSet")
	proto.RegisterType((*DaemonSet_Spec)(nil), "appscode.kubernetes.v1beta2.DaemonSet.Spec")
	proto.RegisterType((*DaemonSet_Status)(nil), "appscode.kubernetes.v1beta2.DaemonSet.Status")
	proto.RegisterType((*Deployment)(nil), "appscode.kubernetes.v1beta2.Deployment")
	proto.RegisterType((*Deployment_Spec)(nil), "appscode.kubernetes.v1beta2.Deployment.Spec")
	proto.RegisterType((*Deployment_Status)(nil), "appscode.kubernetes.v1beta2.Deployment.Status")
	proto.RegisterType((*PetSet)(nil), "appscode.kubernetes.v1beta2.PetSet")
	proto.RegisterType((*PetSet_Spec)(nil), "appscode.kubernetes.v1beta2.PetSet.Spec")
	proto.RegisterType((*PetSet_Status)(nil), "appscode.kubernetes.v1beta2.PetSet.Status")
	proto.RegisterType((*StorageClass)(nil), "appscode.kubernetes.v1beta2.StorageClass")
	proto.RegisterType((*LabelSelector)(nil), "appscode.kubernetes.v1beta2.LabelSelector")
	proto.RegisterType((*Event)(nil), "appscode.kubernetes.v1beta2.Event")
	proto.RegisterType((*EventSource)(nil), "appscode.kubernetes.v1beta2.EventSource")
	proto.RegisterType((*Metrics)(nil), "appscode.kubernetes.v1beta2.Metrics")
	proto.RegisterType((*Metrics_DataPoint)(nil), "appscode.kubernetes.v1beta2.Metrics.DataPoint")
	proto.RegisterType((*PersistentVolumeRegisterRequest)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeRegisterRequest")
	proto.RegisterType((*PersistentVolumeUnRegisterRequest)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeUnRegisterRequest")
	proto.RegisterType((*PersistentVolumeClaimRegisterRequest)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeClaimRegisterRequest")
	proto.RegisterType((*PersistentVolumeClaimUnRegisterRequest)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeClaimUnRegisterRequest")
	proto.RegisterType((*PersistentVolumeSource)(nil), "appscode.kubernetes.v1beta2.PersistentVolumeSource")
	proto.RegisterType((*AWSElasticBlockStoreVolumeSource)(nil), "appscode.kubernetes.v1beta2.AWSElasticBlockStoreVolumeSource")
	proto.RegisterType((*HostPathVolumeSource)(nil), "appscode.kubernetes.v1beta2.HostPathVolumeSource")
	proto.RegisterType((*NFSVolumeSource)(nil), "appscode.kubernetes.v1beta2.NFSVolumeSource")
	proto.RegisterType((*FCVolumeSource)(nil), "appscode.kubernetes.v1beta2.FCVolumeSource")
	proto.RegisterType((*FlexVolumeSource)(nil), "appscode.kubernetes.v1beta2.FlexVolumeSource")
	proto.RegisterType((*FlockerVolumeSource)(nil), "appscode.kubernetes.v1beta2.FlockerVolumeSource")
	proto.RegisterType((*GCEPersistentDiskVolumeSource)(nil), "appscode.kubernetes.v1beta2.GCEPersistentDiskVolumeSource")
	proto.RegisterType((*GitRepoVolumeSource)(nil), "appscode.kubernetes.v1beta2.GitRepoVolumeSource")
	proto.RegisterType((*GlusterfsVolumeSource)(nil), "appscode.kubernetes.v1beta2.GlusterfsVolumeSource")
	proto.RegisterType((*RBDVolumeSource)(nil), "appscode.kubernetes.v1beta2.RBDVolumeSource")
	proto.RegisterType((*ISCSIVolumeSource)(nil), "appscode.kubernetes.v1beta2.ISCSIVolumeSource")
	proto.RegisterType((*AzureFileVolumeSource)(nil), "appscode.kubernetes.v1beta2.AzureFileVolumeSource")
	proto.RegisterType((*VsphereVirtualDiskVolumeSource)(nil), "appscode.kubernetes.v1beta2.VsphereVirtualDiskVolumeSource")
	proto.RegisterType((*QuobyteVolumeSource)(nil), "appscode.kubernetes.v1beta2.QuobyteVolumeSource")
	proto.RegisterType((*AzureDiskVolumeSource)(nil), "appscode.kubernetes.v1beta2.AzureDiskVolumeSource")
	proto.RegisterType((*CinderVolumeSource)(nil), "appscode.kubernetes.v1beta2.CinderVolumeSource")
	proto.RegisterType((*CephFSVolumeSource)(nil), "appscode.kubernetes.v1beta2.CephFSVolumeSource")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Clients service

type ClientsClient interface {
	List(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error)
	Describe(ctx context.Context, in *DescribeResourceRequest, opts ...grpc.CallOption) (*DescribeResourceResponse, error)
	Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Delete(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Update(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Copy(ctx context.Context, in *CopyResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	EditConfigMap(ctx context.Context, in *ConfigMapEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	EditSecret(ctx context.Context, in *SecretEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolume(ctx context.Context, in *PersistentVolumeRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolume(ctx context.Context, in *PersistentVolumeUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
}

type clientsClient struct {
	cc *grpc.ClientConn
}

func NewClientsClient(cc *grpc.ClientConn) ClientsClient {
	return &clientsClient{cc}
}

func (c *clientsClient) List(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ListResourceResponse, error) {
	out := new(ListResourceResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Describe(ctx context.Context, in *DescribeResourceRequest, opts ...grpc.CallOption) (*DescribeResourceResponse, error) {
	out := new(DescribeResourceResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Create(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Delete(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Update(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) Copy(ctx context.Context, in *CopyResourceRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/Copy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) EditConfigMap(ctx context.Context, in *ConfigMapEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/EditConfigMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) EditSecret(ctx context.Context, in *SecretEditRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/EditSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) RegisterPersistentVolume(ctx context.Context, in *PersistentVolumeRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/RegisterPersistentVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) UnregisterPersistentVolume(ctx context.Context, in *PersistentVolumeUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/UnregisterPersistentVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) RegisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/RegisterPersistentVolumeClaim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsClient) UnregisterPersistentVolumeClaim(ctx context.Context, in *PersistentVolumeClaimUnRegisterRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta2.Clients/UnregisterPersistentVolumeClaim", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clients service

type ClientsServer interface {
	List(context.Context, *ListResourceRequest) (*ListResourceResponse, error)
	Describe(context.Context, *DescribeResourceRequest) (*DescribeResourceResponse, error)
	Create(context.Context, *CreateResourceRequest) (*appscode_dtypes.VoidResponse, error)
	Delete(context.Context, *DeleteResourceRequest) (*appscode_dtypes.VoidResponse, error)
	Update(context.Context, *UpdateResourceRequest) (*appscode_dtypes.VoidResponse, error)
	Copy(context.Context, *CopyResourceRequest) (*appscode_dtypes.VoidResponse, error)
	EditConfigMap(context.Context, *ConfigMapEditRequest) (*appscode_dtypes.VoidResponse, error)
	EditSecret(context.Context, *SecretEditRequest) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolume(context.Context, *PersistentVolumeRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolume(context.Context, *PersistentVolumeUnRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	RegisterPersistentVolumeClaim(context.Context, *PersistentVolumeClaimRegisterRequest) (*appscode_dtypes.VoidResponse, error)
	UnregisterPersistentVolumeClaim(context.Context, *PersistentVolumeClaimUnRegisterRequest) (*appscode_dtypes.VoidResponse, error)
}

func RegisterClientsServer(s *grpc.Server, srv ClientsServer) {
	s.RegisterService(&_Clients_serviceDesc, srv)
}

func _Clients_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).List(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Describe(ctx, req.(*DescribeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Create(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Delete(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Update(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/Copy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).Copy(ctx, req.(*CopyResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_EditConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigMapEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).EditConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/EditConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).EditConfigMap(ctx, req.(*ConfigMapEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_EditSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).EditSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/EditSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).EditSecret(ctx, req.(*SecretEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_RegisterPersistentVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).RegisterPersistentVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/RegisterPersistentVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).RegisterPersistentVolume(ctx, req.(*PersistentVolumeRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_UnregisterPersistentVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeUnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).UnregisterPersistentVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/UnregisterPersistentVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).UnregisterPersistentVolume(ctx, req.(*PersistentVolumeUnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_RegisterPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).RegisterPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/RegisterPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).RegisterPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clients_UnregisterPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersistentVolumeClaimUnRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).UnregisterPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta2.Clients/UnregisterPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).UnregisterPersistentVolumeClaim(ctx, req.(*PersistentVolumeClaimUnRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clients_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta2.Clients",
	HandlerType: (*ClientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clients_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Clients_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clients_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clients_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clients_Update_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _Clients_Copy_Handler,
		},
		{
			MethodName: "EditConfigMap",
			Handler:    _Clients_EditConfigMap_Handler,
		},
		{
			MethodName: "EditSecret",
			Handler:    _Clients_EditSecret_Handler,
		},
		{
			MethodName: "RegisterPersistentVolume",
			Handler:    _Clients_RegisterPersistentVolume_Handler,
		},
		{
			MethodName: "UnregisterPersistentVolume",
			Handler:    _Clients_UnregisterPersistentVolume_Handler,
		},
		{
			MethodName: "RegisterPersistentVolumeClaim",
			Handler:    _Clients_RegisterPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "UnregisterPersistentVolumeClaim",
			Handler:    _Clients_UnregisterPersistentVolumeClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("client.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x5c, 0x5d, 0x8c, 0x1c, 0x57,
	0x56, 0x9e, 0xea, 0xbf, 0xe9, 0x3e, 0x3d, 0x7f, 0xbe, 0x1e, 0xdb, 0xbd, 0x9d, 0x4d, 0xe2, 0xf4,
	0x26, 0x8e, 0xe3, 0xc4, 0x3d, 0xf1, 0x64, 0x13, 0xc7, 0x8e, 0xff, 0xc6, 0x33, 0xb6, 0x67, 0x6c,
	0x8f, 0xd3, 0xae, 0xb1, 0x93, 0xdd, 0x25, 0x49, 0x6f, 0x75, 0xd5, 0x9d, 0x99, 0xca, 0x54, 0x57,
	0x55, 0xaa, 0xaa, 0xc7, 0x99, 0x44, 0x61, 0x61, 0xa5, 0x68, 0x09, 0xe1, 0x9f, 0x95, 0x22, 0x5e,
	0x56, 0x2c, 0x20, 0x04, 0x62, 0xd1, 0x4a, 0x88, 0xc0, 0xcb, 0xbe, 0x80, 0x78, 0x40, 0xe2, 0x81,
	0x07, 0x78, 0xd9, 0x07, 0x04, 0x42, 0xa0, 0x15, 0xfb, 0x8c, 0x90, 0x90, 0x78, 0x40, 0xf7, 0xaf,
	0xea, 0x56, 0x75, 0x4f, 0x77, 0x55, 0x7b, 0x1c, 0xd0, 0xbe, 0xb4, 0xfa, 0xfe, 0x9c, 0xaf, 0xce,
	0x39, 0xf7, 0xdc, 0x73, 0xcf, 0x3d, 0xf7, 0x56, 0xc1, 0x94, 0x6e, 0x99, 0xd8, 0x0e, 0x9a, 0xae,
	0xe7, 0x04, 0x0e, 0x7a, 0x4c, 0x73, 0x5d, 0x5f, 0x77, 0x0c, 0xdc, 0xdc, 0xe9, 0x75, 0xb0, 0x67,
	0xe3, 0x00, 0xfb, 0xcd, 0xdd, 0x33, 0x1d, 0x1c, 0x68, 0x8b, 0xf5, 0x2f, 0x6f, 0x39, 0xce, 0x96,
	0x85, 0x17, 0x34, 0xd7, 0x5c, 0xd0, 0x6c, 0xdb, 0x09, 0xb4, 0xc0, 0x74, 0x6c, 0x9f, 0x91, 0xd6,
	0x9f, 0x10, 0xa4, 0xfb, 0xb4, 0x3f, 0x19, 0x6b, 0x37, 0x82, 0x3d, 0x17, 0xfb, 0x0b, 0xf4, 0x97,
	0x77, 0x38, 0x11, 0x07, 0xb0, 0xb0, 0x17, 0x2c, 0xb0, 0x47, 0x9f, 0x61, 0x25, 0xd6, 0xaf, 0xf1,
	0x7b, 0x39, 0x38, 0x7c, 0xdb, 0xf4, 0x03, 0x15, 0xfb, 0x4e, 0xcf, 0xd3, 0xb1, 0x8a, 0xdf, 0xeb,
	0x61, 0x3f, 0x40, 0x35, 0x98, 0xd4, 0xad, 0x9e, 0x1f, 0x60, 0xaf, 0xa6, 0x1c, 0x57, 0x4e, 0x56,
	0x54, 0x51, 0x44, 0x08, 0x0a, 0xe4, 0x41, 0xb5, 0x1c, 0xad, 0xa6, 0xff, 0xd1, 0x97, 0xa1, 0x62,
	0x6b, 0x5d, 0xec, 0xbb, 0x9a, 0x8e, 0x6b, 0x79, 0xda, 0x10, 0x55, 0xa0, 0x67, 0x61, 0xd6, 0xb4,
	0x75, 0xab, 0x67, 0xe0, 0x76, 0x17, 0x07, 0x9e, 0xa9, 0xfb, 0xb5, 0xc2, 0x71, 0xe5, 0x64, 0x59,
	0x9d, 0xe1, 0xd5, 0xeb, 0xac, 0x16, 0xb5, 0x61, 0xca, 0x75, 0x8c, 0xb6, 0x66, 0xeb, 0xd8, 0x0f,
	0x1c, 0xaf, 0x56, 0x3c, 0xae, 0x9c, 0xac, 0x2e, 0x5e, 0x68, 0x0e, 0xd1, 0x63, 0x73, 0x00, 0xf3,
	0xcd, 0x96, 0x63, 0x2c, 0x71, 0x0c, 0xb5, 0xea, 0x46, 0x85, 0xfa, 0xcb, 0x50, 0x95, 0xda, 0x42,
	0x51, 0x14, 0x49, 0x14, 0x04, 0x05, 0xc2, 0xb9, 0x10, 0x8f, 0xfc, 0x6f, 0x7c, 0x57, 0x81, 0xf9,
	0xf8, 0x73, 0x7c, 0xd7, 0xb1, 0x7d, 0x8c, 0x16, 0xa0, 0xe4, 0x07, 0x5a, 0xd0, 0xf3, 0x29, 0x44,
	0x75, 0xf1, 0x58, 0xc4, 0x2a, 0x1b, 0x93, 0xe6, 0x06, 0x6d, 0x56, 0x79, 0x37, 0x74, 0x0b, 0x2a,
	0x1e, 0x07, 0xf1, 0xe9, 0x23, 0xaa, 0x8b, 0xa7, 0x87, 0x8a, 0x77, 0xab, 0xd7, 0xc1, 0xe2, 0xb1,
	0x94, 0x85, 0x88, 0xbe, 0xf1, 0xe7, 0x0a, 0x1c, 0x5b, 0xc1, 0xbe, 0xee, 0x99, 0x51, 0x9f, 0x47,
	0x31, 0x7e, 0x42, 0x25, 0x85, 0x48, 0x25, 0x68, 0x0e, 0xf2, 0x9e, 0xf6, 0x80, 0x8e, 0x50, 0x45,
	0x25, 0x7f, 0x07, 0x8d, 0x72, 0x69, 0xd0, 0x28, 0x37, 0x7e, 0x4b, 0x81, 0x5a, 0x3f, 0xdb, 0xe3,
	0x6a, 0xf4, 0x1a, 0x94, 0x85, 0x46, 0xb8, 0x42, 0x9f, 0x4b, 0xad, 0x50, 0x35, 0x24, 0x6d, 0xfc,
	0x89, 0x02, 0x47, 0xee, 0xbb, 0x86, 0x16, 0x7c, 0xe1, 0x9a, 0x5c, 0x8c, 0x34, 0x59, 0x5d, 0x3c,
	0x3e, 0x94, 0x77, 0x55, 0x7b, 0x40, 0x75, 0xdd, 0xf8, 0x6e, 0x1e, 0xe6, 0x97, 0x1d, 0x7b, 0xd3,
	0xdc, 0x5a, 0xd7, 0xdc, 0x6b, 0x86, 0x19, 0x8c, 0x66, 0x36, 0xc6, 0x58, 0x6e, 0x3f, 0xc6, 0xf2,
	0x12, 0x63, 0xb7, 0x21, 0xaf, 0x19, 0x46, 0xad, 0x70, 0x3c, 0x7f, 0xb2, 0xba, 0x78, 0x7e, 0x28,
	0x63, 0x83, 0x78, 0x69, 0x2e, 0x19, 0xc6, 0x35, 0x3b, 0xf0, 0xf6, 0x54, 0x02, 0x83, 0xee, 0x43,
	0xa9, 0x47, 0xf5, 0x5b, 0x2b, 0x52, 0xc0, 0x8b, 0xd9, 0x01, 0xd9, 0xf8, 0x30, 0x4c, 0x0e, 0x46,
	0x04, 0x36, 0xb0, 0x85, 0x03, 0x6c, 0xd4, 0x4a, 0xc7, 0xf3, 0x44, 0x60, 0x5e, 0xac, 0xbf, 0x02,
	0x65, 0xc1, 0x01, 0xb1, 0xd6, 0x1d, 0xbc, 0xc7, 0x55, 0x42, 0xfe, 0xa2, 0x79, 0x28, 0xee, 0x6a,
	0x56, 0x4f, 0xa8, 0x82, 0x15, 0xce, 0xe7, 0x5e, 0x55, 0xea, 0xe7, 0xa0, 0x2a, 0x3d, 0x28, 0x0b,
	0x69, 0xe3, 0xd3, 0x3c, 0x1c, 0xda, 0xc0, 0xba, 0x87, 0x83, 0x47, 0x35, 0x26, 0x6b, 0xf2, 0x98,
	0x9c, 0x1d, 0xaa, 0xc2, 0x3e, 0x46, 0x12, 0x03, 0xa2, 0x26, 0x06, 0xe4, 0x7c, 0x46, 0xb4, 0xff,
	0xf7, 0xa3, 0xf1, 0x7d, 0x05, 0x0e, 0x2f, 0x3b, 0xee, 0x5e, 0x72, 0x42, 0x5f, 0x86, 0x12, 0xf7,
	0x17, 0xcc, 0xc5, 0x3c, 0x3b, 0xd2, 0x5f, 0xbc, 0xde, 0x79, 0x17, 0xeb, 0x81, 0xca, 0xc9, 0xd0,
	0x1a, 0x54, 0x0d, 0xec, 0x07, 0xa6, 0x4d, 0x97, 0x64, 0xee, 0x75, 0x52, 0xa3, 0xc8, 0xb4, 0x8d,
	0xcf, 0x14, 0x38, 0xb2, 0xec, 0xe1, 0x87, 0x76, 0x3b, 0x83, 0x1c, 0xcb, 0x05, 0xc9, 0x33, 0xa6,
	0xf5, 0x2e, 0x91, 0x43, 0x7c, 0x00, 0x47, 0x56, 0xe8, 0xd8, 0x7d, 0xc1, 0xfe, 0xb0, 0xf1, 0xe3,
	0x23, 0x30, 0x97, 0x5c, 0xf5, 0x06, 0xae, 0xd4, 0xab, 0x50, 0x20, 0xe2, 0x70, 0xfd, 0x2f, 0x66,
	0x5a, 0x46, 0x9b, 0x4b, 0xae, 0xeb, 0xaf, 0x4e, 0xa8, 0x14, 0x01, 0xfd, 0x1c, 0x54, 0x75, 0xea,
	0x70, 0xda, 0x5d, 0xcd, 0xf5, 0x29, 0x9b, 0xd5, 0xc5, 0x57, 0xb3, 0x01, 0x86, 0x1e, 0x8b, 0xc0,
	0x82, 0x1e, 0x96, 0x08, 0xb8, 0xa1, 0xe1, 0xae, 0x63, 0xb7, 0x7d, 0x1c, 0xb0, 0xc8, 0x27, 0x33,
	0xf8, 0x0a, 0x05, 0xd8, 0xc0, 0x01, 0x05, 0x37, 0xc2, 0x12, 0x7a, 0x9b, 0x98, 0xa2, 0x6b, 0x39,
	0x7b, 0x5d, 0x6c, 0x07, 0x3e, 0x1f, 0xe6, 0x73, 0x19, 0xc1, 0x23, 0x80, 0xd5, 0x09, 0x55, 0xc6,
	0x23, 0x2a, 0x7e, 0xd7, 0xe9, 0xb0, 0x85, 0x3c, 0xb3, 0x8a, 0x6f, 0x3a, 0x1d, 0xaa, 0x62, 0x82,
	0x80, 0xbe, 0x01, 0x10, 0x0e, 0xbb, 0x5f, 0x9b, 0x1c, 0x47, 0x09, 0x77, 0x42, 0x7a, 0xa2, 0x84,
	0x08, 0x0d, 0xdd, 0x82, 0xa2, 0xed, 0x18, 0xd8, 0xaf, 0x95, 0x29, 0xec, 0x4b, 0x19, 0x61, 0x09,
	0xe9, 0xea, 0x84, 0xca, 0x30, 0x90, 0x0a, 0x65, 0x17, 0x07, 0x6c, 0xac, 0x2a, 0x14, 0xef, 0xe5,
	0x6c, 0x78, 0x2d, 0x1c, 0xf0, 0x81, 0x9a, 0x74, 0xd9, 0x5f, 0xa2, 0x46, 0xd7, 0x31, 0xfc, 0x1a,
	0x8c, 0xa3, 0xc6, 0x96, 0x63, 0x50, 0x35, 0x12, 0x04, 0xf4, 0x0e, 0x4c, 0x79, 0xd8, 0xb5, 0x4c,
	0x5d, 0x63, 0x1c, 0x56, 0xc7, 0x19, 0x70, 0x95, 0x21, 0x70, 0x2e, 0xab, 0x5e, 0x54, 0x44, 0xf7,
	0xa0, 0xec, 0x63, 0x6f, 0xd7, 0x24, 0x83, 0x34, 0x45, 0xb1, 0x5f, 0xc9, 0x86, 0xbd, 0xc1, 0xa9,
	0x57, 0x27, 0xd4, 0x10, 0x09, 0xdd, 0x85, 0x49, 0x9f, 0xae, 0x1f, 0x7e, 0x6d, 0x7a, 0x1c, 0x95,
	0xb2, 0xc5, 0x87, 0xaa, 0x94, 0xe3, 0xa0, 0x6f, 0xc1, 0x31, 0xce, 0x37, 0xf1, 0xa3, 0x6d, 0xdd,
	0xb1, 0x03, 0xcf, 0xb1, 0x2c, 0xec, 0xf9, 0xb5, 0x19, 0xfa, 0x88, 0x95, 0xb1, 0x74, 0x42, 0xc0,
	0x96, 0x23, 0xac, 0xd5, 0x09, 0xf5, 0xa8, 0x37, 0xb0, 0x05, 0x6d, 0xc1, 0x2c, 0xd9, 0x43, 0x68,
	0x5b, 0xb8, 0xad, 0x5b, 0x9a, 0xef, 0x63, 0xbf, 0x36, 0x9b, 0x62, 0xbb, 0xd2, 0x2f, 0x1b, 0x03,
	0x59, 0x66, 0x18, 0xab, 0x13, 0xea, 0x8c, 0x1f, 0xab, 0x41, 0x2e, 0x20, 0x17, 0x7b, 0xbe, 0xe9,
	0x07, 0xd8, 0x0e, 0xda, 0xbb, 0x8e, 0xd5, 0xeb, 0x62, 0xbf, 0x36, 0x47, 0x9f, 0x75, 0x39, 0xab,
	0x69, 0x0a, 0x9c, 0x37, 0x18, 0xcc, 0xea, 0x84, 0x7a, 0xc8, 0x4d, 0x56, 0xa2, 0x5f, 0x50, 0xa0,
	0xd6, 0xf7, 0x48, 0x22, 0xa5, 0xd9, 0xf5, 0x6b, 0x87, 0xc6, 0xd1, 0x6e, 0xf2, 0xc1, 0xcb, 0x14,
	0x8b, 0x68, 0xd7, 0x1d, 0xd8, 0x52, 0xbf, 0x04, 0x05, 0xe2, 0xa1, 0xd1, 0x2b, 0x50, 0x34, 0x03,
	0xdc, 0x25, 0xbb, 0x81, 0xfc, 0xc8, 0x05, 0x6c, 0xc9, 0x75, 0x55, 0xd6, 0xbd, 0x7e, 0x13, 0x20,
	0x72, 0xc8, 0xe8, 0x42, 0x1c, 0xe5, 0x44, 0xba, 0xd0, 0x53, 0xc2, 0x8a, 0xfc, 0x6f, 0x36, 0xac,
	0x90, 0x4e, 0x60, 0xdd, 0x86, 0xaa, 0xe4, 0x6e, 0xd1, 0xc5, 0x38, 0xd8, 0xf0, 0x18, 0x22, 0x22,
	0x14, 0x68, 0x97, 0xa0, 0x40, 0x9c, 0x6c, 0x36, 0x2d, 0xdd, 0x74, 0x3a, 0x92, 0x64, 0x91, 0x53,
	0xcd, 0x26, 0x59, 0x48, 0x27, 0xb0, 0xae, 0x40, 0x91, 0x7a, 0x52, 0x74, 0x36, 0x0e, 0xf3, 0xd4,
	0x70, 0x18, 0xc7, 0x08, 0x11, 0x56, 0x60, 0x92, 0xfb, 0x4e, 0x74, 0x2e, 0x8e, 0xf1, 0x95, 0xa1,
	0x18, 0x8c, 0x48, 0xd2, 0x09, 0xf1, 0x98, 0xd9, 0x74, 0xd2, 0x72, 0x0c, 0x69, 0x84, 0x24, 0xff,
	0x98, 0x6d, 0x84, 0x22, 0x42, 0x81, 0x76, 0x1d, 0xca, 0xc2, 0x23, 0xa2, 0xf3, 0x71, 0xa8, 0xa7,
	0x47, 0xc4, 0xdb, 0x94, 0x4a, 0xd2, 0x0d, 0x77, 0x82, 0xd9, 0x74, 0xc3, 0x88, 0x04, 0x4a, 0x07,
	0x8e, 0x0e, 0xf6, 0x73, 0x68, 0x35, 0x0e, 0xba, 0x98, 0x46, 0xcc, 0x38, 0x86, 0x78, 0xc6, 0x5d,
	0x98, 0x89, 0xbb, 0x34, 0x74, 0x39, 0x8e, 0x3d, 0x7c, 0x7b, 0x2e, 0xd3, 0x0a, 0xc8, 0xaf, 0xc1,
	0xa1, 0x3e, 0xcf, 0x85, 0x96, 0xe3, 0xa8, 0xa7, 0x47, 0x98, 0x48, 0x9c, 0x5c, 0x52, 0xc8, 0x60,
	0xd7, 0x94, 0x4d, 0x21, 0x03, 0x31, 0xf8, 0x33, 0xae, 0x42, 0x14, 0x86, 0x37, 0xfe, 0x02, 0x60,
	0x4a, 0x76, 0x8e, 0x03, 0xe3, 0xda, 0xaf, 0x42, 0x5e, 0x73, 0x5d, 0x1e, 0xd6, 0x8e, 0xf4, 0x78,
	0xab, 0x13, 0x2a, 0xe9, 0x8e, 0x6e, 0x00, 0x44, 0x31, 0x2c, 0x0f, 0x61, 0x53, 0x3a, 0xba, 0xd5,
	0x09, 0xb5, 0x12, 0x06, 0xac, 0x04, 0x28, 0x8a, 0x57, 0x79, 0xb8, 0x9a, 0xd2, 0xcb, 0x11, 0xa0,
	0x30, 0x38, 0x45, 0x6b, 0x00, 0x51, 0x2c, 0xc9, 0x43, 0xd3, 0xb4, 0x1e, 0x8e, 0x86, 0xb9, 0x61,
	0x89, 0xa8, 0xe4, 0x5d, 0xa7, 0xc3, 0xc3, 0xd0, 0x91, 0xee, 0x8d, 0xa8, 0xe4, 0x5d, 0xa7, 0x83,
	0xae, 0xcb, 0x7b, 0x8f, 0xc9, 0x14, 0x82, 0x84, 0x4e, 0x8d, 0x08, 0x12, 0xed, 0x52, 0xce, 0x42,
	0x81, 0xc4, 0x86, 0x3c, 0xbc, 0x1c, 0xed, 0xd0, 0x48, 0xb4, 0x46, 0x08, 0xd0, 0x25, 0x98, 0xe4,
	0xb1, 0x24, 0x0f, 0x25, 0xd3, 0x38, 0xb2, 0xd5, 0x09, 0xb5, 0xc4, 0x02, 0x47, 0x22, 0xb6, 0xeb,
	0x18, 0x3c, 0x6c, 0x1c, 0xe9, 0xc1, 0x88, 0xd8, 0xae, 0x63, 0xa0, 0x9b, 0x50, 0x95, 0x62, 0x44,
	0x1e, 0x22, 0xa6, 0x75, 0x5c, 0x44, 0xf1, 0x51, 0x40, 0x88, 0xae, 0x90, 0xc8, 0x8d, 0x7a, 0x22,
	0x1e, 0x0e, 0xa6, 0xf2, 0x5a, 0x2c, 0x50, 0xa3, 0x7f, 0xd1, 0x45, 0x28, 0xb1, 0x98, 0x8d, 0x87,
	0x7e, 0x69, 0xfc, 0x15, 0x51, 0x01, 0x23, 0x42, 0x3b, 0x70, 0x74, 0x70, 0x9c, 0xc7, 0xc3, 0xbc,
	0x31, 0x3c, 0xd5, 0xea, 0x84, 0x7a, 0x64, 0x60, 0x50, 0x87, 0x5a, 0x30, 0x1d, 0x8b, 0xe9, 0x78,
	0x44, 0x97, 0xde, 0x63, 0xad, 0x4e, 0xa8, 0x53, 0x72, 0xf8, 0x86, 0xde, 0x82, 0x43, 0x7d, 0x91,
	0x14, 0x8f, 0xdd, 0xb2, 0x79, 0xac, 0xd5, 0x09, 0x75, 0x2e, 0x19, 0x2b, 0x21, 0x0b, 0x8e, 0xed,
	0x13, 0xa7, 0xf1, 0x30, 0x6d, 0x0c, 0xb7, 0x45, 0xb4, 0x33, 0x30, 0x28, 0x43, 0xe7, 0xa1, 0x84,
	0x77, 0xe9, 0x36, 0x13, 0x51, 0x9f, 0xd8, 0x18, 0x0a, 0x7e, 0x8d, 0x74, 0x55, 0x39, 0x85, 0x48,
	0x72, 0x1e, 0xce, 0x90, 0xe4, 0x8c, 0x39, 0xce, 0x1f, 0xe7, 0xa1, 0xb0, 0x8e, 0x03, 0x2d, 0xcc,
	0x18, 0x28, 0x52, 0xa2, 0x63, 0x78, 0x1a, 0xed, 0x71, 0x00, 0x1f, 0x5b, 0x9b, 0x6d, 0xcb, 0xb4,
	0x77, 0x7c, 0x91, 0x82, 0x20, 0x35, 0xb7, 0x49, 0x05, 0x7a, 0x0e, 0xe6, 0xc4, 0x53, 0xda, 0xbb,
	0x44, 0x6e, 0xc7, 0xe6, 0xe9, 0x88, 0x59, 0x51, 0xff, 0x06, 0xab, 0x26, 0x48, 0x3a, 0xcd, 0xd5,
	0x18, 0x6d, 0x8d, 0x39, 0xb4, 0xbc, 0x5a, 0xe1, 0x35, 0x4b, 0x01, 0x7a, 0x02, 0x60, 0x0b, 0xdb,
	0xd8, 0x63, 0x59, 0xa1, 0x12, 0x6d, 0x96, 0x6a, 0xd0, 0x35, 0x28, 0x59, 0x5a, 0x07, 0x5b, 0x64,
	0xfb, 0x3b, 0x7a, 0xc9, 0x22, 0xd2, 0x36, 0x6f, 0xd3, 0xfe, 0x3c, 0xc7, 0xc6, 0x88, 0xd1, 0x3d,
	0xa8, 0x4a, 0xe7, 0x41, 0xb5, 0x72, 0x8a, 0xf5, 0x89, 0x62, 0x2d, 0x45, 0x44, 0x0c, 0x50, 0x86,
	0xa9, 0x9f, 0x83, 0xaa, 0xf4, 0xb0, 0x4c, 0x29, 0xba, 0x4b, 0x30, 0x97, 0xc4, 0xce, 0x94, 0xa7,
	0xb3, 0x00, 0xa2, 0xf4, 0xd8, 0x23, 0x4f, 0x2f, 0xfd, 0x6e, 0x1e, 0xf2, 0x4b, 0xae, 0xfb, 0xc8,
	0xd3, 0xfa, 0xaf, 0xb0, 0x55, 0xbc, 0x98, 0xde, 0x6b, 0xb2, 0x75, 0x7c, 0x09, 0x8a, 0xcc, 0x52,
	0x4b, 0x74, 0x60, 0x9f, 0x1f, 0xb5, 0xfe, 0x37, 0xa9, 0x19, 0xb3, 0x11, 0x65, 0x94, 0x09, 0x3b,
	0x9d, 0x4c, 0xda, 0x29, 0x69, 0x66, 0xa2, 0xb6, 0x4d, 0x97, 0x2e, 0x6a, 0x15, 0xb5, 0xc2, 0x6b,
	0xd6, 0x5c, 0x74, 0x1d, 0xa6, 0x4c, 0xdd, 0xb4, 0xb7, 0xb4, 0xb6, 0x1f, 0x68, 0x01, 0xee, 0x5f,
	0xb9, 0xd8, 0xf1, 0x21, 0x3f, 0x4c, 0x6c, 0xae, 0xd1, 0xbe, 0x1b, 0xa4, 0xab, 0x5a, 0x35, 0xa3,
	0x42, 0xfd, 0x55, 0x80, 0x88, 0xb5, 0x4c, 0x06, 0xf1, 0x6b, 0x25, 0x98, 0x6c, 0x39, 0xc6, 0x86,
	0x8b, 0x75, 0x74, 0x0d, 0x26, 0xc5, 0x96, 0x57, 0x49, 0xa1, 0x10, 0x4e, 0xd6, 0xe4, 0x61, 0x9e,
	0xa0, 0x45, 0x77, 0x68, 0x74, 0x14, 0x68, 0xa6, 0x8d, 0x3d, 0xbf, 0x96, 0xa3, 0x48, 0xcd, 0x54,
	0x48, 0xcb, 0x82, 0x4c, 0x95, 0x10, 0xd0, 0x3b, 0x30, 0x43, 0x56, 0xf8, 0xb6, 0x8f, 0x2d, 0xac,
	0x07, 0x8e, 0x47, 0x1c, 0xcb, 0xe8, 0x94, 0xbc, 0xc0, 0x24, 0x41, 0xc2, 0x86, 0xa0, 0x64, 0x43,
	0x37, 0x6d, 0xcb, 0x75, 0xe8, 0x45, 0x98, 0xe7, 0x0b, 0x68, 0x5b, 0xd3, 0x75, 0xa7, 0x67, 0x07,
	0x6d, 0xc9, 0xc2, 0x10, 0x6f, 0x5b, 0x62, 0x4d, 0x24, 0x6c, 0x41, 0x8f, 0x41, 0x85, 0x72, 0x44,
	0xbb, 0xb1, 0x63, 0xb9, 0x32, 0xa9, 0xa0, 0x8d, 0x2f, 0x00, 0x32, 0xbb, 0x64, 0x59, 0x73, 0x7b,
	0x96, 0xd5, 0x16, 0xb9, 0x18, 0x96, 0xa2, 0x9f, 0xa3, 0x2d, 0xad, 0x9e, 0x65, 0xf1, 0x1d, 0x46,
	0xfd, 0x0a, 0xa0, 0x7e, 0x0e, 0x33, 0xb9, 0x84, 0xdf, 0xcc, 0x41, 0x25, 0x54, 0xdc, 0x40, 0x9f,
	0x3d, 0x0f, 0x45, 0xfa, 0x5c, 0x41, 0x4b, 0x0b, 0xa8, 0x0e, 0x65, 0xdd, 0xe9, 0x76, 0x35, 0xdb,
	0x60, 0x0a, 0xad, 0xa8, 0x61, 0x19, 0xb5, 0x61, 0x9a, 0xaf, 0x70, 0x5d, 0x22, 0xb4, 0x9f, 0xea,
	0x60, 0xaa, 0x6f, 0x14, 0xb9, 0x65, 0xac, 0x13, 0x08, 0x75, 0x6a, 0x37, 0x2a, 0xf8, 0xf5, 0xb7,
	0xa1, 0x2a, 0x35, 0x0e, 0xe4, 0xfa, 0x31, 0xa8, 0x78, 0x58, 0x33, 0xda, 0x8e, 0x6d, 0xed, 0x51,
	0xce, 0xcb, 0x6a, 0x99, 0x54, 0xbc, 0x6e, 0x5b, 0x7b, 0x64, 0x5e, 0x51, 0xce, 0xda, 0xae, 0x16,
	0x6c, 0x0b, 0x27, 0x41, 0x6b, 0x5a, 0x5a, 0xb0, 0x5d, 0x3f, 0x07, 0x25, 0xbe, 0x6c, 0xef, 0x83,
	0xbc, 0xed, 0xf8, 0x9c, 0x96, 0xe9, 0xa4, 0x4c, 0x2a, 0x08, 0x69, 0xe3, 0x0c, 0xe4, 0x55, 0xed,
	0x01, 0x3a, 0x0a, 0xa5, 0x4d, 0xc7, 0xeb, 0x6a, 0x01, 0xa7, 0xe4, 0x25, 0x82, 0x67, 0x68, 0x81,
	0x26, 0x1c, 0x16, 0xf9, 0xdf, 0xf8, 0x2b, 0x85, 0x8e, 0x00, 0x8f, 0xe9, 0x5f, 0x86, 0x42, 0x17,
	0x07, 0x1a, 0x3f, 0xf0, 0x78, 0x6a, 0xe4, 0x62, 0xa1, 0xd2, 0xee, 0x68, 0x25, 0x04, 0x26, 0x9a,
	0x7e, 0x31, 0xdd, 0x6e, 0xa2, 0xb9, 0xa2, 0x05, 0x1a, 0x33, 0x6a, 0x4a, 0x5d, 0x3f, 0x0b, 0x95,
	0xb0, 0x2a, 0x93, 0x1f, 0xf8, 0x9f, 0x3c, 0xe4, 0x6f, 0x3a, 0x9d, 0x71, 0xb9, 0x9f, 0x8b, 0xf6,
	0x51, 0x15, 0xe6, 0x5b, 0x5f, 0x83, 0x62, 0xe4, 0xc1, 0xab, 0x8b, 0xcf, 0x8c, 0xda, 0x48, 0x34,
	0x89, 0xed, 0xa8, 0x8c, 0x86, 0x1e, 0x1b, 0xb1, 0x93, 0xe9, 0x42, 0x8a, 0x88, 0x9a, 0x52, 0xc7,
	0x4e, 0xaa, 0xeb, 0xbf, 0xa2, 0x40, 0x81, 0xfa, 0xb4, 0xe3, 0x50, 0x75, 0x35, 0x4f, 0xb3, 0x2c,
	0x6c, 0x99, 0x7e, 0x97, 0x8a, 0x55, 0x54, 0xe5, 0x2a, 0xd2, 0x43, 0x77, 0xba, 0xae, 0x85, 0xd9,
	0x1a, 0x9f, 0x63, 0x3d, 0xa4, 0x2a, 0x74, 0x05, 0xca, 0x01, 0xee, 0xba, 0x16, 0xf1, 0xd0, 0xf9,
	0x14, 0x6b, 0x0c, 0x9f, 0x08, 0x6a, 0x48, 0x55, 0xff, 0x9e, 0x02, 0x25, 0xc6, 0x21, 0x0d, 0x91,
	0x02, 0xcd, 0x0b, 0xda, 0x81, 0xc9, 0xcd, 0x32, 0xaf, 0x56, 0x68, 0xcd, 0x3d, 0xb3, 0x4b, 0xef,
	0x6f, 0x44, 0x8f, 0x66, 0x7d, 0x72, 0xb4, 0xcf, 0x4c, 0x54, 0x4d, 0x3b, 0x1e, 0x85, 0x92, 0xa6,
	0x07, 0xe6, 0x2e, 0x63, 0xa9, 0xa8, 0xf2, 0x12, 0x59, 0x3d, 0xfd, 0x9e, 0xae, 0x63, 0x6c, 0x60,
	0x83, 0x6a, 0xaf, 0xa8, 0x46, 0x15, 0xd4, 0xac, 0x35, 0xd3, 0xc2, 0x06, 0x75, 0x5b, 0x45, 0x95,
	0x97, 0x1a, 0x7f, 0xac, 0x40, 0x25, 0xdc, 0x91, 0x8d, 0x6b, 0x04, 0xd7, 0xc2, 0x51, 0x4b, 0x73,
	0xdb, 0x22, 0x7c, 0x5c, 0x72, 0xec, 0x9e, 0x08, 0x75, 0x35, 0x0f, 0x45, 0x77, 0x5b, 0xf3, 0xc5,
	0xec, 0x65, 0x85, 0xc6, 0x7f, 0x96, 0xa0, 0x40, 0x7c, 0xe6, 0xb8, 0x6c, 0x9e, 0x87, 0x82, 0xef,
	0x62, 0x9d, 0x33, 0x79, 0x62, 0xe4, 0x16, 0x93, 0x59, 0x26, 0xa5, 0x21, 0xae, 0xc3, 0xf4, 0xdb,
	0x5d, 0x8d, 0xc6, 0x32, 0x79, 0xe6, 0x94, 0x4c, 0x7f, 0x9d, 0x96, 0xd1, 0x95, 0x84, 0xd5, 0x9e,
	0x4c, 0x01, 0x1d, 0xbf, 0x60, 0x71, 0x09, 0x26, 0xc5, 0x7d, 0x8e, 0x34, 0xc1, 0x0c, 0xbf, 0xe5,
	0xa1, 0x0a, 0xa2, 0xba, 0xcd, 0xad, 0xfe, 0x49, 0xa8, 0xe2, 0xf7, 0x03, 0xec, 0xd9, 0x9a, 0xd5,
	0x36, 0x0d, 0xae, 0x3e, 0x10, 0x55, 0x6b, 0x06, 0xe9, 0xe0, 0x7a, 0xce, 0xae, 0x69, 0x90, 0xc0,
	0xc4, 0xe0, 0xf3, 0x16, 0x44, 0xd5, 0x9a, 0x81, 0x9e, 0x86, 0xe9, 0x9e, 0xed, 0xeb, 0xdb, 0xd8,
	0xe8, 0x59, 0x5a, 0xc7, 0xc2, 0x5c, 0xd8, 0x78, 0x65, 0xfd, 0x3f, 0xf2, 0xe1, 0x58, 0xad, 0x43,
	0x59, 0xd7, 0x5c, 0x4d, 0x37, 0x83, 0x3d, 0x3e, 0x20, 0x67, 0xd2, 0x8a, 0xdf, 0x5c, 0xe6, 0x84,
	0x6a, 0x08, 0x11, 0x0d, 0x7d, 0x4e, 0x1a, 0x7a, 0x74, 0x87, 0x2f, 0xbc, 0xa6, 0xbd, 0xe9, 0xf0,
	0xa9, 0x98, 0xfe, 0x29, 0xe4, 0xff, 0x9a, 0xbd, 0xe9, 0xb0, 0xb5, 0x9a, 0xfc, 0xab, 0xaf, 0x42,
	0x59, 0x3c, 0x9b, 0xb8, 0x30, 0xdd, 0xed, 0xf1, 0x19, 0x49, 0xfe, 0x92, 0xc9, 0xd2, 0xc5, 0x5d,
	0xc7, 0xdb, 0xe3, 0x53, 0x90, 0x97, 0xc8, 0x1a, 0x40, 0x8f, 0x98, 0xf2, 0xb4, 0x96, 0xfe, 0xaf,
	0xff, 0xb3, 0x02, 0x65, 0xf1, 0x00, 0xf4, 0x0c, 0xcc, 0xec, 0x10, 0x4e, 0xac, 0x70, 0x97, 0xc3,
	0x46, 0x60, 0x9a, 0xd5, 0x8a, 0x3d, 0xce, 0x97, 0xa0, 0xec, 0xf8, 0x6d, 0x79, 0x69, 0x9e, 0x74,
	0xfc, 0x35, 0xba, 0x38, 0x9f, 0x87, 0x2f, 0x85, 0x11, 0x50, 0xdb, 0xeb, 0xd9, 0xc4, 0x11, 0x84,
	0x60, 0x6c, 0xb9, 0x3b, 0x16, 0x76, 0x50, 0x59, 0xbb, 0x80, 0x7d, 0x16, 0x66, 0x89, 0x26, 0x2c,
	0x1c, 0x24, 0x36, 0x59, 0x33, 0xbc, 0x5a, 0x74, 0x7c, 0x01, 0x10, 0xa9, 0x69, 0xbb, 0x9e, 0xf3,
	0xfe, 0x5e, 0xd8, 0x97, 0xc5, 0x33, 0x73, 0xa4, 0xa5, 0x45, 0x1a, 0x78, 0xef, 0xc6, 0x27, 0x79,
	0xc8, 0xb7, 0x1c, 0xe3, 0xe0, 0x56, 0x88, 0x57, 0xf9, 0x3c, 0xcc, 0xe2, 0x52, 0xd9, 0x2c, 0xcc,
	0xb6, 0x3c, 0xb4, 0x1c, 0xe3, 0xa0, 0xe7, 0xd9, 0xcf, 0x0f, 0x77, 0x51, 0x64, 0xc3, 0xd3, 0xc5,
	0xbe, 0x2f, 0x0d, 0x2c, 0x2f, 0x12, 0x9b, 0xf2, 0xb0, 0xe6, 0x87, 0xa3, 0xc8, 0x4b, 0xa4, 0x9e,
	0x84, 0x20, 0x6b, 0x2d, 0x3e, 0x56, 0xbc, 0x44, 0xf1, 0x1d, 0x63, 0xad, 0xc5, 0x87, 0x85, 0x15,
	0x1a, 0x7f, 0x57, 0x82, 0xb9, 0x64, 0x46, 0x61, 0xdc, 0x81, 0x79, 0x23, 0xe6, 0x0e, 0xaf, 0x66,
	0xca, 0x62, 0xf4, 0x55, 0x48, 0x83, 0xf4, 0x56, 0x38, 0x48, 0xf9, 0x14, 0xc7, 0x58, 0xa3, 0x91,
	0xe3, 0x8b, 0xc4, 0x4f, 0xf2, 0x30, 0x3f, 0xe8, 0xe1, 0xc8, 0x8a, 0xf9, 0x21, 0x12, 0x4b, 0xb5,
	0x1e, 0x5e, 0xa4, 0xd0, 0x43, 0xb1, 0x58, 0x2b, 0x72, 0x53, 0x4f, 0xc1, 0x94, 0xa6, 0xeb, 0xd8,
	0xf7, 0xdb, 0x5d, 0x7a, 0x2a, 0x9e, 0xa3, 0x81, 0x74, 0x95, 0xd5, 0xad, 0xd3, 0x33, 0x9a, 0x1b,
	0x70, 0xbc, 0x3f, 0x71, 0xe4, 0x61, 0x9a, 0x3a, 0x6a, 0xbb, 0x8e, 0x65, 0xea, 0x7b, 0xdc, 0x16,
	0x1e, 0x4f, 0xe6, 0x82, 0x54, 0xd6, 0xab, 0x45, 0x3b, 0xa1, 0x35, 0xa8, 0x30, 0x22, 0x0f, 0x6f,
	0x72, 0xc3, 0x7f, 0x61, 0xa8, 0x68, 0xfc, 0x12, 0x0c, 0xde, 0xc4, 0x1e, 0xb6, 0x75, 0xac, 0x96,
	0x29, 0xb9, 0x8a, 0x37, 0x51, 0x77, 0xd0, 0xa1, 0x63, 0xec, 0xfa, 0xca, 0x4b, 0x99, 0x94, 0xb6,
	0xc1, 0x6e, 0xad, 0xf4, 0x9d, 0x30, 0xb2, 0xfa, 0xfa, 0x6b, 0x30, 0x1d, 0x53, 0x60, 0xa6, 0xfd,
	0xcd, 0x37, 0xfb, 0xcf, 0x0d, 0x0e, 0x76, 0xee, 0x35, 0xfe, 0xac, 0x02, 0x47, 0x06, 0xe6, 0xe7,
	0xc6, 0x9d, 0x52, 0xdf, 0x8c, 0x4d, 0xa9, 0xdb, 0xd9, 0x13, 0x83, 0x83, 0x6b, 0xa5, 0xc9, 0xb5,
	0x99, 0x98, 0x5c, 0x77, 0x0e, 0xec, 0x19, 0xf1, 0x69, 0xf6, 0x9d, 0x22, 0x7c, 0x69, 0x5f, 0x5e,
	0xfa, 0xac, 0x5f, 0xe9, 0xb7, 0xfe, 0x6f, 0xf5, 0x5f, 0xc2, 0xd5, 0x0e, 0x52, 0x1f, 0x4d, 0xf9,
	0xca, 0x94, 0xe9, 0x61, 0x7a, 0xd6, 0x2b, 0x5d, 0xdc, 0x25, 0x91, 0x0e, 0xb7, 0x6f, 0xe9, 0x82,
	0x1f, 0xb0, 0x2a, 0x12, 0x82, 0xd6, 0xff, 0x20, 0x0f, 0xf3, 0x83, 0x40, 0xd0, 0xc7, 0x0a, 0x94,
	0x2c, 0xb3, 0x6b, 0x06, 0x22, 0x1d, 0xd2, 0x7d, 0xe4, 0x8c, 0x37, 0x6f, 0xd3, 0xe7, 0x89, 0x24,
	0x24, 0x2d, 0xa0, 0x4f, 0x15, 0x28, 0x7b, 0xec, 0x42, 0x98, 0x48, 0xa7, 0x38, 0x8f, 0x9e, 0x13,
	0x7e, 0x05, 0x8d, 0xf3, 0x12, 0x32, 0x40, 0x93, 0x97, 0x11, 0x93, 0x99, 0x66, 0xf2, 0x6b, 0x30,
	0x1d, 0x43, 0xcd, 0x44, 0xfc, 0xab, 0x39, 0x78, 0x6c, 0x88, 0xc5, 0xee, 0xe3, 0x0c, 0x52, 0xf8,
	0xe7, 0xf7, 0xa5, 0x05, 0x83, 0x25, 0x96, 0xde, 0x3a, 0xd8, 0xc9, 0xb4, 0xdf, 0xe2, 0xf1, 0x50,
	0x6e, 0xb1, 0xf1, 0xb9, 0x02, 0xb3, 0x09, 0x07, 0x4f, 0x02, 0xd3, 0x1d, 0xd3, 0x16, 0xf1, 0x3e,
	0xfd, 0x3f, 0xc6, 0xbd, 0xd7, 0x39, 0xc8, 0xf7, 0x4c, 0x83, 0xc7, 0x21, 0xe4, 0x2f, 0x99, 0x43,
	0x4b, 0xad, 0xb5, 0x44, 0x84, 0x08, 0x4b, 0xad, 0x35, 0x11, 0x49, 0x0e, 0x4a, 0xec, 0x97, 0x06,
	0x26, 0xf6, 0x1b, 0x1f, 0x4f, 0xc2, 0x24, 0x4f, 0xc2, 0x1e, 0x5c, 0x28, 0x79, 0x31, 0x16, 0x4a,
	0x3e, 0x97, 0x26, 0x03, 0x2c, 0xef, 0xea, 0x96, 0x13, 0xf1, 0xe4, 0xf3, 0xe9, 0x00, 0xe2, 0xae,
	0xf2, 0xdf, 0xf3, 0x7c, 0xf3, 0x35, 0xe8, 0x9c, 0x79, 0x85, 0x84, 0x71, 0x5e, 0x90, 0x2e, 0x1d,
	0x2a, 0x73, 0xd8, 0x6c, 0x39, 0x5e, 0xa0, 0x32, 0x62, 0xb4, 0x01, 0x65, 0x9f, 0x04, 0xf0, 0x69,
	0x73, 0xa0, 0x31, 0xa0, 0x0d, 0x4e, 0xc9, 0xad, 0x50, 0x00, 0x11, 0x03, 0x11, 0x09, 0x69, 0x11,
	0x7c, 0x46, 0x15, 0xe8, 0x78, 0xb4, 0x93, 0x5c, 0x6b, 0xf9, 0xf4, 0xfa, 0x72, 0x45, 0x95, 0xab,
	0xd0, 0x09, 0x98, 0xb1, 0x1c, 0xcd, 0xe8, 0x68, 0x96, 0x66, 0xeb, 0x14, 0x84, 0x8d, 0x7c, 0xa2,
	0x96, 0x58, 0x7b, 0x8c, 0x85, 0x4c, 0xb3, 0xff, 0x97, 0x14, 0x28, 0x10, 0x4d, 0x0c, 0xcc, 0xe7,
	0xd5, 0xa1, 0x4c, 0x5f, 0xb0, 0xd1, 0x1d, 0x4b, 0xa4, 0xf3, 0x44, 0x99, 0xed, 0xd5, 0xbc, 0x80,
	0x27, 0x49, 0xe8, 0x7f, 0x62, 0xce, 0x81, 0xe6, 0x6d, 0xe1, 0xa0, 0x4d, 0x9b, 0x98, 0xcc, 0xc0,
	0xaa, 0xe8, 0x43, 0x44, 0x7e, 0x97, 0x36, 0xb3, 0x44, 0x09, 0xdd, 0x33, 0x92, 0xc6, 0xfa, 0xdf,
	0x44, 0xb9, 0x9c, 0x5d, 0x38, 0x2a, 0x0b, 0xd9, 0x36, 0xed, 0x2d, 0x0f, 0xd3, 0xeb, 0x69, 0x6c,
	0xc1, 0xb8, 0x9c, 0xc1, 0x8e, 0x9a, 0xb7, 0x1d, 0xcd, 0xb8, 0x2a, 0xd4, 0xc5, 0x80, 0xd4, 0x23,
	0x31, 0x1d, 0x0a, 0xf4, 0xfa, 0x55, 0x38, 0x3c, 0xa0, 0x77, 0x98, 0xd7, 0x94, 0x14, 0x44, 0xf3,
	0x9a, 0x34, 0x2d, 0x3d, 0x03, 0xb9, 0xb5, 0x16, 0x57, 0x4f, 0x6e, 0xad, 0xd5, 0xf8, 0x7b, 0x22,
	0x06, 0x3b, 0xf7, 0x1d, 0x73, 0x1a, 0x2e, 0xc5, 0x32, 0x96, 0xa7, 0x53, 0x9c, 0x35, 0x27, 0xd3,
	0x95, 0xe1, 0x54, 0xc9, 0x47, 0x53, 0x65, 0xfc, 0x14, 0xe6, 0x77, 0x8a, 0x70, 0x64, 0xe0, 0x21,
	0xf4, 0xc1, 0xf9, 0x99, 0x5b, 0x31, 0x3f, 0x73, 0x36, 0xfb, 0x79, 0xb8, 0xec, 0x75, 0xee, 0x26,
	0xbc, 0xce, 0xb9, 0x71, 0xe0, 0xe2, 0x3e, 0xe8, 0x7b, 0x39, 0xee, 0x83, 0x9e, 0x83, 0x39, 0x03,
	0xfb, 0xa6, 0x87, 0x8d, 0x36, 0x3f, 0x7e, 0xf7, 0x79, 0xee, 0x73, 0x96, 0xd7, 0x73, 0x3c, 0x1f,
	0x19, 0x50, 0x89, 0x4e, 0x56, 0xd8, 0x58, 0x5e, 0x1f, 0x53, 0xb0, 0x66, 0xe2, 0xa0, 0x25, 0x02,
	0x46, 0x37, 0xd8, 0xeb, 0x66, 0x63, 0xe5, 0x51, 0xab, 0xae, 0x63, 0xdc, 0x13, 0xa9, 0xd4, 0x0b,
	0x30, 0xf3, 0x10, 0x87, 0x25, 0x46, 0x38, 0x77, 0x9f, 0x83, 0x39, 0xbd, 0xe7, 0x79, 0x64, 0xff,
	0x93, 0xd4, 0x10, 0xaf, 0x0f, 0x35, 0xb4, 0x00, 0x87, 0x9d, 0x8e, 0x8f, 0xbd, 0x5d, 0x6c, 0xb4,
	0xa5, 0x53, 0x67, 0x96, 0x14, 0x42, 0xa2, 0xe9, 0x46, 0xd8, 0xd2, 0xf8, 0xe5, 0x02, 0x40, 0x74,
	0xcd, 0xe3, 0xe0, 0xcc, 0xef, 0x4a, 0xcc, 0xfc, 0x5e, 0x48, 0x79, 0xcd, 0x44, 0xb6, 0xb9, 0xeb,
	0x09, 0x9b, 0x6b, 0xa6, 0xc6, 0x88, 0x1b, 0xda, 0x5f, 0x2b, 0xd9, 0x0d, 0xed, 0x3a, 0x5b, 0xbd,
	0xc8, 0xc8, 0xf1, 0x9d, 0xc0, 0xa9, 0xe1, 0x6f, 0x1b, 0x6a, 0x1d, 0x6c, 0x89, 0xb1, 0x56, 0x43,
	0xda, 0x83, 0x33, 0xa5, 0x2f, 0xc6, 0x18, 0xfe, 0xb0, 0x40, 0x1c, 0x9a, 0xb8, 0xa8, 0x75, 0x60,
	0xb6, 0x70, 0x39, 0x66, 0x0b, 0xcf, 0xa7, 0xbb, 0x34, 0x26, 0x9b, 0xc2, 0xb5, 0x84, 0x29, 0x9c,
	0x4e, 0x0b, 0x11, 0xb7, 0x84, 0xcf, 0x84, 0x25, 0xc8, 0xc3, 0xab, 0x1c, 0xe0, 0xf0, 0xe6, 0xc6,
	0x1d, 0xde, 0x3f, 0x8d, 0x16, 0xea, 0x57, 0xa1, 0x26, 0xc6, 0xd7, 0xee, 0x75, 0x3b, 0xd8, 0x6b,
	0xf3, 0x2c, 0x36, 0x36, 0xf8, 0x38, 0x1f, 0xe5, 0xed, 0x77, 0x68, 0xf3, 0x86, 0x68, 0x25, 0xc3,
	0xcd, 0x29, 0xba, 0xa6, 0x1f, 0x11, 0xb1, 0x53, 0x22, 0xc4, 0x9a, 0xd6, 0xa5, 0x16, 0xf2, 0x28,
	0x31, 0x21, 0xfa, 0x1e, 0xc5, 0x82, 0x90, 0xa3, 0xbc, 0x3d, 0xf1, 0xa8, 0xc6, 0x27, 0x45, 0x80,
	0xe8, 0x56, 0xde, 0xff, 0x8d, 0xd7, 0x88, 0x9e, 0x3f, 0xbe, 0xd7, 0x90, 0x31, 0x7e, 0x06, 0xbd,
	0xc6, 0xbf, 0x46, 0x66, 0xb5, 0x8f, 0x2f, 0x50, 0xf6, 0xf3, 0x05, 0x24, 0x52, 0x0d, 0xe5, 0x65,
	0x26, 0x14, 0x96, 0x89, 0x4e, 0xd8, 0x9b, 0x7d, 0x92, 0x4e, 0x98, 0xc1, 0xcc, 0xf2, 0xfa, 0x50,
	0x27, 0xa7, 0x01, 0x69, 0xbb, 0x9a, 0x49, 0xcf, 0x60, 0xa2, 0xce, 0xec, 0xb0, 0xef, 0x50, 0xd8,
	0x12, 0x76, 0x3f, 0x03, 0xf3, 0x3d, 0x7b, 0x00, 0x01, 0x8b, 0x6c, 0x0f, 0x4b, 0x6d, 0x82, 0xa4,
	0xf1, 0xfd, 0x02, 0x94, 0xd8, 0x15, 0xc9, 0x83, 0xb3, 0xc3, 0x0b, 0x31, 0x3b, 0x3c, 0x99, 0xe2,
	0x7a, 0xa6, 0x6c, 0x83, 0x57, 0x13, 0x36, 0x78, 0x2a, 0x15, 0x7d, 0x62, 0x8b, 0xf6, 0x33, 0x60,
	0x7f, 0xe8, 0x29, 0x98, 0x12, 0xd7, 0x55, 0xa4, 0x6b, 0x2a, 0x55, 0x5e, 0x47, 0x53, 0x5a, 0x5f,
	0xcc, 0xc2, 0xf6, 0x8b, 0x39, 0x98, 0x92, 0x2f, 0x64, 0x8e, 0x6b, 0x29, 0xc7, 0xf9, 0x59, 0xa4,
	0x6f, 0x3a, 0x36, 0xf6, 0xb8, 0xc5, 0xc8, 0x55, 0xe8, 0xeb, 0x00, 0xae, 0xe6, 0x69, 0x5d, 0x1c,
	0xe0, 0x70, 0xe7, 0x7b, 0x2e, 0xf5, 0x45, 0xd1, 0x66, 0x2b, 0xa4, 0x65, 0x61, 0xa9, 0x04, 0x56,
	0xbf, 0x08, 0xb3, 0x89, 0xe6, 0x4c, 0x7b, 0x8e, 0x1f, 0x2a, 0x30, 0x1d, 0x1b, 0x71, 0xf4, 0x0e,
	0x4c, 0x75, 0xb5, 0x40, 0xdf, 0x6e, 0xf3, 0xfb, 0x87, 0x6c, 0x27, 0xf8, 0x5a, 0x7a, 0x9b, 0x69,
	0xae, 0x13, 0x72, 0xf9, 0x36, 0x62, 0xb5, 0x1b, 0xd5, 0xd4, 0x2f, 0xc1, 0x5c, 0xb2, 0x43, 0x26,
	0x8e, 0x7f, 0x90, 0x83, 0x22, 0xbd, 0x2f, 0x3a, 0xee, 0x70, 0x45, 0x59, 0xf4, 0x5c, 0xec, 0x04,
	0x4b, 0xca, 0xbb, 0xe7, 0xe3, 0x79, 0xf7, 0x2b, 0xe1, 0x4b, 0xc0, 0x69, 0xce, 0xc5, 0x29, 0x73,
	0xfc, 0x40, 0x41, 0xbc, 0x05, 0xfc, 0x2c, 0xcc, 0x6e, 0x9a, 0x9e, 0xcf, 0x2e, 0x4d, 0xf8, 0x81,
	0xd6, 0x75, 0xf9, 0x95, 0xd0, 0x19, 0x5a, 0x7d, 0x4f, 0xd4, 0xa2, 0x67, 0x60, 0xc6, 0xd2, 0x62,
	0xfd, 0xd8, 0xdd, 0xd0, 0x69, 0x52, 0x1b, 0x75, 0x9b, 0x87, 0x22, 0xbd, 0xcd, 0x45, 0x2f, 0xec,
	0x15, 0x55, 0x56, 0x08, 0x77, 0xa3, 0xe5, 0x68, 0x37, 0xda, 0x58, 0x82, 0xaa, 0xc4, 0x10, 0x7a,
	0x02, 0x40, 0x77, 0xba, 0xae, 0x63, 0x63, 0x1b, 0x8b, 0xab, 0x41, 0x52, 0x0d, 0x81, 0x20, 0x3b,
	0x6e, 0x71, 0x3d, 0x88, 0xfc, 0x6f, 0xfc, 0x54, 0x81, 0x49, 0xf1, 0xd5, 0x8d, 0x5b, 0x50, 0xd1,
	0xdd, 0x5e, 0xbb, 0x47, 0xd5, 0xa4, 0xa4, 0xc8, 0x05, 0x71, 0x42, 0xba, 0x73, 0x6e, 0x39, 0xa6,
	0x1d, 0xa8, 0x65, 0xdd, 0xed, 0xdd, 0xa7, 0x7a, 0xbd, 0x0b, 0x53, 0xec, 0x44, 0x9a, 0xe3, 0xe5,
	0xc6, 0xc2, 0xab, 0x32, 0x0c, 0x0a, 0x59, 0xbf, 0xcc, 0x36, 0xdf, 0xb4, 0x05, 0x7d, 0x19, 0x2a,
	0x91, 0x1e, 0xf9, 0x4d, 0x95, 0x40, 0xd6, 0x61, 0x64, 0x62, 0x79, 0x6e, 0x62, 0x8d, 0x1f, 0x29,
	0xf0, 0x64, 0xdf, 0x1b, 0x20, 0x78, 0x8b, 0x14, 0xbd, 0x54, 0x6f, 0x35, 0x27, 0x3f, 0x08, 0x42,
	0x54, 0x6e, 0x1a, 0xd8, 0x0e, 0xcc, 0x4d, 0x93, 0xdf, 0xb9, 0xa8, 0xa8, 0x52, 0x0d, 0xb1, 0x47,
	0xd7, 0xea, 0x6d, 0x99, 0xe2, 0x94, 0x9b, 0x97, 0xd0, 0x31, 0x98, 0xf4, 0xcd, 0x0f, 0x70, 0x7b,
	0xab, 0xc3, 0x6d, 0xa5, 0x44, 0x8a, 0x37, 0x3a, 0x64, 0x11, 0xc6, 0xb6, 0xe1, 0x12, 0x11, 0x79,
	0xaa, 0x2a, 0x2c, 0x37, 0xee, 0xc2, 0x53, 0x49, 0xee, 0xef, 0xdb, 0x0f, 0xc5, 0x7f, 0xe3, 0x53,
	0x05, 0x9e, 0x1e, 0xfc, 0xd2, 0xca, 0x43, 0xa9, 0x45, 0x12, 0x2f, 0x1f, 0x13, 0x2f, 0x96, 0xf0,
	0x2d, 0x24, 0x12, 0xbe, 0x8d, 0x00, 0x4e, 0x0c, 0x64, 0xe6, 0x21, 0xa5, 0x1c, 0x7e, 0x69, 0xb7,
	0xf1, 0x3b, 0x30, 0xe0, 0x10, 0x8f, 0xcd, 0xa8, 0x6d, 0x38, 0xb4, 0xa5, 0xe3, 0xa8, 0x71, 0xc5,
	0xf4, 0x77, 0xb8, 0x4b, 0x1a, 0x7e, 0xdd, 0xf0, 0xc6, 0xf2, 0xb5, 0x38, 0x55, 0xec, 0x28, 0xb2,
	0x1f, 0x14, 0xbd, 0x07, 0xf3, 0xda, 0x03, 0xff, 0x1a, 0xf1, 0x04, 0xa6, 0x7e, 0xd5, 0x72, 0xf4,
	0x1d, 0xb2, 0x4a, 0x88, 0x0d, 0xc6, 0xf0, 0x6f, 0x64, 0x2c, 0xbd, 0xb9, 0xd1, 0x47, 0x18, 0x7b,
	0xde, 0x40, 0x68, 0xb4, 0x0e, 0xe1, 0xc5, 0xc2, 0x54, 0xd7, 0x55, 0x56, 0x79, 0xe7, 0x18, 0x74,
	0x08, 0x81, 0x5a, 0x50, 0xd9, 0x62, 0x63, 0xb0, 0x29, 0xc2, 0xa0, 0xe1, 0x97, 0xd1, 0x6f, 0x88,
	0xde, 0x31, 0xc0, 0x08, 0x04, 0x5d, 0x82, 0xbc, 0xbd, 0x29, 0x2e, 0x41, 0x0c, 0xdf, 0x1a, 0xdc,
	0xb9, 0xbe, 0x11, 0x43, 0x21, 0x84, 0x84, 0xde, 0xeb, 0x18, 0xfc, 0x65, 0xa1, 0x11, 0x09, 0x89,
	0xab, 0x2b, 0x71, 0x7a, 0xaf, 0x63, 0xa0, 0x15, 0x28, 0x9a, 0xbe, 0xee, 0x9b, 0xfc, 0x95, 0xa1,
	0xe1, 0xbe, 0x6b, 0x6d, 0x63, 0x79, 0x63, 0x2d, 0x86, 0xc1, 0x88, 0xd1, 0x0d, 0x28, 0xe9, 0xa6,
	0x6d, 0x60, 0x8f, 0xbf, 0x36, 0xb4, 0x30, 0xfc, 0xf6, 0x24, 0xed, 0x1a, 0xc3, 0xe1, 0xe4, 0x14,
	0x08, 0xbb, 0xdb, 0x9b, 0xe2, 0x75, 0xf4, 0x11, 0x40, 0xd8, 0xdd, 0x4e, 0x28, 0x85, 0x93, 0xa3,
	0xd7, 0x20, 0xb7, 0xa9, 0xf3, 0x97, 0x89, 0x86, 0xef, 0xcd, 0xaf, 0x2f, 0xc7, 0x00, 0x72, 0x9b,
	0x3a, 0xba, 0x09, 0x93, 0x9b, 0xc4, 0x86, 0xb0, 0xc7, 0x5f, 0x28, 0x1a, 0x7e, 0x1b, 0xf4, 0x3a,
	0xeb, 0x1b, 0x83, 0x11, 0x00, 0x68, 0x1d, 0x60, 0xd3, 0xc2, 0xef, 0xb3, 0x46, 0xfe, 0x5e, 0xd1,
	0xe9, 0x11, 0x70, 0xa2, 0x3b, 0xc7, 0x92, 0x00, 0x88, 0x05, 0x6a, 0x1f, 0xf4, 0x3c, 0x7c, 0xdd,
	0xb4, 0x30, 0x7f, 0xc9, 0x68, 0xb8, 0x05, 0x2e, 0x89, 0xde, 0x71, 0x0b, 0x0c, 0x41, 0x90, 0x06,
	0xd3, 0xbb, 0xbe, 0xbb, 0x8d, 0xc5, 0x7c, 0xe2, 0xef, 0x1a, 0x0d, 0x0f, 0x98, 0xde, 0xe0, 0x14,
	0xa6, 0x17, 0xf4, 0x34, 0xab, 0x6f, 0xf2, 0xc7, 0x11, 0x89, 0x3e, 0xdf, 0xeb, 0x39, 0x9d, 0xbd,
	0x00, 0xf3, 0x97, 0x8c, 0x86, 0xeb, 0xf3, 0x2e, 0xeb, 0x1b, 0xd7, 0x27, 0x07, 0x08, 0x15, 0x40,
	0xdd, 0xd4, 0x5c, 0x5a, 0x05, 0xf4, 0x71, 0x18, 0x81, 0x34, 0x7e, 0x43, 0x81, 0xe3, 0xa3, 0xdc,
	0x0b, 0x59, 0xb3, 0xd8, 0x91, 0xf5, 0xda, 0x8a, 0xc8, 0xec, 0x8b, 0x32, 0xbd, 0xd3, 0xe9, 0xdf,
	0x8b, 0xde, 0xa2, 0xe0, 0x25, 0xe2, 0x92, 0x5d, 0xcd, 0x0b, 0xcc, 0x40, 0xdc, 0x19, 0x2b, 0xaa,
	0x51, 0x05, 0xdb, 0x8a, 0xb2, 0xdb, 0xd4, 0xfc, 0x0b, 0x61, 0x61, 0xb9, 0x71, 0x0a, 0xe6, 0x07,
	0x79, 0x22, 0x7a, 0x98, 0x42, 0x5c, 0x19, 0x3f, 0x7c, 0x21, 0xff, 0x1b, 0x5f, 0x87, 0xd9, 0x84,
	0x67, 0x20, 0x0c, 0xd1, 0xcd, 0x82, 0x58, 0x38, 0x78, 0x29, 0x24, 0xcf, 0x45, 0xe4, 0x31, 0x36,
	0xf2, 0x09, 0x36, 0x76, 0x61, 0x26, 0x3e, 0x3b, 0x48, 0x2c, 0xc0, 0x8e, 0x69, 0xde, 0x7c, 0xf3,
	0x8e, 0xb8, 0x6e, 0x20, 0xd5, 0x90, 0x40, 0xd8, 0xea, 0xd9, 0x7c, 0x6b, 0x4d, 0xfe, 0x4a, 0xca,
	0xc9, 0xc7, 0x94, 0x33, 0x4c, 0xfc, 0x1f, 0xe5, 0x60, 0x2e, 0x39, 0x0b, 0x08, 0x90, 0xe1, 0x99,
	0x92, 0x50, 0xac, 0xb4, 0xaf, 0xf6, 0x6f, 0x42, 0x85, 0xdd, 0xfd, 0x57, 0xf1, 0x66, 0xaa, 0xd4,
	0x4b, 0xf2, 0xb6, 0x4e, 0x44, 0x3e, 0x8c, 0x59, 0x74, 0x0f, 0x26, 0x1d, 0x97, 0x5d, 0x5d, 0x4e,
	0xf3, 0x6d, 0xa1, 0xa4, 0x5c, 0xcd, 0xd7, 0x5d, 0xe9, 0x35, 0x25, 0x01, 0x55, 0x3f, 0x0f, 0x53,
	0x72, 0x43, 0xa6, 0x1d, 0xc6, 0x59, 0x38, 0x3c, 0xc0, 0x25, 0x91, 0x6d, 0x9e, 0xa1, 0x05, 0x9a,
	0x8f, 0xe9, 0x79, 0x14, 0x87, 0x92, 0xab, 0x1a, 0x9f, 0x28, 0xf0, 0xf8, 0xd0, 0x55, 0x9d, 0xc6,
	0x7a, 0x86, 0x44, 0xce, 0x4b, 0x8f, 0x60, 0x0a, 0x38, 0x70, 0xf8, 0x86, 0x49, 0x36, 0xc7, 0x4e,
	0xd2, 0x00, 0x3d, 0xec, 0x3a, 0xbe, 0x19, 0x38, 0x9e, 0x50, 0x87, 0x54, 0xc3, 0x20, 0xd9, 0xbe,
	0x55, 0x1c, 0x45, 0x8a, 0x32, 0x61, 0xc6, 0x30, 0x3d, 0xba, 0xc7, 0x13, 0x37, 0xbe, 0xa2, 0x8a,
	0x06, 0x86, 0x23, 0x03, 0x57, 0x6b, 0x42, 0x26, 0xc2, 0x53, 0x9f, 0x3f, 0x31, 0xaa, 0xc8, 0x3c,
	0xa7, 0x3e, 0xce, 0xc1, 0x6c, 0x62, 0x25, 0x26, 0xfd, 0xbb, 0x8e, 0x6d, 0xd2, 0x03, 0x20, 0x36,
	0xa7, 0xc2, 0xf2, 0x3e, 0xef, 0x8e, 0xec, 0x37, 0xab, 0xe8, 0x69, 0xab, 0x63, 0x89, 0x97, 0xb3,
	0xc8, 0x7f, 0x52, 0xd7, 0xf3, 0xb1, 0xc7, 0x6f, 0x0d, 0xd0, 0xff, 0x24, 0xb6, 0xdc, 0xc1, 0x7b,
	0x9e, 0x69, 0x6f, 0xf1, 0x08, 0x5c, 0x14, 0xe3, 0xd3, 0x66, 0xf2, 0xe0, 0xa6, 0x4d, 0x39, 0xa1,
	0x87, 0xbf, 0x54, 0xe0, 0x50, 0x5f, 0x3c, 0x81, 0x1a, 0x30, 0x15, 0x1d, 0x03, 0x6b, 0x16, 0x57,
	0x77, 0xac, 0x8e, 0x4c, 0x05, 0xf3, 0x3d, 0x31, 0xba, 0xe4, 0xaf, 0xf0, 0x3a, 0xf9, 0xc8, 0xeb,
	0x9c, 0x80, 0x19, 0x1a, 0x99, 0xac, 0xd9, 0x64, 0x3c, 0xa3, 0x40, 0x3c, 0x51, 0x2b, 0xe9, 0xb1,
	0xb8, 0xaf, 0x77, 0x2a, 0x25, 0x38, 0x7f, 0x0f, 0x8e, 0x0c, 0x5c, 0x54, 0x89, 0x6d, 0x32, 0xd9,
	0xa5, 0x09, 0x22, 0xd5, 0xd0, 0x37, 0x03, 0xb6, 0x35, 0x8f, 0xa6, 0x88, 0xc4, 0x4d, 0x90, 0xb0,
	0x62, 0xa8, 0xd1, 0x7c, 0x0d, 0x9e, 0x18, 0xbe, 0xe2, 0x92, 0x67, 0xb3, 0xf5, 0xa8, 0x15, 0xad,
	0x0f, 0x52, 0xcd, 0x7e, 0x13, 0xb4, 0xf1, 0xeb, 0x0a, 0x1c, 0x1e, 0xb0, 0xde, 0x32, 0x6e, 0xc8,
	0x7e, 0x24, 0x9c, 0x65, 0x61, 0x99, 0x60, 0xf1, 0x97, 0x7b, 0x39, 0x16, 0x2b, 0x0d, 0x93, 0x20,
	0x34, 0xc2, 0x82, 0x64, 0x84, 0xf3, 0x50, 0xdc, 0xf2, 0x9c, 0x9e, 0x2b, 0xae, 0xd6, 0xd2, 0x42,
	0xe3, 0xf7, 0x15, 0xae, 0xdf, 0x3e, 0x19, 0xeb, 0x50, 0x36, 0x4c, 0x7f, 0x47, 0xd2, 0x6e, 0x58,
	0xa6, 0x1f, 0x63, 0x33, 0xfd, 0x9d, 0xfb, 0xea, 0x9a, 0xb8, 0x74, 0xc8, 0x8b, 0xf4, 0xf5, 0x12,
	0x4d, 0xdf, 0x36, 0xed, 0xad, 0x75, 0xc7, 0x10, 0xf3, 0x45, 0xae, 0x92, 0x74, 0x53, 0xd8, 0xd7,
	0x08, 0x8a, 0x89, 0x11, 0x31, 0x00, 0xf5, 0x87, 0xb1, 0x63, 0x45, 0x09, 0xc3, 0xc6, 0xfd, 0x5f,
	0x14, 0x40, 0xfd, 0x41, 0xee, 0x50, 0x7f, 0x31, 0xc8, 0x1f, 0x09, 0xe5, 0xe7, 0x25, 0xe5, 0x87,
	0xc6, 0x4a, 0x23, 0xc9, 0x82, 0x6c, 0xac, 0x34, 0x2c, 0x8c, 0xf9, 0x81, 0xe2, 0xc1, 0xf9, 0x81,
	0xc4, 0x6c, 0x5a, 0xfc, 0xfc, 0x30, 0x4c, 0x2e, 0xd3, 0x0f, 0xc9, 0xfa, 0xe8, 0x73, 0x05, 0x0a,
	0xf4, 0x0b, 0x68, 0x2f, 0x66, 0xfd, 0x0a, 0x6a, 0xfd, 0x4c, 0x06, 0x0a, 0xf6, 0xf5, 0xcd, 0xc6,
	0xea, 0xb7, 0x3f, 0xaf, 0xe5, 0xca, 0xca, 0xb7, 0xff, 0xe1, 0xdf, 0x7e, 0x3b, 0x77, 0x01, 0x9d,
	0x5f, 0x88, 0x7d, 0x44, 0x36, 0x02, 0xe1, 0x5f, 0x92, 0x5d, 0x5c, 0xe0, 0xbb, 0x6f, 0x7f, 0xe1,
	0x43, 0xfe, 0xef, 0xa3, 0x85, 0x0f, 0x83, 0x3d, 0x17, 0x7f, 0x84, 0xfe, 0x56, 0x81, 0xb2, 0xf8,
	0xc8, 0x27, 0xfa, 0xea, 0x88, 0xb3, 0x99, 0x81, 0x9f, 0x30, 0xad, 0xbf, 0x9c, 0x91, 0x8a, 0xcb,
	0xf0, 0xba, 0x24, 0xc3, 0x32, 0x5a, 0x1a, 0x5f, 0x86, 0x85, 0x0f, 0x6d, 0xad, 0x8b, 0x3f, 0x42,
	0x7f, 0xa4, 0x40, 0x89, 0x7d, 0xa3, 0x0f, 0x0d, 0x0f, 0xab, 0x07, 0x7e, 0xc8, 0xaf, 0xfe, 0x78,
	0xdf, 0x17, 0x4c, 0xdf, 0x70, 0x4c, 0x23, 0x64, 0xf7, 0x96, 0xc4, 0xee, 0xe5, 0xc6, 0x43, 0xa8,
	0xfc, 0xbc, 0x72, 0x0a, 0xfd, 0x40, 0x81, 0x12, 0xfb, 0x6a, 0xdf, 0x08, 0x56, 0x07, 0x7e, 0xda,
	0x6f, 0x14, 0xab, 0x31, 0xcd, 0x9e, 0x3a, 0x00, 0xcd, 0xfe, 0x50, 0x81, 0x12, 0xfb, 0xba, 0xe3,
	0x08, 0x76, 0x07, 0x7e, 0x99, 0x75, 0x14, 0xbb, 0xaa, 0xc4, 0xee, 0xf5, 0xfa, 0xc3, 0xb3, 0x4b,
	0x14, 0xfc, 0x99, 0x02, 0x85, 0x65, 0xc7, 0xdd, 0x43, 0xa3, 0x5e, 0x86, 0xec, 0xfb, 0xec, 0xe4,
	0x28, 0x6e, 0x2f, 0x49, 0xdc, 0x2e, 0xd6, 0x4f, 0x8f, 0xe4, 0x56, 0xd3, 0x69, 0x28, 0xbc, 0xa0,
	0x3b, 0xee, 0x1e, 0xe1, 0xec, 0x9f, 0x14, 0x98, 0xbe, 0x66, 0x98, 0x41, 0xf4, 0xd2, 0xe7, 0x99,
	0xcc, 0x5f, 0x58, 0x1d, 0xc5, 0xe3, 0x07, 0x12, 0x8f, 0x76, 0xc3, 0x1c, 0x47, 0xa3, 0xd1, 0x67,
	0xfb, 0x98, 0x56, 0xe9, 0xff, 0x8f, 0x16, 0xd8, 0xe7, 0x67, 0xba, 0x9a, 0xcb, 0xab, 0x3f, 0x0a,
	0xe5, 0xc3, 0x86, 0x19, 0x10, 0xf9, 0xfe, 0x51, 0x01, 0x20, 0xac, 0xf2, 0xfb, 0x61, 0xcd, 0x6c,
	0x5f, 0x2b, 0x1d, 0x25, 0xd9, 0x03, 0x49, 0xb2, 0x9d, 0xc6, 0xe6, 0x01, 0x4a, 0xc6, 0x5f, 0xb6,
	0xde, 0x4f, 0xac, 0x9f, 0x28, 0x50, 0x13, 0x59, 0xce, 0xbe, 0xb7, 0x67, 0x2e, 0x64, 0xfb, 0xa8,
	0x51, 0x3c, 0x59, 0x3a, 0x4a, 0x64, 0x5b, 0x12, 0xb9, 0xd3, 0x78, 0x7b, 0x1c, 0x91, 0xa3, 0x57,
	0x2b, 0xf8, 0x7b, 0xf6, 0x49, 0x29, 0x3d, 0xce, 0x12, 0x91, 0xf4, 0xa7, 0x0a, 0xd4, 0xef, 0xdb,
	0xde, 0x7e, 0xb2, 0x5e, 0xca, 0x24, 0x6b, 0x5f, 0x6a, 0x78, 0x94, 0xb4, 0x5d, 0x49, 0x5a, 0xed,
	0x54, 0xfb, 0x91, 0x48, 0xdb, 0x0b, 0xa5, 0x43, 0xff, 0xa5, 0xc0, 0xe3, 0xfb, 0x0d, 0x2b, 0x7b,
	0x8d, 0x63, 0x69, 0x8c, 0x2f, 0x4a, 0x65, 0x13, 0xd9, 0x97, 0x44, 0xde, 0x6a, 0x74, 0x0e, 0x42,
	0x64, 0xf6, 0x0d, 0xc0, 0x61, 0xa3, 0xfc, 0xdf, 0x0a, 0x3c, 0xb9, 0xff, 0x28, 0x33, 0xd1, 0x97,
	0xb3, 0x8b, 0x9e, 0x79, 0xbc, 0x3d, 0x49, 0xf8, 0xcd, 0x53, 0xc6, 0xa3, 0x13, 0x3e, 0x1a, 0xf4,
	0xab, 0x17, 0xe1, 0x2b, 0xba, 0x23, 0xbd, 0x90, 0xa1, 0xb9, 0xe6, 0x00, 0x01, 0xaf, 0x56, 0x59,
	0x6c, 0xd7, 0xf2, 0x9c, 0xc0, 0x69, 0x29, 0xdf, 0x98, 0xe4, 0xf5, 0x9d, 0x12, 0xbd, 0x20, 0xfc,
	0xd2, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x66, 0xe8, 0xd7, 0x45, 0x60, 0x00, 0x00,
}
