// Code generated by protoc-gen-go.
// source: cluster.proto
// DO NOT EDIT!

package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClusterSettings struct {
	LogIndexPrefix string `protobuf:"bytes,1,opt,name=log_index_prefix,json=logIndexPrefix" json:"log_index_prefix,omitempty"`
	// Number of secs logs will be stored in ElasticSearch
	LogStorageLifetime int64 `protobuf:"varint,2,opt,name=log_storage_lifetime,json=logStorageLifetime" json:"log_storage_lifetime,omitempty"`
	// Number of secs logs will be stored in InfluxDB
	MonitoringStorageLifetime int64 `protobuf:"varint,3,opt,name=monitoring_storage_lifetime,json=monitoringStorageLifetime" json:"monitoring_storage_lifetime,omitempty"`
}

func (m *ClusterSettings) Reset()                    { *m = ClusterSettings{} }
func (m *ClusterSettings) String() string            { return proto.CompactTextString(m) }
func (*ClusterSettings) ProtoMessage()               {}
func (*ClusterSettings) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ClusterSettings) GetLogIndexPrefix() string {
	if m != nil {
		return m.LogIndexPrefix
	}
	return ""
}

func (m *ClusterSettings) GetLogStorageLifetime() int64 {
	if m != nil {
		return m.LogStorageLifetime
	}
	return 0
}

func (m *ClusterSettings) GetMonitoringStorageLifetime() int64 {
	if m != nil {
		return m.MonitoringStorageLifetime
	}
	return 0
}

type Cluster struct {
	Phid                 string            `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider             string            `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	Os                   string            `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	Region               string            `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Zone                 string            `protobuf:"bytes,6,opt,name=zone" json:"zone,omitempty"`
	CreatedAt            int64             `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Links                map[string]string `protobuf:"bytes,8,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DoNotDelete          bool              `protobuf:"varint,9,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	Status               string            `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	StatusCause          string            `protobuf:"bytes,11,opt,name=status_cause,json=statusCause" json:"status_cause,omitempty"`
	GceProject           string            `protobuf:"bytes,12,opt,name=gce_project,json=gceProject" json:"gce_project,omitempty"`
	KubeServerVersion    string            `protobuf:"bytes,13,opt,name=kube_server_version,json=kubeServerVersion" json:"kube_server_version,omitempty"`
	KubeSaltbaseVersion  string            `protobuf:"bytes,14,opt,name=kube_saltbase_version,json=kubeSaltbaseVersion" json:"kube_saltbase_version,omitempty"`
	KubeStarterVersion   string            `protobuf:"bytes,15,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	NodeCount            int32             `protobuf:"varint,16,opt,name=node_count,json=nodeCount" json:"node_count,omitempty"`
	ApiServerUrl         string            `protobuf:"bytes,17,opt,name=api_server_url,json=apiServerUrl" json:"api_server_url,omitempty"`
	KubeUser             string            `protobuf:"bytes,18,opt,name=kube_user,json=kubeUser" json:"kube_user,omitempty"`
	KubePassword         string            `protobuf:"bytes,19,opt,name=kube_password,json=kubePassword" json:"kube_password,omitempty"`
	CaCert               string            `protobuf:"bytes,20,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	KubeBearerToken      string            `protobuf:"bytes,21,opt,name=kube_bearer_token,json=kubeBearerToken" json:"kube_bearer_token,omitempty"`
	Settings             *ClusterSettings  `protobuf:"bytes,22,opt,name=settings" json:"settings,omitempty"`
	InstanceRootPassword string            `protobuf:"bytes,23,opt,name=instance_root_password,json=instanceRootPassword" json:"instance_root_password,omitempty"`
	Version              string            `protobuf:"bytes,24,opt,name=version" json:"version,omitempty"`
	Sku                  string            `protobuf:"bytes,25,opt,name=sku" json:"sku,omitempty"`
	CreatedBy            string            `protobuf:"bytes,26,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	DefaultAccessLevel   string            `protobuf:"bytes,27,opt,name=default_access_level,json=defaultAccessLevel" json:"default_access_level,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Cluster) GetPhid() string {
	if m != nil {
		return m.Phid
	}
	return ""
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Cluster) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *Cluster) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Cluster) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Cluster) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Cluster) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Cluster) GetDoNotDelete() bool {
	if m != nil {
		return m.DoNotDelete
	}
	return false
}

func (m *Cluster) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Cluster) GetStatusCause() string {
	if m != nil {
		return m.StatusCause
	}
	return ""
}

func (m *Cluster) GetGceProject() string {
	if m != nil {
		return m.GceProject
	}
	return ""
}

func (m *Cluster) GetKubeServerVersion() string {
	if m != nil {
		return m.KubeServerVersion
	}
	return ""
}

func (m *Cluster) GetKubeSaltbaseVersion() string {
	if m != nil {
		return m.KubeSaltbaseVersion
	}
	return ""
}

func (m *Cluster) GetKubeStarterVersion() string {
	if m != nil {
		return m.KubeStarterVersion
	}
	return ""
}

func (m *Cluster) GetNodeCount() int32 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *Cluster) GetApiServerUrl() string {
	if m != nil {
		return m.ApiServerUrl
	}
	return ""
}

func (m *Cluster) GetKubeUser() string {
	if m != nil {
		return m.KubeUser
	}
	return ""
}

func (m *Cluster) GetKubePassword() string {
	if m != nil {
		return m.KubePassword
	}
	return ""
}

func (m *Cluster) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *Cluster) GetKubeBearerToken() string {
	if m != nil {
		return m.KubeBearerToken
	}
	return ""
}

func (m *Cluster) GetSettings() *ClusterSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Cluster) GetInstanceRootPassword() string {
	if m != nil {
		return m.InstanceRootPassword
	}
	return ""
}

func (m *Cluster) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Cluster) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *Cluster) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Cluster) GetDefaultAccessLevel() string {
	if m != nil {
		return m.DefaultAccessLevel
	}
	return ""
}

type ClusterDescribeRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ClusterDescribeRequest) Reset()                    { *m = ClusterDescribeRequest{} }
func (m *ClusterDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeRequest) ProtoMessage()               {}
func (*ClusterDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ClusterDescribeRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ClusterDescribeResponse struct {
	Status  *appscode_dtypes.Status       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Cluster *Cluster                      `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	Spec    *ClusterDescribeResponse_Spec `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *ClusterDescribeResponse) Reset()                    { *m = ClusterDescribeResponse{} }
func (m *ClusterDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse) ProtoMessage()               {}
func (*ClusterDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ClusterDescribeResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterDescribeResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ClusterDescribeResponse) GetSpec() *ClusterDescribeResponse_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ClusterDescribeResponse_Spec struct {
	ContainerCount int32 `protobuf:"varint,1,opt,name=container_count,json=containerCount" json:"container_count,omitempty"`
	PodCount       int32 `protobuf:"varint,2,opt,name=pod_count,json=podCount" json:"pod_count,omitempty"`
	ServiceCount   int32 `protobuf:"varint,3,opt,name=service_count,json=serviceCount" json:"service_count,omitempty"`
	RcCount        int32 `protobuf:"varint,4,opt,name=rc_count,json=rcCount" json:"rc_count,omitempty"`
	TotalCpu       int64 `protobuf:"varint,5,opt,name=total_cpu,json=totalCpu" json:"total_cpu,omitempty"`
	TotalMemory    int64 `protobuf:"varint,6,opt,name=total_memory,json=totalMemory" json:"total_memory,omitempty"`
}

func (m *ClusterDescribeResponse_Spec) Reset()                    { *m = ClusterDescribeResponse_Spec{} }
func (m *ClusterDescribeResponse_Spec) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse_Spec) ProtoMessage()               {}
func (*ClusterDescribeResponse_Spec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3, 0} }

func (m *ClusterDescribeResponse_Spec) GetContainerCount() int32 {
	if m != nil {
		return m.ContainerCount
	}
	return 0
}

func (m *ClusterDescribeResponse_Spec) GetPodCount() int32 {
	if m != nil {
		return m.PodCount
	}
	return 0
}

func (m *ClusterDescribeResponse_Spec) GetServiceCount() int32 {
	if m != nil {
		return m.ServiceCount
	}
	return 0
}

func (m *ClusterDescribeResponse_Spec) GetRcCount() int32 {
	if m != nil {
		return m.RcCount
	}
	return 0
}

func (m *ClusterDescribeResponse_Spec) GetTotalCpu() int64 {
	if m != nil {
		return m.TotalCpu
	}
	return 0
}

func (m *ClusterDescribeResponse_Spec) GetTotalMemory() int64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

type ClusterListRequest struct {
	Status []string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *ClusterListRequest) Reset()                    { *m = ClusterListRequest{} }
func (m *ClusterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterListRequest) ProtoMessage()               {}
func (*ClusterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ClusterListRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClusterListResponse struct {
	Status   *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Clusters []*Cluster              `protobuf:"bytes,2,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *ClusterListResponse) Reset()                    { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()               {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ClusterListResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterListResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type InstanceGroup struct {
	Sku              string `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	Count            int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	UseSpotInstances bool   `protobuf:"varint,3,opt,name=use_spot_instances,json=useSpotInstances" json:"use_spot_instances,omitempty"`
}

func (m *InstanceGroup) Reset()                    { *m = InstanceGroup{} }
func (m *InstanceGroup) String() string            { return proto.CompactTextString(m) }
func (*InstanceGroup) ProtoMessage()               {}
func (*InstanceGroup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *InstanceGroup) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *InstanceGroup) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *InstanceGroup) GetUseSpotInstances() bool {
	if m != nil {
		return m.UseSpotInstances
	}
	return false
}

type ClusterCreateRequest struct {
	Name                string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider            string            `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Zone                string            `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	CloudCredential     string            `protobuf:"bytes,4,opt,name=cloud_credential,json=cloudCredential" json:"cloud_credential,omitempty"`
	CloudCredentialData map[string]string `protobuf:"bytes,5,rep,name=cloud_credential_data,json=cloudCredentialData" json:"cloud_credential_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeSet             map[string]int64  `protobuf:"bytes,6,rep,name=node_set,json=nodeSet" json:"node_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	NodeGroups          []*InstanceGroup  `protobuf:"bytes,14,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
	KubeSaltbaseVersion string            `protobuf:"bytes,7,opt,name=kube_saltbase_version,json=kubeSaltbaseVersion" json:"kube_saltbase_version,omitempty"`
	KubeStarterVersion  string            `protobuf:"bytes,8,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	KubeServerVersion   string            `protobuf:"bytes,9,opt,name=kube_server_version,json=kubeServerVersion" json:"kube_server_version,omitempty"`
	DoNotDelete         bool              `protobuf:"varint,10,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	HostfactsVersion    string            `protobuf:"bytes,11,opt,name=hostfacts_version,json=hostfactsVersion" json:"hostfacts_version,omitempty"`
	Version             string            `protobuf:"bytes,12,opt,name=version" json:"version,omitempty"`
	// Default access level is to allow permission to the cluster
	// when no Role matched for that specif user or group. This can
	// set as
	//    - v:cluster-admins    // to allow admin access
	//    - v:cluster-deployer  // to allow deployer access
	//    - v:cluster-viewer    // to allow viewer access
	//    - ""                  // empty value stands for no access
	// If not set this will set ""
	DefaultAccessLevel string `protobuf:"bytes,13,opt,name=default_access_level,json=defaultAccessLevel" json:"default_access_level,omitempty"`
}

func (m *ClusterCreateRequest) Reset()                    { *m = ClusterCreateRequest{} }
func (m *ClusterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterCreateRequest) ProtoMessage()               {}
func (*ClusterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ClusterCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterCreateRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ClusterCreateRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ClusterCreateRequest) GetCloudCredential() string {
	if m != nil {
		return m.CloudCredential
	}
	return ""
}

func (m *ClusterCreateRequest) GetCloudCredentialData() map[string]string {
	if m != nil {
		return m.CloudCredentialData
	}
	return nil
}

func (m *ClusterCreateRequest) GetNodeSet() map[string]int64 {
	if m != nil {
		return m.NodeSet
	}
	return nil
}

func (m *ClusterCreateRequest) GetNodeGroups() []*InstanceGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

func (m *ClusterCreateRequest) GetKubeSaltbaseVersion() string {
	if m != nil {
		return m.KubeSaltbaseVersion
	}
	return ""
}

func (m *ClusterCreateRequest) GetKubeStarterVersion() string {
	if m != nil {
		return m.KubeStarterVersion
	}
	return ""
}

func (m *ClusterCreateRequest) GetKubeServerVersion() string {
	if m != nil {
		return m.KubeServerVersion
	}
	return ""
}

func (m *ClusterCreateRequest) GetDoNotDelete() bool {
	if m != nil {
		return m.DoNotDelete
	}
	return false
}

func (m *ClusterCreateRequest) GetHostfactsVersion() string {
	if m != nil {
		return m.HostfactsVersion
	}
	return ""
}

func (m *ClusterCreateRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ClusterCreateRequest) GetDefaultAccessLevel() string {
	if m != nil {
		return m.DefaultAccessLevel
	}
	return ""
}

type ClusterScaleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// New node configuration for the cluster
	NodeSet    map[string]int64 `protobuf:"bytes,2,rep,name=node_set,json=nodeSet" json:"node_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	NodeGroups []*InstanceGroup `protobuf:"bytes,3,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
}

func (m *ClusterScaleRequest) Reset()                    { *m = ClusterScaleRequest{} }
func (m *ClusterScaleRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterScaleRequest) ProtoMessage()               {}
func (*ClusterScaleRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ClusterScaleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterScaleRequest) GetNodeSet() map[string]int64 {
	if m != nil {
		return m.NodeSet
	}
	return nil
}

func (m *ClusterScaleRequest) GetNodeGroups() []*InstanceGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

type ClusterDeleteRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIp    bool   `protobuf:"varint,2,opt,name=release_reserved_ip,json=releaseReservedIp" json:"release_reserved_ip,omitempty"`
	Force                bool   `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	DeleteLodabalancers  bool   `protobuf:"varint,4,opt,name=delete_lodabalancers,json=deleteLodabalancers" json:"delete_lodabalancers,omitempty"`
	DeleteDynamicVolumes bool   `protobuf:"varint,5,opt,name=delete_dynamic_volumes,json=deleteDynamicVolumes" json:"delete_dynamic_volumes,omitempty"`
}

func (m *ClusterDeleteRequest) Reset()                    { *m = ClusterDeleteRequest{} }
func (m *ClusterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDeleteRequest) ProtoMessage()               {}
func (*ClusterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ClusterDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterDeleteRequest) GetReleaseReservedIp() bool {
	if m != nil {
		return m.ReleaseReservedIp
	}
	return false
}

func (m *ClusterDeleteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ClusterDeleteRequest) GetDeleteLodabalancers() bool {
	if m != nil {
		return m.DeleteLodabalancers
	}
	return false
}

func (m *ClusterDeleteRequest) GetDeleteDynamicVolumes() bool {
	if m != nil {
		return m.DeleteDynamicVolumes
	}
	return false
}

type ClusterStartupConfigRequest struct {
	Uid            string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Role           string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	ContextVersion int64  `protobuf:"varint,3,opt,name=context_version,json=contextVersion" json:"context_version,omitempty"`
}

func (m *ClusterStartupConfigRequest) Reset()                    { *m = ClusterStartupConfigRequest{} }
func (m *ClusterStartupConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupConfigRequest) ProtoMessage()               {}
func (*ClusterStartupConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ClusterStartupConfigRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ClusterStartupConfigRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *ClusterStartupConfigRequest) GetContextVersion() int64 {
	if m != nil {
		return m.ContextVersion
	}
	return 0
}

type ClusterStartupConfigResponse struct {
	Status        *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Configuration string                  `protobuf:"bytes,2,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ClusterStartupConfigResponse) Reset()                    { *m = ClusterStartupConfigResponse{} }
func (m *ClusterStartupConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupConfigResponse) ProtoMessage()               {}
func (*ClusterStartupConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *ClusterStartupConfigResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterStartupConfigResponse) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

type ClusterInstanceByIPRequest struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	ExternalIp string `protobuf:"bytes,2,opt,name=external_ip,json=externalIp" json:"external_ip,omitempty"`
}

func (m *ClusterInstanceByIPRequest) Reset()                    { *m = ClusterInstanceByIPRequest{} }
func (m *ClusterInstanceByIPRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceByIPRequest) ProtoMessage()               {}
func (*ClusterInstanceByIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ClusterInstanceByIPRequest) GetPhid() string {
	if m != nil {
		return m.Phid
	}
	return ""
}

func (m *ClusterInstanceByIPRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

type ClusterInstanceResponse struct {
	Status   *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Instance *ClusterInstance        `protobuf:"bytes,2,opt,name=instance" json:"instance,omitempty"`
}

func (m *ClusterInstanceResponse) Reset()                    { *m = ClusterInstanceResponse{} }
func (m *ClusterInstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceResponse) ProtoMessage()               {}
func (*ClusterInstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *ClusterInstanceResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterInstanceResponse) GetInstance() *ClusterInstance {
	if m != nil {
		return m.Instance
	}
	return nil
}

type ClusterClientConfigRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterClientConfigRequest) Reset()                    { *m = ClusterClientConfigRequest{} }
func (m *ClusterClientConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientConfigRequest) ProtoMessage()               {}
func (*ClusterClientConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *ClusterClientConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterClientConfigResponse struct {
	Status          *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ClusterDomain   string                  `protobuf:"bytes,3,opt,name=cluster_domain,json=clusterDomain" json:"cluster_domain,omitempty"`
	CaCert          string                  `protobuf:"bytes,4,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	ApiServerUrl    string                  `protobuf:"bytes,5,opt,name=api_server_url,json=apiServerUrl" json:"api_server_url,omitempty"`
	ClusterUserName string                  `protobuf:"bytes,6,opt,name=cluster_user_name,json=clusterUserName" json:"cluster_user_name,omitempty"`
	UserCert        string                  `protobuf:"bytes,7,opt,name=user_cert,json=userCert" json:"user_cert,omitempty"`
	UserKey         string                  `protobuf:"bytes,8,opt,name=user_key,json=userKey" json:"user_key,omitempty"`
	ContextName     string                  `protobuf:"bytes,9,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	UserToken       string                  `protobuf:"bytes,10,opt,name=user_token,json=userToken" json:"user_token,omitempty"`
	Password        string                  `protobuf:"bytes,11,opt,name=password" json:"password,omitempty"`
}

func (m *ClusterClientConfigResponse) Reset()                    { *m = ClusterClientConfigResponse{} }
func (m *ClusterClientConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientConfigResponse) ProtoMessage()               {}
func (*ClusterClientConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *ClusterClientConfigResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterClientConfigResponse) GetClusterDomain() string {
	if m != nil {
		return m.ClusterDomain
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetApiServerUrl() string {
	if m != nil {
		return m.ApiServerUrl
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetClusterUserName() string {
	if m != nil {
		return m.ClusterUserName
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetUserCert() string {
	if m != nil {
		return m.UserCert
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetUserToken() string {
	if m != nil {
		return m.UserToken
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ClusterClientContainerRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DiskName string `protobuf:"bytes,2,opt,name=disk_name,json=diskName" json:"disk_name,omitempty"`
}

func (m *ClusterClientContainerRequest) Reset()                    { *m = ClusterClientContainerRequest{} }
func (m *ClusterClientContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientContainerRequest) ProtoMessage()               {}
func (*ClusterClientContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *ClusterClientContainerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterClientContainerRequest) GetDiskName() string {
	if m != nil {
		return m.DiskName
	}
	return ""
}

type ClusterInstanceListRequest struct {
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
}

func (m *ClusterInstanceListRequest) Reset()                    { *m = ClusterInstanceListRequest{} }
func (m *ClusterInstanceListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceListRequest) ProtoMessage()               {}
func (*ClusterInstanceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *ClusterInstanceListRequest) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type ClusterInstance struct {
	Phid       string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ExternalIp string `protobuf:"bytes,4,opt,name=external_ip,json=externalIp" json:"external_ip,omitempty"`
	InternalIp string `protobuf:"bytes,5,opt,name=internal_ip,json=internalIp" json:"internal_ip,omitempty"`
	Sku        string `protobuf:"bytes,6,opt,name=sku" json:"sku,omitempty"`
}

func (m *ClusterInstance) Reset()                    { *m = ClusterInstance{} }
func (m *ClusterInstance) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstance) ProtoMessage()               {}
func (*ClusterInstance) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

func (m *ClusterInstance) GetPhid() string {
	if m != nil {
		return m.Phid
	}
	return ""
}

func (m *ClusterInstance) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *ClusterInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterInstance) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *ClusterInstance) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *ClusterInstance) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

type ClusterInstanceListResponse struct {
	Status    *appscode_dtypes.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Instances []*ClusterInstance      `protobuf:"bytes,2,rep,name=instances" json:"instances,omitempty"`
}

func (m *ClusterInstanceListResponse) Reset()                    { *m = ClusterInstanceListResponse{} }
func (m *ClusterInstanceListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceListResponse) ProtoMessage()               {}
func (*ClusterInstanceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *ClusterInstanceListResponse) GetStatus() *appscode_dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ClusterInstanceListResponse) GetInstances() []*ClusterInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

type ClusterUpdateRequest struct {
	Name        string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DoNotDelete bool             `protobuf:"varint,2,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	Settings    *ClusterSettings `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
	// Default access level is to allow permission to the cluster
	// when no Role matched for that specif user or group. This can
	// set as
	//    - v:cluster-admins    // to allow admin access
	//    - v:cluster-deployer  // to allow deployer access
	//    - v:cluster-viewer    // to allow viewer access
	//    - ""                  // empty value stands for no access
	DefaultAccessLevel string `protobuf:"bytes,4,opt,name=default_access_level,json=defaultAccessLevel" json:"default_access_level,omitempty"`
}

func (m *ClusterUpdateRequest) Reset()                    { *m = ClusterUpdateRequest{} }
func (m *ClusterUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpdateRequest) ProtoMessage()               {}
func (*ClusterUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func (m *ClusterUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterUpdateRequest) GetDoNotDelete() bool {
	if m != nil {
		return m.DoNotDelete
	}
	return false
}

func (m *ClusterUpdateRequest) GetSettings() *ClusterSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *ClusterUpdateRequest) GetDefaultAccessLevel() string {
	if m != nil {
		return m.DefaultAccessLevel
	}
	return ""
}

type ClusterUpgradeRequest struct {
	Name                string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	KubeSaltbaseVersion string `protobuf:"bytes,2,opt,name=kube_saltbase_version,json=kubeSaltbaseVersion" json:"kube_saltbase_version,omitempty"`
	KubeStarterVersion  string `protobuf:"bytes,3,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	KubeServerVersion   string `protobuf:"bytes,4,opt,name=kube_server_version,json=kubeServerVersion" json:"kube_server_version,omitempty"`
	HostfactsVersion    string `protobuf:"bytes,5,opt,name=hostfacts_version,json=hostfactsVersion" json:"hostfacts_version,omitempty"`
	Version             string `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
}

func (m *ClusterUpgradeRequest) Reset()                    { *m = ClusterUpgradeRequest{} }
func (m *ClusterUpgradeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpgradeRequest) ProtoMessage()               {}
func (*ClusterUpgradeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

func (m *ClusterUpgradeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterUpgradeRequest) GetKubeSaltbaseVersion() string {
	if m != nil {
		return m.KubeSaltbaseVersion
	}
	return ""
}

func (m *ClusterUpgradeRequest) GetKubeStarterVersion() string {
	if m != nil {
		return m.KubeStarterVersion
	}
	return ""
}

func (m *ClusterUpgradeRequest) GetKubeServerVersion() string {
	if m != nil {
		return m.KubeServerVersion
	}
	return ""
}

func (m *ClusterUpgradeRequest) GetHostfactsVersion() string {
	if m != nil {
		return m.HostfactsVersion
	}
	return ""
}

func (m *ClusterUpgradeRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterSettings)(nil), "appscode.kubernetes.v1beta1.ClusterSettings")
	proto.RegisterType((*Cluster)(nil), "appscode.kubernetes.v1beta1.Cluster")
	proto.RegisterType((*ClusterDescribeRequest)(nil), "appscode.kubernetes.v1beta1.ClusterDescribeRequest")
	proto.RegisterType((*ClusterDescribeResponse)(nil), "appscode.kubernetes.v1beta1.ClusterDescribeResponse")
	proto.RegisterType((*ClusterDescribeResponse_Spec)(nil), "appscode.kubernetes.v1beta1.ClusterDescribeResponse.Spec")
	proto.RegisterType((*ClusterListRequest)(nil), "appscode.kubernetes.v1beta1.ClusterListRequest")
	proto.RegisterType((*ClusterListResponse)(nil), "appscode.kubernetes.v1beta1.ClusterListResponse")
	proto.RegisterType((*InstanceGroup)(nil), "appscode.kubernetes.v1beta1.InstanceGroup")
	proto.RegisterType((*ClusterCreateRequest)(nil), "appscode.kubernetes.v1beta1.ClusterCreateRequest")
	proto.RegisterType((*ClusterScaleRequest)(nil), "appscode.kubernetes.v1beta1.ClusterScaleRequest")
	proto.RegisterType((*ClusterDeleteRequest)(nil), "appscode.kubernetes.v1beta1.ClusterDeleteRequest")
	proto.RegisterType((*ClusterStartupConfigRequest)(nil), "appscode.kubernetes.v1beta1.ClusterStartupConfigRequest")
	proto.RegisterType((*ClusterStartupConfigResponse)(nil), "appscode.kubernetes.v1beta1.ClusterStartupConfigResponse")
	proto.RegisterType((*ClusterInstanceByIPRequest)(nil), "appscode.kubernetes.v1beta1.ClusterInstanceByIPRequest")
	proto.RegisterType((*ClusterInstanceResponse)(nil), "appscode.kubernetes.v1beta1.ClusterInstanceResponse")
	proto.RegisterType((*ClusterClientConfigRequest)(nil), "appscode.kubernetes.v1beta1.ClusterClientConfigRequest")
	proto.RegisterType((*ClusterClientConfigResponse)(nil), "appscode.kubernetes.v1beta1.ClusterClientConfigResponse")
	proto.RegisterType((*ClusterClientContainerRequest)(nil), "appscode.kubernetes.v1beta1.ClusterClientContainerRequest")
	proto.RegisterType((*ClusterInstanceListRequest)(nil), "appscode.kubernetes.v1beta1.ClusterInstanceListRequest")
	proto.RegisterType((*ClusterInstance)(nil), "appscode.kubernetes.v1beta1.ClusterInstance")
	proto.RegisterType((*ClusterInstanceListResponse)(nil), "appscode.kubernetes.v1beta1.ClusterInstanceListResponse")
	proto.RegisterType((*ClusterUpdateRequest)(nil), "appscode.kubernetes.v1beta1.ClusterUpdateRequest")
	proto.RegisterType((*ClusterUpgradeRequest)(nil), "appscode.kubernetes.v1beta1.ClusterUpgradeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Clusters service

type ClustersClient interface {
	List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error)
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Scale(ctx context.Context, in *ClusterScaleRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	Upgrade(ctx context.Context, in *ClusterUpgradeRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	ClientConfig(ctx context.Context, in *ClusterClientConfigRequest, opts ...grpc.CallOption) (*ClusterClientConfigResponse, error)
	Instances(ctx context.Context, in *ClusterInstanceListRequest, opts ...grpc.CallOption) (*ClusterInstanceListResponse, error)
	StartupConfig(ctx context.Context, in *ClusterStartupConfigRequest, opts ...grpc.CallOption) (*ClusterStartupConfigResponse, error)
	InstanceByIP(ctx context.Context, in *ClusterInstanceByIPRequest, opts ...grpc.CallOption) (*ClusterInstanceResponse, error)
}

type clustersClient struct {
	cc *grpc.ClientConn
}

func NewClustersClient(cc *grpc.ClientConn) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error) {
	out := new(ClusterDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Scale(ctx context.Context, in *ClusterScaleRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Scale", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Upgrade(ctx context.Context, in *ClusterUpgradeRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Upgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) ClientConfig(ctx context.Context, in *ClusterClientConfigRequest, opts ...grpc.CallOption) (*ClusterClientConfigResponse, error) {
	out := new(ClusterClientConfigResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/ClientConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Instances(ctx context.Context, in *ClusterInstanceListRequest, opts ...grpc.CallOption) (*ClusterInstanceListResponse, error) {
	out := new(ClusterInstanceListResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Instances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) StartupConfig(ctx context.Context, in *ClusterStartupConfigRequest, opts ...grpc.CallOption) (*ClusterStartupConfigResponse, error) {
	out := new(ClusterStartupConfigResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/StartupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) InstanceByIP(ctx context.Context, in *ClusterInstanceByIPRequest, opts ...grpc.CallOption) (*ClusterInstanceResponse, error) {
	out := new(ClusterInstanceResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/InstanceByIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clusters service

type ClustersServer interface {
	List(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	Describe(context.Context, *ClusterDescribeRequest) (*ClusterDescribeResponse, error)
	Create(context.Context, *ClusterCreateRequest) (*appscode_dtypes.LongRunningResponse, error)
	Update(context.Context, *ClusterUpdateRequest) (*appscode_dtypes.VoidResponse, error)
	Scale(context.Context, *ClusterScaleRequest) (*appscode_dtypes.LongRunningResponse, error)
	Upgrade(context.Context, *ClusterUpgradeRequest) (*appscode_dtypes.LongRunningResponse, error)
	Delete(context.Context, *ClusterDeleteRequest) (*appscode_dtypes.LongRunningResponse, error)
	ClientConfig(context.Context, *ClusterClientConfigRequest) (*ClusterClientConfigResponse, error)
	Instances(context.Context, *ClusterInstanceListRequest) (*ClusterInstanceListResponse, error)
	StartupConfig(context.Context, *ClusterStartupConfigRequest) (*ClusterStartupConfigResponse, error)
	InstanceByIP(context.Context, *ClusterInstanceByIPRequest) (*ClusterInstanceResponse, error)
}

func RegisterClustersServer(s *grpc.Server, srv ClustersServer) {
	s.RegisterService(&_Clusters_serviceDesc, srv)
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).List(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Describe(ctx, req.(*ClusterDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Create(ctx, req.(*ClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Update(ctx, req.(*ClusterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Scale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Scale(ctx, req.(*ClusterScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Upgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Upgrade(ctx, req.(*ClusterUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Delete(ctx, req.(*ClusterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_ClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).ClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/ClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).ClientConfig(ctx, req.(*ClusterClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Instances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInstanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Instances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Instances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Instances(ctx, req.(*ClusterInstanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_StartupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStartupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).StartupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/StartupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).StartupConfig(ctx, req.(*ClusterStartupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_InstanceByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInstanceByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).InstanceByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/InstanceByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).InstanceByIP(ctx, req.(*ClusterInstanceByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta1.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Clusters_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clusters_Update_Handler,
		},
		{
			MethodName: "Scale",
			Handler:    _Clusters_Scale_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _Clusters_Upgrade_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
		{
			MethodName: "ClientConfig",
			Handler:    _Clusters_ClientConfig_Handler,
		},
		{
			MethodName: "Instances",
			Handler:    _Clusters_Instances_Handler,
		},
		{
			MethodName: "StartupConfig",
			Handler:    _Clusters_StartupConfig_Handler,
		},
		{
			MethodName: "InstanceByIP",
			Handler:    _Clusters_InstanceByIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 2253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x59, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x57, 0xcf, 0xd8, 0x9e, 0x9e, 0x37, 0xb6, 0xe3, 0x94, 0x9d, 0xa4, 0x33, 0x5e, 0xb3, 0xa6,
	0x13, 0x84, 0xd7, 0x9b, 0xcc, 0xd8, 0xde, 0x45, 0x9b, 0x8d, 0xb4, 0x26, 0xf1, 0x38, 0xb0, 0xde,
	0x75, 0xb2, 0xde, 0x36, 0xc9, 0x81, 0x0f, 0xb5, 0xda, 0xdd, 0xe5, 0x49, 0xaf, 0xdb, 0x5d, 0x4d,
	0x55, 0xb5, 0xc9, 0x10, 0x99, 0xc3, 0x9e, 0x72, 0x44, 0x82, 0x13, 0x12, 0x07, 0x38, 0x71, 0x01,
	0x71, 0xe0, 0xe3, 0x7f, 0x40, 0x48, 0x20, 0x71, 0x82, 0x33, 0x07, 0xfe, 0x02, 0x4e, 0x1c, 0x50,
	0x7d, 0x74, 0x4f, 0x8f, 0xc7, 0xe3, 0xf4, 0x38, 0x17, 0xab, 0xeb, 0xbd, 0x7a, 0x5f, 0x55, 0xef,
	0xd5, 0xfb, 0xbd, 0x31, 0xcc, 0xf8, 0x51, 0xca, 0x38, 0xa6, 0xad, 0x84, 0x12, 0x4e, 0xd0, 0xa2,
	0x97, 0x24, 0xcc, 0x27, 0x01, 0x6e, 0x1d, 0xa5, 0x07, 0x98, 0xc6, 0x98, 0x63, 0xd6, 0x3a, 0x59,
	0x3f, 0xc0, 0xdc, 0x5b, 0x6f, 0xbe, 0xd5, 0x25, 0xa4, 0x1b, 0xe1, 0xb6, 0x97, 0x84, 0x6d, 0x2f,
	0x8e, 0x09, 0xf7, 0x78, 0x48, 0x62, 0xa6, 0x44, 0x9b, 0x5f, 0xc9, 0x44, 0x47, 0xf0, 0xdf, 0x1e,
	0xe0, 0x07, 0xbc, 0x97, 0x60, 0xd6, 0x96, 0x7f, 0xd5, 0x06, 0xfb, 0xb7, 0x06, 0x5c, 0xe9, 0x28,
	0x6f, 0xf6, 0x31, 0xe7, 0x61, 0xdc, 0x65, 0x68, 0x05, 0xe6, 0x22, 0xd2, 0x75, 0xc3, 0x38, 0xc0,
	0x2f, 0xdc, 0x84, 0xe2, 0xc3, 0xf0, 0x85, 0x65, 0x2c, 0x1b, 0x2b, 0x75, 0x67, 0x36, 0x22, 0xdd,
	0x1d, 0x41, 0xde, 0x93, 0x54, 0xb4, 0x06, 0x0b, 0x62, 0x27, 0xe3, 0x84, 0x7a, 0x5d, 0xec, 0x46,
	0xe1, 0x21, 0xe6, 0xe1, 0x31, 0xb6, 0x2a, 0xcb, 0xc6, 0x4a, 0xd5, 0x41, 0x11, 0xe9, 0xee, 0x2b,
	0xd6, 0xae, 0xe6, 0xa0, 0x4d, 0x58, 0x3c, 0x26, 0x71, 0xc8, 0x09, 0x0d, 0xe3, 0x73, 0x04, 0xab,
	0x52, 0xf0, 0x66, 0x7f, 0xcb, 0x19, 0x79, 0xfb, 0x95, 0x09, 0x35, 0xed, 0x2f, 0x42, 0x30, 0x91,
	0x3c, 0x0f, 0x03, 0xed, 0x9b, 0xfc, 0x16, 0xb4, 0xd8, 0xd3, 0x1e, 0xd4, 0x1d, 0xf9, 0x8d, 0x9a,
	0x60, 0x26, 0x94, 0x9c, 0x84, 0x01, 0xa6, 0xd2, 0x40, 0xdd, 0xc9, 0xd7, 0x68, 0x16, 0x2a, 0x84,
	0x59, 0x13, 0x92, 0x5a, 0x21, 0x0c, 0x5d, 0x87, 0x29, 0x8a, 0xbb, 0x21, 0x89, 0xad, 0x49, 0x49,
	0xd3, 0x2b, 0xa1, 0xf7, 0xc7, 0x24, 0xc6, 0xd6, 0x94, 0xd2, 0x2b, 0xbe, 0xd1, 0x12, 0x80, 0x4f,
	0xb1, 0xc7, 0x71, 0xe0, 0x7a, 0xdc, 0xaa, 0x49, 0xd7, 0xeb, 0x9a, 0xf2, 0x90, 0xa3, 0x47, 0x30,
	0x19, 0x85, 0xf1, 0x11, 0xb3, 0xcc, 0xe5, 0xea, 0x4a, 0x63, 0xa3, 0xdd, 0xba, 0xe0, 0x9a, 0x5b,
	0x3a, 0xa6, 0xd6, 0xae, 0x90, 0x78, 0x14, 0x73, 0xda, 0x73, 0x94, 0x34, 0xb2, 0x61, 0x26, 0x20,
	0x6e, 0x4c, 0xb8, 0x1b, 0xe0, 0x08, 0x73, 0x6c, 0xd5, 0x97, 0x8d, 0x15, 0xd3, 0x69, 0x04, 0xe4,
	0x09, 0xe1, 0xdb, 0x92, 0x24, 0xbc, 0x66, 0xdc, 0xe3, 0x29, 0xb3, 0x40, 0x79, 0xad, 0x56, 0xe8,
	0xab, 0x30, 0xad, 0xbe, 0x5c, 0xdf, 0x4b, 0x19, 0xb6, 0x1a, 0x92, 0xdb, 0x50, 0xb4, 0x8e, 0x20,
	0xa1, 0xb7, 0xa1, 0xd1, 0xf5, 0xb1, 0x9b, 0x50, 0xf2, 0x05, 0xf6, 0xb9, 0x35, 0x2d, 0x77, 0x40,
	0xd7, 0xc7, 0x7b, 0x8a, 0x82, 0x5a, 0x30, 0x2f, 0xfc, 0x75, 0x19, 0xa6, 0x27, 0x98, 0xba, 0x27,
	0x98, 0x32, 0x71, 0x3c, 0x33, 0x72, 0xe3, 0x55, 0xc1, 0xda, 0x97, 0x9c, 0x67, 0x8a, 0x81, 0x36,
	0xe0, 0x9a, 0xda, 0xef, 0x45, 0xfc, 0xc0, 0x63, 0x38, 0x97, 0x98, 0x95, 0x12, 0x52, 0xd9, 0xbe,
	0xe6, 0x65, 0x32, 0x6b, 0xb0, 0xa0, 0x64, 0xb8, 0x47, 0x79, 0xc1, 0xc8, 0x15, 0x29, 0x82, 0xa4,
	0x88, 0x62, 0x65, 0x12, 0x4b, 0x00, 0x31, 0x09, 0xb0, 0xeb, 0x93, 0x34, 0xe6, 0xd6, 0xdc, 0xb2,
	0xb1, 0x32, 0xe9, 0xd4, 0x05, 0xa5, 0x23, 0x08, 0xe8, 0x36, 0xcc, 0x7a, 0x49, 0x98, 0xf9, 0x9c,
	0xd2, 0xc8, 0xba, 0x2a, 0x55, 0x4d, 0x7b, 0x49, 0xa8, 0xdc, 0x7d, 0x4a, 0x23, 0xb4, 0x08, 0x75,
	0x69, 0x36, 0x65, 0x98, 0x5a, 0x48, 0x65, 0x86, 0x20, 0x3c, 0x65, 0x98, 0xa2, 0x5b, 0x30, 0x23,
	0x99, 0x89, 0xc7, 0xd8, 0x8f, 0x08, 0x0d, 0xac, 0x79, 0xa5, 0x41, 0x10, 0xf7, 0x34, 0x0d, 0xdd,
	0x80, 0x9a, 0xef, 0xb9, 0x3e, 0xa6, 0xdc, 0x5a, 0x50, 0x27, 0xef, 0x7b, 0x1d, 0x4c, 0x39, 0x5a,
	0x05, 0x79, 0x34, 0xee, 0x01, 0xf6, 0x28, 0xa6, 0x2e, 0x27, 0x47, 0x38, 0xb6, 0xae, 0xc9, 0x2d,
	0x57, 0x04, 0x63, 0x4b, 0xd2, 0xbf, 0x23, 0xc8, 0xe8, 0x63, 0x30, 0x99, 0xae, 0x3d, 0xeb, 0xfa,
	0xb2, 0xb1, 0xd2, 0xd8, 0xb8, 0x53, 0x26, 0x57, 0xb2, 0x7a, 0x75, 0x72, 0x69, 0xf4, 0x3e, 0x5c,
	0x0f, 0x63, 0xc6, 0xbd, 0xd8, 0xc7, 0x2e, 0x25, 0x84, 0xf7, 0x9d, 0xbf, 0x21, 0x4d, 0x2f, 0x64,
	0x5c, 0x87, 0x10, 0x9e, 0x07, 0x61, 0x41, 0x2d, 0x3b, 0x70, 0x4b, 0x6e, 0xcb, 0x96, 0x68, 0x0e,
	0xaa, 0xec, 0x28, 0xb5, 0x6e, 0x4a, 0xaa, 0xf8, 0x2c, 0xe6, 0xfc, 0x41, 0xcf, 0x6a, 0x4a, 0x46,
	0x96, 0xf3, 0x5b, 0x3d, 0x71, 0x91, 0x01, 0x3e, 0xf4, 0xd2, 0x88, 0xbb, 0x9e, 0xef, 0x63, 0xc6,
	0xdc, 0x08, 0x9f, 0xe0, 0xc8, 0x5a, 0x54, 0x17, 0xa9, 0x79, 0x0f, 0x25, 0x6b, 0x57, 0x70, 0x9a,
	0xf7, 0x00, 0xfa, 0x39, 0x2f, 0x0c, 0x1e, 0xe1, 0x9e, 0xae, 0x68, 0xf1, 0x89, 0x16, 0x60, 0xf2,
	0xc4, 0x8b, 0xd2, 0xac, 0xa2, 0xd5, 0xe2, 0x7e, 0xe5, 0x9e, 0x61, 0xaf, 0xc2, 0x75, 0x7d, 0x12,
	0xdb, 0x98, 0xf9, 0x34, 0x3c, 0xc0, 0x0e, 0xfe, 0x61, 0x8a, 0x19, 0x17, 0x5a, 0xd2, 0xfc, 0x5d,
	0x10, 0x9f, 0xf6, 0x6f, 0xaa, 0x70, 0x63, 0x68, 0x33, 0x4b, 0x48, 0xcc, 0x30, 0x6a, 0xe7, 0xc5,
	0x63, 0xc8, 0xc3, 0xbf, 0xd1, 0x3f, 0x7c, 0xf5, 0x60, 0xb6, 0xf6, 0x25, 0x3b, 0xaf, 0xaa, 0x4d,
	0xa8, 0xe9, 0x07, 0x5c, 0x3a, 0xd5, 0xd8, 0xb8, 0x5d, 0xe6, 0xba, 0x9c, 0x4c, 0x08, 0x3d, 0x86,
	0x09, 0x96, 0x60, 0x5f, 0xbe, 0x45, 0x8d, 0x8d, 0x0f, 0xcb, 0x08, 0x9f, 0x75, 0xba, 0xb5, 0x9f,
	0x60, 0xdf, 0x91, 0x6a, 0x9a, 0x7f, 0x35, 0x60, 0x42, 0x2c, 0xd1, 0xd7, 0xe1, 0x8a, 0x4f, 0x62,
	0xee, 0x85, 0x31, 0xa6, 0xba, 0x30, 0x0c, 0x59, 0x18, 0xb3, 0x39, 0x59, 0x55, 0xc7, 0x22, 0xd4,
	0x13, 0x12, 0xe8, 0x2d, 0x15, 0xb9, 0xc5, 0x4c, 0x48, 0xa0, 0x98, 0xb7, 0x60, 0x46, 0x94, 0x4d,
	0xe8, 0x67, 0xc5, 0x55, 0x95, 0x1b, 0xa6, 0x35, 0x51, 0x6d, 0xba, 0x09, 0x26, 0xf5, 0x35, 0x7f,
	0x42, 0xf2, 0x6b, 0xd4, 0xcf, 0x95, 0x73, 0xc2, 0xbd, 0xc8, 0xf5, 0x93, 0x54, 0x3e, 0xa2, 0x55,
	0xc7, 0x94, 0x84, 0x4e, 0x92, 0x8a, 0x07, 0x49, 0x31, 0x8f, 0xf1, 0x31, 0xa1, 0x3d, 0xf9, 0x9c,
	0x56, 0x9d, 0x86, 0xa4, 0x3d, 0x96, 0x24, 0xfb, 0x0e, 0x20, 0x1d, 0xf4, 0x6e, 0xc8, 0x78, 0x76,
	0xa5, 0xd7, 0x0b, 0x97, 0x54, 0xed, 0xbf, 0x70, 0xf6, 0x2b, 0x03, 0xe6, 0x07, 0xb6, 0x5f, 0xf6,
	0x52, 0x1f, 0x80, 0xa9, 0xef, 0x87, 0x59, 0x15, 0xf9, 0x60, 0x97, 0xbb, 0xd5, 0x5c, 0xca, 0xc6,
	0x30, 0xb3, 0xa3, 0xcb, 0xeb, 0xdb, 0x94, 0xa4, 0x49, 0x56, 0x3d, 0x46, 0xbf, 0x7a, 0x16, 0x60,
	0xb2, 0x7f, 0xe8, 0x55, 0x47, 0x2d, 0xd0, 0x1d, 0x40, 0x29, 0xc3, 0x2e, 0x4b, 0x08, 0x77, 0xb3,
	0x02, 0x65, 0xf2, 0xd8, 0x4d, 0x67, 0x2e, 0x65, 0x78, 0x3f, 0x21, 0x3c, 0xd3, 0xcc, 0xec, 0xff,
	0x4c, 0xc1, 0x82, 0x36, 0xde, 0x91, 0x75, 0x97, 0x1d, 0x51, 0xd6, 0xfa, 0x8c, 0x11, 0xad, 0xaf,
	0x72, 0xa6, 0xf5, 0x65, 0x2d, 0xad, 0x5a, 0x68, 0x69, 0xef, 0xc0, 0x9c, 0x1f, 0x91, 0x34, 0x70,
	0x7d, 0x8a, 0x03, 0x1c, 0xf3, 0xd0, 0x8b, 0x74, 0x73, 0xbc, 0x22, 0xe9, 0x9d, 0x9c, 0x8c, 0x7e,
	0x02, 0xd7, 0xce, 0x6e, 0x75, 0x03, 0x8f, 0x7b, 0xd6, 0xa4, 0x3c, 0xbd, 0x4f, 0xca, 0x9c, 0xde,
	0x40, 0x00, 0xad, 0xce, 0xa0, 0x85, 0x6d, 0x8f, 0x7b, 0xaa, 0x13, 0xce, 0xfb, 0xc3, 0x1c, 0xf4,
	0x03, 0x30, 0x65, 0x07, 0x60, 0x98, 0x5b, 0x53, 0xd2, 0xe4, 0xe6, 0xf8, 0x26, 0x9f, 0x90, 0x00,
	0xef, 0x63, 0x2e, 0xcd, 0x6c, 0x55, 0x2c, 0xc3, 0xa9, 0xc5, 0x8a, 0x82, 0x3e, 0x85, 0x86, 0x54,
	0xdf, 0x15, 0x57, 0xc9, 0xac, 0x59, 0x69, 0x61, 0xf5, 0x42, 0x0b, 0x03, 0xb7, 0xef, 0xc8, 0xfe,
	0x24, 0x3f, 0xd9, 0xe8, 0x9e, 0x58, 0x1b, 0xbf, 0x27, 0x9a, 0x23, 0x7b, 0xe2, 0x88, 0x4e, 0x5d,
	0x1f, 0xd5, 0xa9, 0x87, 0x90, 0x05, 0x0c, 0x23, 0x8b, 0x77, 0xe1, 0xea, 0x73, 0xc2, 0xf8, 0xa1,
	0xe7, 0x73, 0x96, 0x6b, 0x54, 0x30, 0x62, 0x2e, 0x67, 0x64, 0x0a, 0x0b, 0x8d, 0x64, 0x7a, 0xb0,
	0x91, 0x8c, 0xea, 0x0b, 0x33, 0x23, 0xfb, 0xc2, 0xb7, 0xc0, 0x1a, 0x95, 0x0f, 0xe3, 0x74, 0x89,
	0xe6, 0x7d, 0x98, 0x2e, 0x5e, 0xf2, 0xeb, 0x64, 0xab, 0xc5, 0x0e, 0xf3, 0xd3, 0x4a, 0xfe, 0xb8,
	0xec, 0xfb, 0x5e, 0x74, 0x61, 0xa5, 0x7d, 0xbf, 0x90, 0x8e, 0xea, 0xfd, 0xf8, 0xa8, 0x54, 0x13,
	0x2f, 0xe8, 0x2d, 0x9f, 0x8d, 0xd5, 0x37, 0xc9, 0xc6, 0x37, 0x3a, 0x92, 0x7f, 0x1a, 0xf9, 0xeb,
	0xa3, 0x32, 0xe4, 0xa2, 0x33, 0x69, 0xc1, 0x3c, 0xc5, 0x11, 0x16, 0x09, 0x4f, 0xb1, 0xcc, 0xca,
	0xc0, 0x0d, 0x13, 0xa9, 0xd4, 0x74, 0xae, 0x6a, 0x96, 0xa3, 0x39, 0x3b, 0x89, 0x30, 0x7b, 0x48,
	0xa8, 0x8f, 0xf5, 0xdb, 0xa7, 0x16, 0x68, 0x5d, 0xe4, 0x8e, 0x30, 0xe5, 0x46, 0x24, 0xf0, 0x0e,
	0xbc, 0x48, 0x44, 0x45, 0x15, 0x68, 0x37, 0x9d, 0x79, 0xc5, 0xdb, 0x2d, 0xb2, 0x04, 0x0e, 0xd2,
	0x22, 0x41, 0x2f, 0xf6, 0x8e, 0x43, 0xdf, 0x3d, 0x21, 0x51, 0x7a, 0x8c, 0x99, 0x6c, 0x48, 0xa6,
	0xa3, 0x15, 0x6e, 0x2b, 0xe6, 0x33, 0xc5, 0xb3, 0x23, 0x58, 0xcc, 0x6e, 0x45, 0x14, 0x56, 0x9a,
	0x74, 0x48, 0x7c, 0x18, 0x76, 0x47, 0xa2, 0x0a, 0x11, 0x33, 0x25, 0x51, 0x3e, 0x6c, 0x88, 0xef,
	0xac, 0x09, 0xe3, 0x17, 0x3c, 0x2f, 0x17, 0x35, 0xd4, 0xcc, 0x6a, 0xb2, 0x2e, 0x16, 0x3b, 0x85,
	0xb7, 0xce, 0xb7, 0x76, 0xd9, 0x0e, 0x76, 0x1b, 0x66, 0x7c, 0xa9, 0x22, 0xa5, 0x72, 0x06, 0xd4,
	0x6e, 0x0d, 0x12, 0xed, 0xcf, 0xa1, 0xa9, 0xcd, 0x66, 0x09, 0xb2, 0xd5, 0xdb, 0xd9, 0x2b, 0xdc,
	0xe2, 0xd0, 0x48, 0xf5, 0x36, 0x34, 0xf0, 0x0b, 0x8e, 0x69, 0xec, 0x45, 0xd9, 0xed, 0xd5, 0x1d,
	0xc8, 0x48, 0x3b, 0x89, 0xfd, 0x73, 0x23, 0x07, 0x57, 0x99, 0xce, 0xcb, 0x47, 0xf1, 0x31, 0x98,
	0x59, 0x0f, 0xd4, 0xe8, 0xaa, 0x14, 0x18, 0xce, 0x0d, 0xe7, 0xd2, 0xf6, 0x5a, 0x1e, 0x69, 0x27,
	0x0a, 0x71, 0xcc, 0x07, 0x6f, 0xf3, 0x9c, 0x7c, 0xb5, 0xff, 0x5b, 0xc9, 0x33, 0x60, 0x50, 0xe4,
	0xb2, 0xc1, 0x7c, 0x0d, 0x66, 0x35, 0x3c, 0x70, 0x03, 0x72, 0xec, 0x85, 0xb1, 0x6e, 0xb6, 0xd9,
	0x0f, 0x00, 0xdb, 0x92, 0x58, 0x9c, 0x22, 0x26, 0x06, 0xa6, 0x88, 0xe1, 0x31, 0x66, 0xf2, 0x9c,
	0x31, 0x66, 0x15, 0xae, 0x66, 0x56, 0xc4, 0x24, 0xe3, 0xca, 0xb8, 0xa6, 0xb2, 0xae, 0x2d, 0x19,
	0x62, 0xa2, 0x79, 0x22, 0x4a, 0x72, 0x11, 0xea, 0x72, 0x8f, 0x34, 0xa6, 0xba, 0x8f, 0x29, 0x08,
	0xd2, 0xdc, 0x4d, 0x90, 0xdf, 0xae, 0x78, 0x0d, 0x54, 0x9b, 0xa9, 0x89, 0xf5, 0xa7, 0xb8, 0x27,
	0x80, 0x5b, 0x96, 0xd6, 0x52, 0xbd, 0x6a, 0x2a, 0x0d, 0x4d, 0x93, 0xaa, 0x97, 0x00, 0xa4, 0xb4,
	0x9a, 0x75, 0xd4, 0x20, 0x2a, 0x8d, 0xa9, 0x29, 0x47, 0x40, 0x91, 0x6c, 0x1a, 0x69, 0x68, 0x28,
	0xa2, 0xd7, 0xf6, 0x1e, 0x2c, 0x9d, 0x3d, 0x77, 0x85, 0x57, 0x2f, 0x7a, 0x5d, 0x16, 0xa1, 0x1e,
	0x84, 0xec, 0xc8, 0x2d, 0xcc, 0xfb, 0xa6, 0x20, 0x08, 0x67, 0xec, 0x6f, 0x0e, 0xa5, 0x79, 0x11,
	0x4d, 0x8a, 0x68, 0xf4, 0x89, 0x15, 0xd4, 0x36, 0x34, 0x4d, 0x2a, 0xf8, 0x5d, 0xff, 0x87, 0x91,
	0x4c, 0xc3, 0xeb, 0xab, 0x23, 0x18, 0xaa, 0x8e, 0xfe, 0x2f, 0x12, 0xd5, 0x82, 0xeb, 0x67, 0x4a,
	0x6a, 0xe2, 0x6c, 0x49, 0x89, 0x0d, 0x61, 0xdc, 0xdf, 0xa0, 0x6e, 0x1d, 0x32, 0xd2, 0x4e, 0x8e,
	0x2d, 0xa7, 0x72, 0x6c, 0x69, 0xff, 0xc2, 0xc8, 0x93, 0x77, 0x30, 0xe4, 0xcb, 0x26, 0xef, 0x27,
	0x50, 0xef, 0xa3, 0x51, 0xd5, 0xd2, 0xc6, 0x2b, 0xc5, 0xbe, 0xb8, 0xfd, 0x97, 0x7e, 0xdb, 0x78,
	0x9a, 0x04, 0xaf, 0x01, 0xad, 0x43, 0xb8, 0xa4, 0x32, 0x8c, 0x4b, 0x8a, 0x33, 0x73, 0xf5, 0x8d,
	0x66, 0xe6, 0x51, 0xd0, 0x64, 0x62, 0x14, 0x34, 0xb1, 0x5f, 0x55, 0xe0, 0x5a, 0x1e, 0x4c, 0x97,
	0x7a, 0xc1, 0x85, 0xd1, 0x8c, 0xc4, 0x7e, 0x95, 0xf1, 0xb1, 0x5f, 0x75, 0x5c, 0xec, 0x37, 0x31,
	0x0a, 0xfb, 0x9d, 0x8b, 0xeb, 0x26, 0x5f, 0x8f, 0xeb, 0xa6, 0x06, 0x70, 0xdd, 0xc6, 0x9f, 0xe7,
	0xc0, 0xd4, 0x47, 0xc1, 0xd0, 0xaf, 0x0d, 0x98, 0x10, 0x29, 0x87, 0x4a, 0xfd, 0xd4, 0x55, 0xa8,
	0xc7, 0xe6, 0x5a, 0x79, 0x01, 0x95, 0xcd, 0xf6, 0x07, 0x5f, 0xfe, 0xd1, 0xaa, 0x98, 0xc6, 0x97,
	0xff, 0xf8, 0xf7, 0xcf, 0x2a, 0xef, 0xa2, 0x77, 0xda, 0x03, 0xbf, 0x73, 0xf6, 0x75, 0xb4, 0xb5,
	0x8e, 0x76, 0x36, 0xa5, 0xa1, 0x3f, 0x18, 0x60, 0x66, 0xd3, 0x34, 0x7a, 0x6f, 0xbc, 0xd9, 0x5b,
	0x39, 0xfb, 0xfe, 0x65, 0x06, 0x76, 0xfb, 0xa3, 0x82, 0xc3, 0xeb, 0xa8, 0x5d, 0xda, 0xe1, 0xf6,
	0xcb, 0x34, 0x0c, 0x4e, 0xd1, 0x2f, 0x0d, 0x98, 0x52, 0xa3, 0x0b, 0x5a, 0x1f, 0x7b, 0xcc, 0x69,
	0xde, 0x1e, 0xaa, 0xf5, 0x5d, 0x12, 0x77, 0x9d, 0x34, 0x8e, 0xc3, 0x38, 0x6f, 0x6f, 0xf6, 0xfd,
	0x82, 0x8b, 0x2d, 0xbb, 0xfc, 0x99, 0xde, 0x37, 0x56, 0xa5, 0x7f, 0xaa, 0xb2, 0xcb, 0xf9, 0x37,
	0xf0, 0x0a, 0x34, 0x97, 0x86, 0xfc, 0x7b, 0x46, 0xc2, 0x20, 0x77, 0xec, 0x61, 0xc1, 0xb1, 0x6f,
	0x34, 0xd7, 0xc6, 0x38, 0x3b, 0x51, 0x81, 0xa7, 0xc2, 0xbf, 0xdf, 0x1b, 0x30, 0x29, 0xb1, 0x36,
	0x5a, 0x1b, 0x17, 0x96, 0x97, 0x3c, 0xbd, 0xcf, 0x0a, 0x4e, 0x76, 0x9a, 0x9b, 0xe3, 0x3a, 0xd9,
	0xf6, 0x7c, 0xf9, 0xc3, 0x7d, 0x9b, 0x09, 0xd3, 0xc2, 0xe5, 0x3f, 0x19, 0x50, 0xd3, 0xef, 0x0b,
	0xda, 0x28, 0x77, 0xa6, 0xc5, 0xc7, 0xa8, 0xa4, 0xdb, 0x9f, 0x17, 0xdc, 0x7e, 0xd4, 0x7c, 0x70,
	0x69, 0xb7, 0x53, 0x65, 0x5c, 0x38, 0xfe, 0x2b, 0x03, 0xa6, 0xf4, 0x33, 0xbd, 0x5e, 0xae, 0x56,
	0x0a, 0x83, 0x44, 0x49, 0xb7, 0x37, 0x0b, 0x6e, 0x6f, 0xac, 0x8e, 0x9d, 0x12, 0xe8, 0x6f, 0x06,
	0x4c, 0x17, 0x31, 0x1e, 0xfa, 0xa0, 0x54, 0x55, 0x0d, 0x03, 0xc9, 0xe6, 0xbd, 0xf1, 0x05, 0x75,
	0x0c, 0xbb, 0x85, 0x18, 0x1e, 0xa0, 0xf1, 0x33, 0xc6, 0x97, 0x4a, 0xef, 0x2a, 0x7c, 0x8f, 0xfe,
	0x6e, 0x40, 0x3d, 0xff, 0x95, 0xa8, 0x5c, 0x38, 0xe7, 0x40, 0xa3, 0x72, 0xe1, 0x9c, 0x07, 0x30,
	0xec, 0xbd, 0x42, 0x38, 0xdb, 0x68, 0x6b, 0x8c, 0x70, 0x8a, 0x58, 0xec, 0xb4, 0x9d, 0xa3, 0x06,
	0xf4, 0x3f, 0x03, 0x66, 0x06, 0x86, 0x23, 0x54, 0xca, 0xbb, 0xf3, 0xa6, 0xb7, 0xe6, 0x87, 0x97,
	0x90, 0xd4, 0x81, 0x9d, 0x14, 0x02, 0xfb, 0x02, 0x3d, 0x1f, 0xf3, 0xe9, 0x6e, 0x33, 0xa5, 0x54,
	0xdf, 0x53, 0xfb, 0xa5, 0x18, 0x13, 0x4f, 0xdb, 0x1a, 0x39, 0xdf, 0xd5, 0x9d, 0x54, 0x9c, 0xc2,
	0xe0, 0xd8, 0x78, 0x8a, 0xfe, 0x65, 0xc0, 0x74, 0x71, 0x48, 0x1b, 0xef, 0x52, 0x0b, 0x63, 0x5d,
	0xb9, 0x96, 0x75, 0x76, 0x76, 0xb3, 0xbf, 0x57, 0x88, 0xfb, 0x33, 0xf4, 0x78, 0x8c, 0xb8, 0x05,
	0x32, 0xee, 0x5f, 0xe4, 0xdd, 0x83, 0xde, 0xdd, 0x30, 0x69, 0xbf, 0x2c, 0x40, 0xde, 0xd3, 0xad,
	0x4d, 0xb8, 0xe5, 0x93, 0xe3, 0xbe, 0x5f, 0x5e, 0x12, 0x9e, 0xe3, 0xdb, 0xd6, 0xb4, 0x76, 0x6e,
	0x8f, 0x12, 0x4e, 0xf6, 0x8c, 0xef, 0xd6, 0x34, 0xe3, 0x60, 0x4a, 0xfe, 0xff, 0xf2, 0xbd, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x86, 0x6f, 0xc4, 0x4c, 0x1d, 0x00, 0x00,
}
