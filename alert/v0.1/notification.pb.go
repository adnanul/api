// Code generated by protoc-gen-go.
// source: notification.proto
// DO NOT EDIT!

package alert

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Notification struct {
	ServiceName  string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	HostName     string `protobuf:"bytes,2,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
	State        string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	StateType    string `protobuf:"bytes,4,opt,name=state_type,json=stateType" json:"state_type,omitempty"`
	Method       string `protobuf:"bytes,5,opt,name=method" json:"method,omitempty"`
	UserUid      string `protobuf:"bytes,6,opt,name=user_uid,json=userUid" json:"user_uid,omitempty"`
	AlertCreated int64  `protobuf:"varint,7,opt,name=alert_created,json=alertCreated" json:"alert_created,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type NotificationListRequest struct {
	Cluster             string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Plugin              string `protobuf:"bytes,2,opt,name=plugin" json:"plugin,omitempty"`
	KubernetesNamespace string `protobuf:"bytes,3,opt,name=kubernetes_namespace,json=kubernetesNamespace" json:"kubernetes_namespace,omitempty"`
	ObjectName          string `protobuf:"bytes,4,opt,name=object_name,json=objectName" json:"object_name,omitempty"`
}

func (m *NotificationListRequest) Reset()                    { *m = NotificationListRequest{} }
func (m *NotificationListRequest) String() string            { return proto.CompactTextString(m) }
func (*NotificationListRequest) ProtoMessage()               {}
func (*NotificationListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type NotificationListResponse struct {
	Status        *dtypes.Status  `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Notifications []*Notification `protobuf:"bytes,2,rep,name=notifications" json:"notifications,omitempty"`
}

func (m *NotificationListResponse) Reset()                    { *m = NotificationListResponse{} }
func (m *NotificationListResponse) String() string            { return proto.CompactTextString(m) }
func (*NotificationListResponse) ProtoMessage()               {}
func (*NotificationListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *NotificationListResponse) GetStatus() *dtypes.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *NotificationListResponse) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type NotifyRequest struct {
	StateType     string `protobuf:"bytes,1,opt,name=state_type,json=stateType" json:"state_type,omitempty"`
	State         string `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Time          string `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	ServiceOutput string `protobuf:"bytes,4,opt,name=service_output,json=serviceOutput" json:"service_output,omitempty"`
	AlertPhid     string `protobuf:"bytes,5,opt,name=alert_phid,json=alertPhid" json:"alert_phid,omitempty"`
	HostName      string `protobuf:"bytes,6,opt,name=host_name,json=hostName" json:"host_name,omitempty"`
}

func (m *NotifyRequest) Reset()                    { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string            { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()               {}
func (*NotifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type AcknowledgeRequest struct {
	// Notification PHID
	Phid    string `protobuf:"bytes,1,opt,name=phid" json:"phid,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
}

func (m *AcknowledgeRequest) Reset()                    { *m = AcknowledgeRequest{} }
func (m *AcknowledgeRequest) String() string            { return proto.CompactTextString(m) }
func (*AcknowledgeRequest) ProtoMessage()               {}
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*Notification)(nil), "alert.Notification")
	proto.RegisterType((*NotificationListRequest)(nil), "alert.NotificationListRequest")
	proto.RegisterType((*NotificationListResponse)(nil), "alert.NotificationListResponse")
	proto.RegisterType((*NotifyRequest)(nil), "alert.NotifyRequest")
	proto.RegisterType((*AcknowledgeRequest)(nil), "alert.AcknowledgeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Notifications service

type NotificationsClient interface {
	List(ctx context.Context, in *NotificationListRequest, opts ...grpc.CallOption) (*NotificationListResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
	Acknowledge(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error)
}

type notificationsClient struct {
	cc *grpc.ClientConn
}

func NewNotificationsClient(cc *grpc.ClientConn) NotificationsClient {
	return &notificationsClient{cc}
}

func (c *notificationsClient) List(ctx context.Context, in *NotificationListRequest, opts ...grpc.CallOption) (*NotificationListResponse, error) {
	out := new(NotificationListResponse)
	err := grpc.Invoke(ctx, "/alert.Notifications/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/alert.Notifications/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) Acknowledge(ctx context.Context, in *AcknowledgeRequest, opts ...grpc.CallOption) (*dtypes.VoidResponse, error) {
	out := new(dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/alert.Notifications/Acknowledge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifications service

type NotificationsServer interface {
	List(context.Context, *NotificationListRequest) (*NotificationListResponse, error)
	Notify(context.Context, *NotifyRequest) (*dtypes.VoidResponse, error)
	Acknowledge(context.Context, *AcknowledgeRequest) (*dtypes.VoidResponse, error)
}

func RegisterNotificationsServer(s *grpc.Server, srv NotificationsServer) {
	s.RegisterService(&_Notifications_serviceDesc, srv)
}

func _Notifications_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alert.Notifications/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).List(ctx, req.(*NotificationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alert.Notifications/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_Acknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).Acknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alert.Notifications/Acknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).Acknowledge(ctx, req.(*AcknowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alert.Notifications",
	HandlerType: (*NotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Notifications_List_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Notifications_Notify_Handler,
		},
		{
			MethodName: "Acknowledge",
			Handler:    _Notifications_Acknowledge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("notification.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xd3, 0xd6, 0x6d, 0x26, 0x4d, 0x0f, 0xd3, 0xa8, 0xb8, 0xe1, 0xa7, 0x60, 0x44, 0x55,
	0x81, 0x64, 0xd3, 0x72, 0x2a, 0x07, 0x24, 0x7e, 0x8e, 0xa8, 0xa0, 0xf0, 0x73, 0x8d, 0x1c, 0x7b,
	0x49, 0x96, 0x26, 0x5e, 0xe3, 0x5d, 0xb7, 0xaa, 0x50, 0x2f, 0x88, 0x37, 0xe0, 0x01, 0x78, 0x10,
	0x1e, 0x83, 0x23, 0x57, 0x1e, 0x82, 0x23, 0xeb, 0xd9, 0xdd, 0xd6, 0xa1, 0x54, 0xea, 0xa5, 0xda,
	0xf9, 0xbe, 0xe9, 0x7c, 0x33, 0xf3, 0x8d, 0x03, 0x98, 0x0b, 0xc5, 0x3f, 0xf0, 0x34, 0x51, 0x5c,
	0xe4, 0x51, 0x51, 0x0a, 0x25, 0x70, 0x29, 0x99, 0xb2, 0x52, 0xf5, 0x6f, 0x8c, 0x85, 0x18, 0x4f,
	0x59, 0x9c, 0x14, 0x3c, 0x4e, 0x72, 0x9d, 0x47, 0x39, 0xd2, 0x24, 0xf5, 0x37, 0x6a, 0x38, 0x53,
	0x27, 0x05, 0x93, 0x31, 0xfd, 0x35, 0x78, 0xf8, 0xcb, 0x83, 0xd5, 0x83, 0x46, 0x4d, 0xbc, 0x03,
	0xab, 0x92, 0x95, 0x47, 0x3c, 0x65, 0xc3, 0x3c, 0x99, 0xb1, 0xc0, 0xbb, 0xed, 0xed, 0xb4, 0x07,
	0x1d, 0x8b, 0x1d, 0x68, 0x08, 0xaf, 0x43, 0x7b, 0x22, 0xa4, 0x32, 0x7c, 0x8b, 0xf8, 0x95, 0x1a,
	0x20, 0xb2, 0x07, 0x4b, 0x52, 0x4b, 0xb3, 0x60, 0x81, 0x08, 0x13, 0xe0, 0x4d, 0x00, 0x7a, 0x0c,
	0x6b, 0xed, 0x60, 0x91, 0xa8, 0x36, 0x21, 0x6f, 0x35, 0x80, 0x1b, 0xe0, 0xcf, 0x98, 0x9a, 0x88,
	0x2c, 0x58, 0x22, 0xca, 0x46, 0xb8, 0x09, 0x2b, 0x95, 0x56, 0x1e, 0x56, 0x3c, 0x0b, 0x7c, 0x62,
	0x96, 0xeb, 0xf8, 0x1d, 0xcf, 0xf0, 0x2e, 0x74, 0x69, 0xee, 0x61, 0x5a, 0x32, 0x5d, 0x26, 0x0b,
	0x96, 0x35, 0xbf, 0x30, 0x58, 0x25, 0xf0, 0xb9, 0xc1, 0xc2, 0xef, 0x1e, 0x5c, 0x6b, 0x4e, 0xf7,
	0x92, 0x4b, 0x35, 0x60, 0x9f, 0x2a, 0x26, 0x15, 0x06, 0xb0, 0x9c, 0x4e, 0x2b, 0xa9, 0x58, 0x69,
	0x67, 0x74, 0x61, 0xdd, 0x4d, 0x31, 0xad, 0xc6, 0x3c, 0xb7, 0xc3, 0xd9, 0x08, 0x77, 0xa1, 0x77,
	0x58, 0x8d, 0x58, 0x99, 0x33, 0xc5, 0x24, 0x4d, 0x2f, 0x8b, 0x24, 0x75, 0x93, 0xae, 0x9f, 0x73,
	0x07, 0x8e, 0xc2, 0x2d, 0xe8, 0x88, 0xd1, 0x47, 0x96, 0xda, 0x65, 0x99, 0xc1, 0xc1, 0x40, 0x75,
	0x56, 0x78, 0x0a, 0xc1, 0xc5, 0x06, 0x65, 0xa1, 0x8d, 0x63, 0xb8, 0x0d, 0x7e, 0xbd, 0xa2, 0x4a,
	0x52, 0x83, 0x9d, 0xbd, 0xb5, 0xc8, 0x18, 0x18, 0xbd, 0x21, 0x74, 0x60, 0x59, 0xdc, 0x87, 0x6e,
	0xf3, 0x2c, 0xa4, 0x6e, 0x7b, 0x41, 0xa7, 0xaf, 0x47, 0xb4, 0x8b, 0xa8, 0x59, 0x7f, 0x30, 0x9f,
	0x19, 0xfe, 0xf0, 0xa0, 0x4b, 0xfc, 0x89, 0x5b, 0xcb, 0xbc, 0x53, 0xde, 0xbf, 0x4e, 0x9d, 0xd9,
	0xdb, 0x6a, 0xda, 0x8b, 0xb0, 0xa8, 0xf8, 0xcc, 0x6d, 0x82, 0xde, 0x78, 0x0f, 0xd6, 0xdc, 0x21,
	0x89, 0x4a, 0x15, 0x95, 0xb2, 0xd3, 0x77, 0x2d, 0xfa, 0x8a, 0xc0, 0x5a, 0xcf, 0xf8, 0x58, 0x4c,
	0xb8, 0xb3, 0xbf, 0x4d, 0xc8, 0x6b, 0x0d, 0xcc, 0xdf, 0x9a, 0x3f, 0x7f, 0x6b, 0xe1, 0x33, 0xc0,
	0xa7, 0xe9, 0x61, 0x2e, 0x8e, 0xa7, 0x2c, 0x1b, 0x33, 0x37, 0x81, 0x6e, 0x86, 0x6a, 0x99, 0xde,
	0xe9, 0x4d, 0x66, 0x8b, 0xd9, 0x8c, 0xe5, 0xca, 0x36, 0xee, 0xc2, 0xbd, 0x3f, 0x2d, 0xbb, 0x01,
	0xb7, 0x13, 0x3c, 0x86, 0xc5, 0xda, 0x06, 0xbc, 0xf5, 0x9f, 0xfd, 0x35, 0x0e, 0xa8, 0xbf, 0x75,
	0x29, 0x6f, 0xfc, 0x0b, 0xa3, 0x2f, 0x3f, 0x7f, 0x7f, 0x6b, 0xed, 0xe0, 0xb6, 0xfe, 0x26, 0x0b,
	0x99, 0x8a, 0xcc, 0x7e, 0x9c, 0xf5, 0x7f, 0xc5, 0x47, 0x0f, 0xa3, 0xdd, 0x78, 0xce, 0x0c, 0x1c,
	0x83, 0x6f, 0xbc, 0xc0, 0x5e, 0xb3, 0xb4, 0xb3, 0xa6, 0xdf, 0x73, 0xfe, 0xbf, 0x17, 0x3c, 0x3b,
	0x53, 0xd9, 0x25, 0x95, 0x07, 0xe1, 0x15, 0x55, 0x1e, 0x7b, 0xf7, 0xf1, 0xab, 0x07, 0x9d, 0xc6,
	0xe2, 0x70, 0xd3, 0xca, 0x5d, 0x5c, 0xe6, 0x25, 0x9a, 0x2f, 0x48, 0xf3, 0x49, 0xb8, 0x7f, 0x35,
	0xcd, 0xf8, 0x73, 0x6d, 0xc2, 0x69, 0x9c, 0x9c, 0xd7, 0xd7, 0x6d, 0x8c, 0x7c, 0xfa, 0x09, 0x7a,
	0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x02, 0x34, 0xb1, 0xd5, 0x04, 0x00, 0x00,
}
